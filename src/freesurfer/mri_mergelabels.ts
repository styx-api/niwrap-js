// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_MERGELABELS_METADATA: Metadata = {
    id: "92b8ea866e024868c9418a4954dce0cbbc1b29c6.boutiques",
    name: "mri_mergelabels",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriMergelabelsParameters {
    "@type"?: "freesurfer/mri_mergelabels";
    "input_labels": Array<InputPathType>;
    "output_label": string;
    "input_directory"?: string | null | undefined;
}
type MriMergelabelsParametersTagged = Required<Pick<MriMergelabelsParameters, '@type'>> & MriMergelabelsParameters;


/**
 * Output object returned when calling `MriMergelabelsParameters(...)`.
 *
 * @interface
 */
interface MriMergelabelsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Merged label output file
     */
    merged_label_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_labels Input label files to be merged.
 * @param output_label Output file for the merged label.
 * @param input_directory Directory containing label files to be merged.
 *
 * @returns Parameter dictionary
 */
function mri_mergelabels_params(
    input_labels: Array<InputPathType>,
    output_label: string,
    input_directory: string | null = null,
): MriMergelabelsParametersTagged {
    const params = {
        "@type": "freesurfer/mri_mergelabels" as const,
        "input_labels": input_labels,
        "output_label": output_label,
    };
    if (input_directory !== null) {
        params["input_directory"] = input_directory;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_mergelabels_cargs(
    params: MriMergelabelsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_mergelabels");
    cargs.push(
        "-i",
        ...(params["input_labels"] ?? null).map(f => execution.inputFile(f))
    );
    cargs.push(
        "-o",
        (params["output_label"] ?? null)
    );
    if ((params["input_directory"] ?? null) !== null) {
        cargs.push(
            "-d",
            (params["input_directory"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_mergelabels_outputs(
    params: MriMergelabelsParameters,
    execution: Execution,
): MriMergelabelsOutputs {
    const ret: MriMergelabelsOutputs = {
        root: execution.outputFile("."),
        merged_label_file: execution.outputFile([(params["output_label"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mri_mergelabels
 *
 * A tool to merge two or more label files by concatenating them together.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriMergelabelsOutputs`).
 */
function mri_mergelabels_execute(
    params: MriMergelabelsParameters,
    runner: Runner | null = null,
): MriMergelabelsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_MERGELABELS_METADATA);
    params = execution.params(params)
    const cargs = mri_mergelabels_cargs(params, execution)
    const ret = mri_mergelabels_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_mergelabels
 *
 * A tool to merge two or more label files by concatenating them together.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_labels Input label files to be merged.
 * @param output_label Output file for the merged label.
 * @param input_directory Directory containing label files to be merged.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriMergelabelsOutputs`).
 */
function mri_mergelabels(
    input_labels: Array<InputPathType>,
    output_label: string,
    input_directory: string | null = null,
    runner: Runner | null = null,
): MriMergelabelsOutputs {
    const params = mri_mergelabels_params(input_labels, output_label, input_directory)
    return mri_mergelabels_execute(params, runner);
}


export {
      MRI_MERGELABELS_METADATA,
      MriMergelabelsOutputs,
      mri_mergelabels,
      mri_mergelabels_execute,
      mri_mergelabels_params,
};
