// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const AFNI_OPEN_METADATA: Metadata = {
    id: "951fa387ec070337460df2310e677499f20a1408.boutiques",
    name: "afni_open",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface AfniOpenParameters {
    "@type"?: "afni/afni_open";
    "files": Array<InputPathType>;
    "method"?: string | null | undefined;
    "editor": boolean;
    "downloader": boolean;
    "examinexmat": boolean;
    "browser": boolean;
    "readme": boolean;
    "afniweb": boolean;
    "global_help": boolean;
    "gopts_help": boolean;
    "help": boolean;
    "mini_help": boolean;
    "extreme_help": boolean;
    "h_view": boolean;
    "h_web": boolean;
}
type AfniOpenParametersTagged = Required<Pick<AfniOpenParameters, '@type'>> & AfniOpenParameters;


/**
 * Output object returned when calling `AfniOpenParameters(...)`.
 *
 * @interface
 */
interface AfniOpenOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param files Input file(s) to be opened.
 * @param method Method to open files (editor, downloader, browser, afni, suma, 1dplot, ExamineXmat, iviewer, afniweb, readme).
 * @param editor Same as -w editor.
 * @param downloader Same as -w downloader.
 * @param examinexmat Same as -w ExamineXmat.
 * @param browser Same as -w browser.
 * @param readme Same as -w readme.
 * @param afniweb Same as -w afniweb.
 * @param global_help Show help for global options.
 * @param gopts_help Show help for global options.
 * @param help The entire help output.
 * @param mini_help Mini help.
 * @param extreme_help Extreme help.
 * @param h_view Open help in text editor.
 * @param h_web Open help in web browser.
 *
 * @returns Parameter dictionary
 */
function afni_open_params(
    files: Array<InputPathType>,
    method: string | null = null,
    editor: boolean = false,
    downloader: boolean = false,
    examinexmat: boolean = false,
    browser: boolean = false,
    readme: boolean = false,
    afniweb: boolean = false,
    global_help: boolean = false,
    gopts_help: boolean = false,
    help: boolean = false,
    mini_help: boolean = false,
    extreme_help: boolean = false,
    h_view: boolean = false,
    h_web: boolean = false,
): AfniOpenParametersTagged {
    const params = {
        "@type": "afni/afni_open" as const,
        "files": files,
        "editor": editor,
        "downloader": downloader,
        "examinexmat": examinexmat,
        "browser": browser,
        "readme": readme,
        "afniweb": afniweb,
        "global_help": global_help,
        "gopts_help": gopts_help,
        "help": help,
        "mini_help": mini_help,
        "extreme_help": extreme_help,
        "h_view": h_view,
        "h_web": h_web,
    };
    if (method !== null) {
        params["method"] = method;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function afni_open_cargs(
    params: AfniOpenParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("afni_open");
    cargs.push(...(params["files"] ?? null).map(f => execution.inputFile(f)));
    if ((params["method"] ?? null) !== null) {
        cargs.push(
            "-w",
            (params["method"] ?? null)
        );
    }
    if ((params["editor"] ?? false)) {
        cargs.push("-e");
    }
    if ((params["downloader"] ?? false)) {
        cargs.push("-d");
    }
    if ((params["examinexmat"] ?? false)) {
        cargs.push("-x");
    }
    if ((params["browser"] ?? false)) {
        cargs.push("-b");
    }
    if ((params["readme"] ?? false)) {
        cargs.push("-r");
    }
    if ((params["afniweb"] ?? false)) {
        cargs.push("-aw");
    }
    if ((params["global_help"] ?? false)) {
        cargs.push("-global_help");
    }
    if ((params["gopts_help"] ?? false)) {
        cargs.push("-gopts_help");
    }
    if ((params["help"] ?? false)) {
        cargs.push("-help");
    }
    if ((params["mini_help"] ?? false)) {
        cargs.push("-h");
    }
    if ((params["extreme_help"] ?? false)) {
        cargs.push("-HELP");
    }
    if ((params["h_view"] ?? false)) {
        cargs.push("-h_view");
    }
    if ((params["h_web"] ?? false)) {
        cargs.push("-h_web");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function afni_open_outputs(
    params: AfniOpenParameters,
    execution: Execution,
): AfniOpenOutputs {
    const ret: AfniOpenOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * afni_open
 *
 * A program to open various AFNI/SUMA files.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AfniOpenOutputs`).
 */
function afni_open_execute(
    params: AfniOpenParameters,
    runner: Runner | null = null,
): AfniOpenOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(AFNI_OPEN_METADATA);
    params = execution.params(params)
    const cargs = afni_open_cargs(params, execution)
    const ret = afni_open_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * afni_open
 *
 * A program to open various AFNI/SUMA files.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param files Input file(s) to be opened.
 * @param method Method to open files (editor, downloader, browser, afni, suma, 1dplot, ExamineXmat, iviewer, afniweb, readme).
 * @param editor Same as -w editor.
 * @param downloader Same as -w downloader.
 * @param examinexmat Same as -w ExamineXmat.
 * @param browser Same as -w browser.
 * @param readme Same as -w readme.
 * @param afniweb Same as -w afniweb.
 * @param global_help Show help for global options.
 * @param gopts_help Show help for global options.
 * @param help The entire help output.
 * @param mini_help Mini help.
 * @param extreme_help Extreme help.
 * @param h_view Open help in text editor.
 * @param h_web Open help in web browser.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AfniOpenOutputs`).
 */
function afni_open(
    files: Array<InputPathType>,
    method: string | null = null,
    editor: boolean = false,
    downloader: boolean = false,
    examinexmat: boolean = false,
    browser: boolean = false,
    readme: boolean = false,
    afniweb: boolean = false,
    global_help: boolean = false,
    gopts_help: boolean = false,
    help: boolean = false,
    mini_help: boolean = false,
    extreme_help: boolean = false,
    h_view: boolean = false,
    h_web: boolean = false,
    runner: Runner | null = null,
): AfniOpenOutputs {
    const params = afni_open_params(files, method, editor, downloader, examinexmat, browser, readme, afniweb, global_help, gopts_help, help, mini_help, extreme_help, h_view, h_web)
    return afni_open_execute(params, runner);
}


export {
      AFNI_OPEN_METADATA,
      AfniOpenOutputs,
      afni_open,
      afni_open_execute,
      afni_open_params,
};
