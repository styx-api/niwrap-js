// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_EXVIVO_SURFACES_METADATA: Metadata = {
    id: "7d3fdab622259a0ec052ecdb11e294b79bf1ccfc.boutiques",
    name: "mris_exvivo_surfaces",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisExvivoSurfacesParameters {
    "@type": "freesurfer.mris_exvivo_surfaces";
    "subject_name": string;
    "hemisphere": string;
    "omit_self_intersection": boolean;
    "create_curvature_area": boolean;
    "average_curvature"?: number | null | undefined;
    "white_only": boolean;
    "formalin"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mris_exvivo_surfaces": mris_exvivo_surfaces_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mris_exvivo_surfaces": mris_exvivo_surfaces_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_exvivo_surfaces(...)`.
 *
 * @interface
 */
interface MrisExvivoSurfacesOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Generated white matter surface file
     */
    white_surface: OutputPathType;
    /**
     * Generated gray matter surface file
     */
    gray_surface: OutputPathType;
    /**
     * Curvature file for cortical thickness
     */
    curvature_file: OutputPathType;
    /**
     * Surface file approximating layer IV of the cortical sheet
     */
    layer_iv_surface: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subject_name Name of the subject
 * @param hemisphere Hemisphere (e.g., lh or rh)
 * @param omit_self_intersection Omit self-intersection check and only generate gray/white surface.
 * @param create_curvature_area Create curvature and area files from white matter surface.
 * @param average_curvature Average curvature values a specified number of times.
 * @param white_only Only generate the white matter surface.
 * @param formalin Assume hemisphere is in formalin, with provided value indicating presence (0,1).
 *
 * @returns Parameter dictionary
 */
function mris_exvivo_surfaces_params(
    subject_name: string,
    hemisphere: string,
    omit_self_intersection: boolean = false,
    create_curvature_area: boolean = false,
    average_curvature: number | null = null,
    white_only: boolean = false,
    formalin: number | null = null,
): MrisExvivoSurfacesParameters {
    const params = {
        "@type": "freesurfer.mris_exvivo_surfaces" as const,
        "subject_name": subject_name,
        "hemisphere": hemisphere,
        "omit_self_intersection": omit_self_intersection,
        "create_curvature_area": create_curvature_area,
        "white_only": white_only,
    };
    if (average_curvature !== null) {
        params["average_curvature"] = average_curvature;
    }
    if (formalin !== null) {
        params["formalin"] = formalin;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_exvivo_surfaces_cargs(
    params: MrisExvivoSurfacesParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_exvivo_surfaces");
    cargs.push((params["subject_name"] ?? null));
    cargs.push((params["hemisphere"] ?? null));
    if ((params["omit_self_intersection"] ?? null)) {
        cargs.push("-q");
    }
    if ((params["create_curvature_area"] ?? null)) {
        cargs.push("-c");
    }
    if ((params["average_curvature"] ?? null) !== null) {
        cargs.push(
            "-a",
            String((params["average_curvature"] ?? null))
        );
    }
    if ((params["white_only"] ?? null)) {
        cargs.push("-whiteonly");
    }
    if ((params["formalin"] ?? null) !== null) {
        cargs.push(
            "-formalin",
            String((params["formalin"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_exvivo_surfaces_outputs(
    params: MrisExvivoSurfacesParameters,
    execution: Execution,
): MrisExvivoSurfacesOutputs {
    const ret: MrisExvivoSurfacesOutputs = {
        root: execution.outputFile("."),
        white_surface: execution.outputFile([(params["subject_name"] ?? null), "_", (params["hemisphere"] ?? null), "_white"].join('')),
        gray_surface: execution.outputFile([(params["subject_name"] ?? null), "_", (params["hemisphere"] ?? null), "_gray"].join('')),
        curvature_file: execution.outputFile([(params["subject_name"] ?? null), "_", (params["hemisphere"] ?? null), "_curvature"].join('')),
        layer_iv_surface: execution.outputFile([(params["subject_name"] ?? null), "_", (params["hemisphere"] ?? null), "_layerIV"].join('')),
    };
    return ret;
}


/**
 * mris_exvivo_surfaces
 *
 * FreeSurfer tool to position tessellation of the cortical surface at the white and gray matter surfaces, and generate relevant surface files.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisExvivoSurfacesOutputs`).
 */
function mris_exvivo_surfaces_execute(
    params: MrisExvivoSurfacesParameters,
    runner: Runner | null = null,
): MrisExvivoSurfacesOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_EXVIVO_SURFACES_METADATA);
    params = execution.params(params)
    const cargs = mris_exvivo_surfaces_cargs(params, execution)
    const ret = mris_exvivo_surfaces_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mris_exvivo_surfaces
 *
 * FreeSurfer tool to position tessellation of the cortical surface at the white and gray matter surfaces, and generate relevant surface files.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subject_name Name of the subject
 * @param hemisphere Hemisphere (e.g., lh or rh)
 * @param omit_self_intersection Omit self-intersection check and only generate gray/white surface.
 * @param create_curvature_area Create curvature and area files from white matter surface.
 * @param average_curvature Average curvature values a specified number of times.
 * @param white_only Only generate the white matter surface.
 * @param formalin Assume hemisphere is in formalin, with provided value indicating presence (0,1).
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisExvivoSurfacesOutputs`).
 */
function mris_exvivo_surfaces(
    subject_name: string,
    hemisphere: string,
    omit_self_intersection: boolean = false,
    create_curvature_area: boolean = false,
    average_curvature: number | null = null,
    white_only: boolean = false,
    formalin: number | null = null,
    runner: Runner | null = null,
): MrisExvivoSurfacesOutputs {
    const params = mris_exvivo_surfaces_params(subject_name, hemisphere, omit_self_intersection, create_curvature_area, average_curvature, white_only, formalin)
    return mris_exvivo_surfaces_execute(params, runner);
}


export {
      MRIS_EXVIVO_SURFACES_METADATA,
      MrisExvivoSurfacesOutputs,
      MrisExvivoSurfacesParameters,
      mris_exvivo_surfaces,
      mris_exvivo_surfaces_execute,
      mris_exvivo_surfaces_params,
};
