// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_LEFT_RIGHT_REGISTER_METADATA: Metadata = {
    id: "deb90227cd838d310a8c1fb72cfbad83cbc6d25f.boutiques",
    name: "mris_left_right_register",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisLeftRightRegisterParameters {
    "@type": "freesurfer.mris_left_right_register";
    "lh_sphere": InputPathType;
    "rh_sphere": InputPathType;
    "lh_sphere_left_right": string;
    "rh_sphere_left_right": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mris_left_right_register": mris_left_right_register_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mris_left_right_register": mris_left_right_register_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_left_right_register(...)`.
 *
 * @interface
 */
interface MrisLeftRightRegisterOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Registered left hemisphere spherical surface output file
     */
    out_lh_sphere_left_right: OutputPathType;
    /**
     * Registered right hemisphere spherical surface output file
     */
    out_rh_sphere_left_right: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param lh_sphere Left hemisphere spherical surface input file
 * @param rh_sphere Right hemisphere spherical surface input file
 * @param lh_sphere_left_right Output file for left hemisphere with left-right registration
 * @param rh_sphere_left_right Output file for right hemisphere with left-right registration
 *
 * @returns Parameter dictionary
 */
function mris_left_right_register_params(
    lh_sphere: InputPathType,
    rh_sphere: InputPathType,
    lh_sphere_left_right: string,
    rh_sphere_left_right: string,
): MrisLeftRightRegisterParameters {
    const params = {
        "@type": "freesurfer.mris_left_right_register" as const,
        "lh_sphere": lh_sphere,
        "rh_sphere": rh_sphere,
        "lh_sphere_left_right": lh_sphere_left_right,
        "rh_sphere_left_right": rh_sphere_left_right,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_left_right_register_cargs(
    params: MrisLeftRightRegisterParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_left_right_register");
    cargs.push(execution.inputFile((params["lh_sphere"] ?? null)));
    cargs.push(execution.inputFile((params["rh_sphere"] ?? null)));
    cargs.push((params["lh_sphere_left_right"] ?? null));
    cargs.push((params["rh_sphere_left_right"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_left_right_register_outputs(
    params: MrisLeftRightRegisterParameters,
    execution: Execution,
): MrisLeftRightRegisterOutputs {
    const ret: MrisLeftRightRegisterOutputs = {
        root: execution.outputFile("."),
        out_lh_sphere_left_right: execution.outputFile([(params["lh_sphere_left_right"] ?? null)].join('')),
        out_rh_sphere_left_right: execution.outputFile([(params["rh_sphere_left_right"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mris_left_right_register
 *
 * Register left and right hemisphere spherical surfaces.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisLeftRightRegisterOutputs`).
 */
function mris_left_right_register_execute(
    params: MrisLeftRightRegisterParameters,
    runner: Runner | null = null,
): MrisLeftRightRegisterOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_LEFT_RIGHT_REGISTER_METADATA);
    params = execution.params(params)
    const cargs = mris_left_right_register_cargs(params, execution)
    const ret = mris_left_right_register_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mris_left_right_register
 *
 * Register left and right hemisphere spherical surfaces.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param lh_sphere Left hemisphere spherical surface input file
 * @param rh_sphere Right hemisphere spherical surface input file
 * @param lh_sphere_left_right Output file for left hemisphere with left-right registration
 * @param rh_sphere_left_right Output file for right hemisphere with left-right registration
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisLeftRightRegisterOutputs`).
 */
function mris_left_right_register(
    lh_sphere: InputPathType,
    rh_sphere: InputPathType,
    lh_sphere_left_right: string,
    rh_sphere_left_right: string,
    runner: Runner | null = null,
): MrisLeftRightRegisterOutputs {
    const params = mris_left_right_register_params(lh_sphere, rh_sphere, lh_sphere_left_right, rh_sphere_left_right)
    return mris_left_right_register_execute(params, runner);
}


export {
      MRIS_LEFT_RIGHT_REGISTER_METADATA,
      MrisLeftRightRegisterOutputs,
      MrisLeftRightRegisterParameters,
      mris_left_right_register,
      mris_left_right_register_execute,
      mris_left_right_register_params,
};
