// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_ERRORS_METADATA: Metadata = {
    id: "ef9b47e313219e97d7f5d816c34ec14bc6f35660.boutiques",
    name: "mris_errors",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisErrorsParameters {
    "__STYXTYPE__": "mris_errors";
    "input_image_file": InputPathType;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mris_errors": mris_errors_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_errors(...)`.
 *
 * @interface
 */
interface MrisErrorsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function mris_errors_params(
    input_image_file: InputPathType,
): MrisErrorsParameters {
    /**
     * Build parameters.
    
     * @param input_image_file Input image file.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mris_errors" as const,
        "input_image_file": input_image_file,
    };
    return params;
}


function mris_errors_cargs(
    params: MrisErrorsParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mris_errors");
    cargs.push("[OPTIONS]");
    cargs.push(execution.inputFile((params["input_image_file"] ?? null)));
    return cargs;
}


function mris_errors_outputs(
    params: MrisErrorsParameters,
    execution: Execution,
): MrisErrorsOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MrisErrorsOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function mris_errors_execute(
    params: MrisErrorsParameters,
    execution: Execution,
): MrisErrorsOutputs {
    /**
     * This program will unfold an MRI on the surface of an ellipsoid.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MrisErrorsOutputs`).
     */
    params = execution.params(params)
    const cargs = mris_errors_cargs(params, execution)
    const ret = mris_errors_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mris_errors(
    input_image_file: InputPathType,
    runner: Runner | null = null,
): MrisErrorsOutputs {
    /**
     * This program will unfold an MRI on the surface of an ellipsoid.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param input_image_file Input image file.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MrisErrorsOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_ERRORS_METADATA);
    const params = mris_errors_params(input_image_file)
    return mris_errors_execute(params, execution);
}


export {
      MRIS_ERRORS_METADATA,
      MrisErrorsOutputs,
      MrisErrorsParameters,
      mris_errors,
      mris_errors_params,
};
