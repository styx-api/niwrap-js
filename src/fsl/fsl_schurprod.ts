// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FSL_SCHURPROD_METADATA: Metadata = {
    id: "abaff00b71cea2d8f9814d0eae44978f1e0fffa3.boutiques",
    name: "fsl_schurprod",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface FslSchurprodParameters {
    "__STYXTYPE__": "fsl_schurprod";
    "input_file": InputPathType;
    "design_file": InputPathType;
    "output_file": string;
    "regression_flag": boolean;
    "index"?: number | null | undefined;
    "mask_file"?: InputPathType | null | undefined;
    "verbose_flag": boolean;
    "help_flag": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "fsl_schurprod": fsl_schurprod_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "fsl_schurprod": fsl_schurprod_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fsl_schurprod(...)`.
 *
 * @interface
 */
interface FslSchurprodOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Generated matrix product output file
     */
    output_matrix_product: OutputPathType;
}


function fsl_schurprod_params(
    input_file: InputPathType,
    design_file: InputPathType,
    output_file: string,
    regression_flag: boolean = false,
    index: number | null = null,
    mask_file: InputPathType | null = null,
    verbose_flag: boolean = false,
    help_flag: boolean = false,
): FslSchurprodParameters {
    /**
     * Build parameters.
    
     * @param input_file Input file name (4D image file)
     * @param design_file ASCII text matrix of time series to be correlated
     * @param output_file Output file base name
     * @param regression_flag Use regression rather than correlation
     * @param index Index of column in the design to be used for matrix product calculation
     * @param mask_file Mask image file name
     * @param verbose_flag Switch on diagnostic messages
     * @param help_flag Display this help text
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "fsl_schurprod" as const,
        "input_file": input_file,
        "design_file": design_file,
        "output_file": output_file,
        "regression_flag": regression_flag,
        "verbose_flag": verbose_flag,
        "help_flag": help_flag,
    };
    if (index !== null) {
        params["index"] = index;
    }
    if (mask_file !== null) {
        params["mask_file"] = mask_file;
    }
    return params;
}


function fsl_schurprod_cargs(
    params: FslSchurprodParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("fsl_schurprod");
    cargs.push(
        "-i",
        execution.inputFile((params["input_file"] ?? null))
    );
    cargs.push(
        "-d",
        execution.inputFile((params["design_file"] ?? null))
    );
    cargs.push(
        "-o",
        (params["output_file"] ?? null)
    );
    if ((params["regression_flag"] ?? null)) {
        cargs.push("-r");
    }
    if ((params["index"] ?? null) !== null) {
        cargs.push(
            "-i",
            String((params["index"] ?? null))
        );
    }
    if ((params["mask_file"] ?? null) !== null) {
        cargs.push(
            "-m",
            execution.inputFile((params["mask_file"] ?? null))
        );
    }
    if ((params["verbose_flag"] ?? null)) {
        cargs.push("-v");
    }
    if ((params["help_flag"] ?? null)) {
        cargs.push("-h");
    }
    return cargs;
}


function fsl_schurprod_outputs(
    params: FslSchurprodParameters,
    execution: Execution,
): FslSchurprodOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: FslSchurprodOutputs = {
        root: execution.outputFile("."),
        output_matrix_product: execution.outputFile([(params["output_file"] ?? null), ".nii.gz"].join('')),
    };
    return ret;
}


function fsl_schurprod_execute(
    params: FslSchurprodParameters,
    execution: Execution,
): FslSchurprodOutputs {
    /**
     * Generates element-wise matrix products or product of matrices against vectors from 4D data.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `FslSchurprodOutputs`).
     */
    params = execution.params(params)
    const cargs = fsl_schurprod_cargs(params, execution)
    const ret = fsl_schurprod_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function fsl_schurprod(
    input_file: InputPathType,
    design_file: InputPathType,
    output_file: string,
    regression_flag: boolean = false,
    index: number | null = null,
    mask_file: InputPathType | null = null,
    verbose_flag: boolean = false,
    help_flag: boolean = false,
    runner: Runner | null = null,
): FslSchurprodOutputs {
    /**
     * Generates element-wise matrix products or product of matrices against vectors from 4D data.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param input_file Input file name (4D image file)
     * @param design_file ASCII text matrix of time series to be correlated
     * @param output_file Output file base name
     * @param regression_flag Use regression rather than correlation
     * @param index Index of column in the design to be used for matrix product calculation
     * @param mask_file Mask image file name
     * @param verbose_flag Switch on diagnostic messages
     * @param help_flag Display this help text
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `FslSchurprodOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FSL_SCHURPROD_METADATA);
    const params = fsl_schurprod_params(input_file, design_file, output_file, regression_flag, index, mask_file, verbose_flag, help_flag)
    return fsl_schurprod_execute(params, execution);
}


export {
      FSL_SCHURPROD_METADATA,
      FslSchurprodOutputs,
      FslSchurprodParameters,
      fsl_schurprod,
      fsl_schurprod_params,
};
