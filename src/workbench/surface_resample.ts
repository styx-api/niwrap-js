// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURFACE_RESAMPLE_METADATA: Metadata = {
    id: "45889f352801600ebb433c32da51dd8e365ecf27.boutiques",
    name: "surface-resample",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface SurfaceResampleAreaSurfsParameters {
    "@type": "workbench.surface-resample.area_surfs";
    "current_area": InputPathType;
    "new_area": InputPathType;
}


interface SurfaceResampleAreaMetricsParameters {
    "@type": "workbench.surface-resample.area_metrics";
    "current_area": InputPathType;
    "new_area": InputPathType;
}


interface SurfaceResampleParameters {
    "@type": "workbench.surface-resample";
    "surface_in": InputPathType;
    "current_sphere": InputPathType;
    "new_sphere": InputPathType;
    "method": string;
    "surface_out": string;
    "area_surfs"?: SurfaceResampleAreaSurfsParameters | null | undefined;
    "area_metrics"?: SurfaceResampleAreaMetricsParameters | null | undefined;
    "opt_bypass_sphere_check": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.surface-resample": surface_resample_cargs,
        "workbench.surface-resample.area_surfs": surface_resample_area_surfs_cargs,
        "workbench.surface-resample.area_metrics": surface_resample_area_metrics_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.surface-resample": surface_resample_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param current_area a relevant surface with <current-sphere> mesh
 * @param new_area a relevant surface with <new-sphere> mesh
 *
 * @returns Parameter dictionary
 */
function surface_resample_area_surfs_params(
    current_area: InputPathType,
    new_area: InputPathType,
): SurfaceResampleAreaSurfsParameters {
    const params = {
        "@type": "workbench.surface-resample.area_surfs" as const,
        "current_area": current_area,
        "new_area": new_area,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function surface_resample_area_surfs_cargs(
    params: SurfaceResampleAreaSurfsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-area-surfs");
    cargs.push(execution.inputFile((params["current_area"] ?? null)));
    cargs.push(execution.inputFile((params["new_area"] ?? null)));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param current_area a metric file with vertex areas for <current-sphere> mesh
 * @param new_area a metric file with vertex areas for <new-sphere> mesh
 *
 * @returns Parameter dictionary
 */
function surface_resample_area_metrics_params(
    current_area: InputPathType,
    new_area: InputPathType,
): SurfaceResampleAreaMetricsParameters {
    const params = {
        "@type": "workbench.surface-resample.area_metrics" as const,
        "current_area": current_area,
        "new_area": new_area,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function surface_resample_area_metrics_cargs(
    params: SurfaceResampleAreaMetricsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-area-metrics");
    cargs.push(execution.inputFile((params["current_area"] ?? null)));
    cargs.push(execution.inputFile((params["new_area"] ?? null)));
    return cargs;
}


/**
 * Output object returned when calling `surface_resample(...)`.
 *
 * @interface
 */
interface SurfaceResampleOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output surface file
     */
    surface_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param surface_in the surface file to resample
 * @param current_sphere a sphere surface with the mesh that the input surface is currently on
 * @param new_sphere a sphere surface that is in register with <current-sphere> and has the desired output mesh
 * @param method the method name
 * @param surface_out the output surface file
 * @param area_surfs specify surfaces to do vertex area correction based on
 * @param area_metrics specify vertex area metrics to do area correction based on
 * @param opt_bypass_sphere_check ADVANCED: allow the current and new 'spheres' to have arbitrary shape as long as they follow the same contour
 *
 * @returns Parameter dictionary
 */
function surface_resample_params(
    surface_in: InputPathType,
    current_sphere: InputPathType,
    new_sphere: InputPathType,
    method: string,
    surface_out: string,
    area_surfs: SurfaceResampleAreaSurfsParameters | null = null,
    area_metrics: SurfaceResampleAreaMetricsParameters | null = null,
    opt_bypass_sphere_check: boolean = false,
): SurfaceResampleParameters {
    const params = {
        "@type": "workbench.surface-resample" as const,
        "surface_in": surface_in,
        "current_sphere": current_sphere,
        "new_sphere": new_sphere,
        "method": method,
        "surface_out": surface_out,
        "opt_bypass_sphere_check": opt_bypass_sphere_check,
    };
    if (area_surfs !== null) {
        params["area_surfs"] = area_surfs;
    }
    if (area_metrics !== null) {
        params["area_metrics"] = area_metrics;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function surface_resample_cargs(
    params: SurfaceResampleParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-surface-resample");
    cargs.push(execution.inputFile((params["surface_in"] ?? null)));
    cargs.push(execution.inputFile((params["current_sphere"] ?? null)));
    cargs.push(execution.inputFile((params["new_sphere"] ?? null)));
    cargs.push((params["method"] ?? null));
    cargs.push((params["surface_out"] ?? null));
    if ((params["area_surfs"] ?? null) !== null) {
        cargs.push(...dynCargs((params["area_surfs"] ?? null)["@type"])((params["area_surfs"] ?? null), execution));
    }
    if ((params["area_metrics"] ?? null) !== null) {
        cargs.push(...dynCargs((params["area_metrics"] ?? null)["@type"])((params["area_metrics"] ?? null), execution));
    }
    if ((params["opt_bypass_sphere_check"] ?? null)) {
        cargs.push("-bypass-sphere-check");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function surface_resample_outputs(
    params: SurfaceResampleParameters,
    execution: Execution,
): SurfaceResampleOutputs {
    const ret: SurfaceResampleOutputs = {
        root: execution.outputFile("."),
        surface_out: execution.outputFile([(params["surface_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * surface-resample
 *
 * Resample a surface to a different mesh.
 *
 * Resamples a surface file, given two spherical surfaces that are in register.  If ADAP_BARY_AREA is used, exactly one of -area-surfs or -area-metrics must be specified.  This method is not generally recommended for surface resampling, but is provided for completeness.
 *
 * The BARYCENTRIC method is generally recommended for anatomical surfaces, in order to minimize smoothing.
 *
 * For cut surfaces (including flatmaps), use -surface-cut-resample.
 *
 * Instead of resampling a spherical surface, the -surface-sphere-project-unproject command is recommended.
 *
 * The <method> argument must be one of the following:
 *
 * ADAP_BARY_AREA
 * BARYCENTRIC
 * .
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfaceResampleOutputs`).
 */
function surface_resample_execute(
    params: SurfaceResampleParameters,
    runner: Runner | null = null,
): SurfaceResampleOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURFACE_RESAMPLE_METADATA);
    params = execution.params(params)
    const cargs = surface_resample_cargs(params, execution)
    const ret = surface_resample_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * surface-resample
 *
 * Resample a surface to a different mesh.
 *
 * Resamples a surface file, given two spherical surfaces that are in register.  If ADAP_BARY_AREA is used, exactly one of -area-surfs or -area-metrics must be specified.  This method is not generally recommended for surface resampling, but is provided for completeness.
 *
 * The BARYCENTRIC method is generally recommended for anatomical surfaces, in order to minimize smoothing.
 *
 * For cut surfaces (including flatmaps), use -surface-cut-resample.
 *
 * Instead of resampling a spherical surface, the -surface-sphere-project-unproject command is recommended.
 *
 * The <method> argument must be one of the following:
 *
 * ADAP_BARY_AREA
 * BARYCENTRIC
 * .
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param surface_in the surface file to resample
 * @param current_sphere a sphere surface with the mesh that the input surface is currently on
 * @param new_sphere a sphere surface that is in register with <current-sphere> and has the desired output mesh
 * @param method the method name
 * @param surface_out the output surface file
 * @param area_surfs specify surfaces to do vertex area correction based on
 * @param area_metrics specify vertex area metrics to do area correction based on
 * @param opt_bypass_sphere_check ADVANCED: allow the current and new 'spheres' to have arbitrary shape as long as they follow the same contour
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfaceResampleOutputs`).
 */
function surface_resample(
    surface_in: InputPathType,
    current_sphere: InputPathType,
    new_sphere: InputPathType,
    method: string,
    surface_out: string,
    area_surfs: SurfaceResampleAreaSurfsParameters | null = null,
    area_metrics: SurfaceResampleAreaMetricsParameters | null = null,
    opt_bypass_sphere_check: boolean = false,
    runner: Runner | null = null,
): SurfaceResampleOutputs {
    const params = surface_resample_params(surface_in, current_sphere, new_sphere, method, surface_out, area_surfs, area_metrics, opt_bypass_sphere_check)
    return surface_resample_execute(params, runner);
}


export {
      SURFACE_RESAMPLE_METADATA,
      SurfaceResampleAreaMetricsParameters,
      SurfaceResampleAreaSurfsParameters,
      SurfaceResampleOutputs,
      SurfaceResampleParameters,
      surface_resample,
      surface_resample_area_metrics_params,
      surface_resample_area_surfs_params,
      surface_resample_execute,
      surface_resample_params,
};
