// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_SURF2VOL_METADATA: Metadata = {
    id: "4c244cf6ff0206671a38dcbf4a6beb4701b3869c.boutiques",
    name: "mri_surf2vol",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriSurf2volParameters {
    "@type": "freesurfer.mri_surf2vol";
    "surface_overlay"?: Array<string> | null | undefined;
    "ltafile"?: InputPathType | null | undefined;
    "outfile": string;
    "subject"?: string | null | undefined;
    "ribbonfile"?: InputPathType | null | undefined;
    "merge_volume"?: InputPathType | null | undefined;
    "surface_values"?: string | null | undefined;
    "mkmask": boolean;
    "hemi"?: string | null | undefined;
    "surfname"?: string | null | undefined;
    "projfrac"?: number | null | undefined;
    "fill_ribbon": boolean;
    "fill_projfrac"?: string | null | undefined;
    "reg_volume"?: InputPathType | null | undefined;
    "identity"?: string | null | undefined;
    "template_volume"?: InputPathType | null | undefined;
    "fstal_res"?: string | null | undefined;
    "vtxvol"?: InputPathType | null | undefined;
    "flat2mri"?: string | null | undefined;
    "sphpvf"?: string | null | undefined;
    "mask_to_cortex": boolean;
    "mask_to_label"?: InputPathType | null | undefined;
    "surface_mask"?: InputPathType | null | undefined;
    "add_const"?: number | null | undefined;
    "copy_ctab": boolean;
    "subjects_dir"?: string | null | undefined;
    "gdiagno"?: number | null | undefined;
    "version": boolean;
    "help": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_surf2vol": mri_surf2vol_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_surf2vol": mri_surf2vol_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_surf2vol(...)`.
 *
 * @interface
 */
interface MriSurf2volOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output volume with resampled surface
     */
    output_volume: OutputPathType;
    /**
     * Vertex map volume indicating mapped voxels
     */
    vertex_volume: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param outfile Path to output volume
 * @param surface_overlay Specify path to a surface and matching overlay
 * @param ltafile Specify registration file
 * @param subject Specify subject name
 * @param ribbonfile Specify path to ribbon file
 * @param merge_volume Merge with this volume, replacing surface values
 * @param surface_values Source of surface values, optionally with format
 * @param mkmask Create a binary mask instead of loading surfval
 * @param hemi Hemisphere for the surface values (lh or rh)
 * @param surfname Surface name in surf directory (default is white)
 * @param projfrac Fraction for thickness projection
 * @param fill_ribbon Fill the entire ribbon
 * @param fill_projfrac Fill ribbon by iterating projfrac
 * @param reg_volume Volume registration file
 * @param identity Use identity matrix for volume registration (requires subject name)
 * @param template_volume Template volume for output configuration
 * @param fstal_res Use fs Talairach registration with specified resolution
 * @param vtxvol Vertex map volume path
 * @param flat2mri Options for flat surface to MRI mapping
 * @param sphpvf Spherical point to voxel function options
 * @param mask_to_cortex Mask to cortex label
 * @param mask_to_label Mask to specified label file
 * @param surface_mask Mask to specified surface mask
 * @param add_const Add constant value to each non-zero output voxel
 * @param copy_ctab Copy color table header
 * @param subjects_dir FreeSurfer subjects directory
 * @param gdiagno Set diagnostic level
 * @param version Print version and exit
 * @param help Display help information
 *
 * @returns Parameter dictionary
 */
function mri_surf2vol_params(
    outfile: string,
    surface_overlay: Array<string> | null = null,
    ltafile: InputPathType | null = null,
    subject: string | null = null,
    ribbonfile: InputPathType | null = null,
    merge_volume: InputPathType | null = null,
    surface_values: string | null = null,
    mkmask: boolean = false,
    hemi: string | null = null,
    surfname: string | null = null,
    projfrac: number | null = null,
    fill_ribbon: boolean = false,
    fill_projfrac: string | null = null,
    reg_volume: InputPathType | null = null,
    identity: string | null = null,
    template_volume: InputPathType | null = null,
    fstal_res: string | null = null,
    vtxvol: InputPathType | null = null,
    flat2mri: string | null = null,
    sphpvf: string | null = null,
    mask_to_cortex: boolean = false,
    mask_to_label: InputPathType | null = null,
    surface_mask: InputPathType | null = null,
    add_const: number | null = null,
    copy_ctab: boolean = false,
    subjects_dir: string | null = null,
    gdiagno: number | null = null,
    version: boolean = false,
    help: boolean = false,
): MriSurf2volParameters {
    const params = {
        "@type": "freesurfer.mri_surf2vol" as const,
        "outfile": outfile,
        "mkmask": mkmask,
        "fill_ribbon": fill_ribbon,
        "mask_to_cortex": mask_to_cortex,
        "copy_ctab": copy_ctab,
        "version": version,
        "help": help,
    };
    if (surface_overlay !== null) {
        params["surface_overlay"] = surface_overlay;
    }
    if (ltafile !== null) {
        params["ltafile"] = ltafile;
    }
    if (subject !== null) {
        params["subject"] = subject;
    }
    if (ribbonfile !== null) {
        params["ribbonfile"] = ribbonfile;
    }
    if (merge_volume !== null) {
        params["merge_volume"] = merge_volume;
    }
    if (surface_values !== null) {
        params["surface_values"] = surface_values;
    }
    if (hemi !== null) {
        params["hemi"] = hemi;
    }
    if (surfname !== null) {
        params["surfname"] = surfname;
    }
    if (projfrac !== null) {
        params["projfrac"] = projfrac;
    }
    if (fill_projfrac !== null) {
        params["fill_projfrac"] = fill_projfrac;
    }
    if (reg_volume !== null) {
        params["reg_volume"] = reg_volume;
    }
    if (identity !== null) {
        params["identity"] = identity;
    }
    if (template_volume !== null) {
        params["template_volume"] = template_volume;
    }
    if (fstal_res !== null) {
        params["fstal_res"] = fstal_res;
    }
    if (vtxvol !== null) {
        params["vtxvol"] = vtxvol;
    }
    if (flat2mri !== null) {
        params["flat2mri"] = flat2mri;
    }
    if (sphpvf !== null) {
        params["sphpvf"] = sphpvf;
    }
    if (mask_to_label !== null) {
        params["mask_to_label"] = mask_to_label;
    }
    if (surface_mask !== null) {
        params["surface_mask"] = surface_mask;
    }
    if (add_const !== null) {
        params["add_const"] = add_const;
    }
    if (subjects_dir !== null) {
        params["subjects_dir"] = subjects_dir;
    }
    if (gdiagno !== null) {
        params["gdiagno"] = gdiagno;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_surf2vol_cargs(
    params: MriSurf2volParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_surf2vol");
    if ((params["surface_overlay"] ?? null) !== null) {
        cargs.push(
            "--so",
            ...(params["surface_overlay"] ?? null)
        );
    }
    if ((params["ltafile"] ?? null) !== null) {
        cargs.push(
            "--lta",
            execution.inputFile((params["ltafile"] ?? null))
        );
    }
    cargs.push(
        "--o",
        (params["outfile"] ?? null)
    );
    if ((params["subject"] ?? null) !== null) {
        cargs.push(
            "--subject",
            (params["subject"] ?? null)
        );
    }
    if ((params["ribbonfile"] ?? null) !== null) {
        cargs.push(
            "--ribbon",
            execution.inputFile((params["ribbonfile"] ?? null))
        );
    }
    if ((params["merge_volume"] ?? null) !== null) {
        cargs.push(
            "--merge",
            execution.inputFile((params["merge_volume"] ?? null))
        );
    }
    if ((params["surface_values"] ?? null) !== null) {
        cargs.push(
            "--surfval",
            (params["surface_values"] ?? null)
        );
    }
    if ((params["mkmask"] ?? null)) {
        cargs.push("--mkmask");
    }
    if ((params["hemi"] ?? null) !== null) {
        cargs.push(
            "--hemi",
            (params["hemi"] ?? null)
        );
    }
    if ((params["surfname"] ?? null) !== null) {
        cargs.push(
            "--surf",
            (params["surfname"] ?? null)
        );
    }
    if ((params["projfrac"] ?? null) !== null) {
        cargs.push(
            "--projfrac",
            String((params["projfrac"] ?? null))
        );
    }
    if ((params["fill_ribbon"] ?? null)) {
        cargs.push("--fillribbon");
    }
    if ((params["fill_projfrac"] ?? null) !== null) {
        cargs.push(
            "--fill-projfrac",
            (params["fill_projfrac"] ?? null)
        );
    }
    if ((params["reg_volume"] ?? null) !== null) {
        cargs.push(
            "--reg",
            execution.inputFile((params["reg_volume"] ?? null))
        );
    }
    if ((params["identity"] ?? null) !== null) {
        cargs.push(
            "--identity",
            (params["identity"] ?? null)
        );
    }
    if ((params["template_volume"] ?? null) !== null) {
        cargs.push(
            "--template",
            execution.inputFile((params["template_volume"] ?? null))
        );
    }
    if ((params["fstal_res"] ?? null) !== null) {
        cargs.push(
            "--fstal",
            (params["fstal_res"] ?? null)
        );
    }
    if ((params["vtxvol"] ?? null) !== null) {
        cargs.push(
            "--vtxvol",
            execution.inputFile((params["vtxvol"] ?? null))
        );
    }
    if ((params["flat2mri"] ?? null) !== null) {
        cargs.push(
            "--flat2mri",
            (params["flat2mri"] ?? null)
        );
    }
    if ((params["sphpvf"] ?? null) !== null) {
        cargs.push(
            "--sphpvf",
            (params["sphpvf"] ?? null)
        );
    }
    if ((params["mask_to_cortex"] ?? null)) {
        cargs.push("--mask-to-cortex");
    }
    if ((params["mask_to_label"] ?? null) !== null) {
        cargs.push(
            "--mask-to-label",
            execution.inputFile((params["mask_to_label"] ?? null))
        );
    }
    if ((params["surface_mask"] ?? null) !== null) {
        cargs.push(
            "--mask",
            execution.inputFile((params["surface_mask"] ?? null))
        );
    }
    if ((params["add_const"] ?? null) !== null) {
        cargs.push(
            "--add",
            String((params["add_const"] ?? null))
        );
    }
    if ((params["copy_ctab"] ?? null)) {
        cargs.push("--copy-ctab");
    }
    if ((params["subjects_dir"] ?? null) !== null) {
        cargs.push(
            "--sd",
            (params["subjects_dir"] ?? null)
        );
    }
    if ((params["gdiagno"] ?? null) !== null) {
        cargs.push(
            "--gdiagno",
            String((params["gdiagno"] ?? null))
        );
    }
    if ((params["version"] ?? null)) {
        cargs.push("--version");
    }
    if ((params["help"] ?? null)) {
        cargs.push("--help");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_surf2vol_outputs(
    params: MriSurf2volParameters,
    execution: Execution,
): MriSurf2volOutputs {
    const ret: MriSurf2volOutputs = {
        root: execution.outputFile("."),
        output_volume: execution.outputFile([(params["outfile"] ?? null)].join('')),
        vertex_volume: ((params["vtxvol"] ?? null) !== null) ? execution.outputFile([path.basename((params["vtxvol"] ?? null))].join('')) : null,
    };
    return ret;
}


/**
 * mri_surf2vol
 *
 * Resamples a surface into a volume using one of two methods.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriSurf2volOutputs`).
 */
function mri_surf2vol_execute(
    params: MriSurf2volParameters,
    runner: Runner | null = null,
): MriSurf2volOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_SURF2VOL_METADATA);
    params = execution.params(params)
    const cargs = mri_surf2vol_cargs(params, execution)
    const ret = mri_surf2vol_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_surf2vol
 *
 * Resamples a surface into a volume using one of two methods.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param outfile Path to output volume
 * @param surface_overlay Specify path to a surface and matching overlay
 * @param ltafile Specify registration file
 * @param subject Specify subject name
 * @param ribbonfile Specify path to ribbon file
 * @param merge_volume Merge with this volume, replacing surface values
 * @param surface_values Source of surface values, optionally with format
 * @param mkmask Create a binary mask instead of loading surfval
 * @param hemi Hemisphere for the surface values (lh or rh)
 * @param surfname Surface name in surf directory (default is white)
 * @param projfrac Fraction for thickness projection
 * @param fill_ribbon Fill the entire ribbon
 * @param fill_projfrac Fill ribbon by iterating projfrac
 * @param reg_volume Volume registration file
 * @param identity Use identity matrix for volume registration (requires subject name)
 * @param template_volume Template volume for output configuration
 * @param fstal_res Use fs Talairach registration with specified resolution
 * @param vtxvol Vertex map volume path
 * @param flat2mri Options for flat surface to MRI mapping
 * @param sphpvf Spherical point to voxel function options
 * @param mask_to_cortex Mask to cortex label
 * @param mask_to_label Mask to specified label file
 * @param surface_mask Mask to specified surface mask
 * @param add_const Add constant value to each non-zero output voxel
 * @param copy_ctab Copy color table header
 * @param subjects_dir FreeSurfer subjects directory
 * @param gdiagno Set diagnostic level
 * @param version Print version and exit
 * @param help Display help information
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriSurf2volOutputs`).
 */
function mri_surf2vol(
    outfile: string,
    surface_overlay: Array<string> | null = null,
    ltafile: InputPathType | null = null,
    subject: string | null = null,
    ribbonfile: InputPathType | null = null,
    merge_volume: InputPathType | null = null,
    surface_values: string | null = null,
    mkmask: boolean = false,
    hemi: string | null = null,
    surfname: string | null = null,
    projfrac: number | null = null,
    fill_ribbon: boolean = false,
    fill_projfrac: string | null = null,
    reg_volume: InputPathType | null = null,
    identity: string | null = null,
    template_volume: InputPathType | null = null,
    fstal_res: string | null = null,
    vtxvol: InputPathType | null = null,
    flat2mri: string | null = null,
    sphpvf: string | null = null,
    mask_to_cortex: boolean = false,
    mask_to_label: InputPathType | null = null,
    surface_mask: InputPathType | null = null,
    add_const: number | null = null,
    copy_ctab: boolean = false,
    subjects_dir: string | null = null,
    gdiagno: number | null = null,
    version: boolean = false,
    help: boolean = false,
    runner: Runner | null = null,
): MriSurf2volOutputs {
    const params = mri_surf2vol_params(outfile, surface_overlay, ltafile, subject, ribbonfile, merge_volume, surface_values, mkmask, hemi, surfname, projfrac, fill_ribbon, fill_projfrac, reg_volume, identity, template_volume, fstal_res, vtxvol, flat2mri, sphpvf, mask_to_cortex, mask_to_label, surface_mask, add_const, copy_ctab, subjects_dir, gdiagno, version, help)
    return mri_surf2vol_execute(params, runner);
}


export {
      MRI_SURF2VOL_METADATA,
      MriSurf2volOutputs,
      MriSurf2volParameters,
      mri_surf2vol,
      mri_surf2vol_execute,
      mri_surf2vol_params,
};
