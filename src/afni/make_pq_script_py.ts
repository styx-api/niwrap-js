// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MAKE_PQ_SCRIPT_PY_METADATA: Metadata = {
    id: "00368a745377b383a6791b40eb2356c9208093f7.boutiques",
    name: "make_pq_script.py",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface MakePqScriptPyParameters {
    "@type"?: "afni/make_pq_script.py";
    "dataset": InputPathType;
    "brick_index": number;
    "mask": InputPathType;
    "out_script": string;
}
type MakePqScriptPyParametersTagged = Required<Pick<MakePqScriptPyParameters, '@type'>> & MakePqScriptPyParameters;


/**
 * Output object returned when calling `MakePqScriptPyParameters(...)`.
 *
 * @interface
 */
interface MakePqScriptPyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Generated output script
     */
    script: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param dataset Input dataset (no sub-brick selectors)
 * @param brick_index Volume sub-brick for specific t-stat
 * @param mask Mask volume dataset
 * @param out_script Name for output script to write
 *
 * @returns Parameter dictionary
 */
function make_pq_script_py_params(
    dataset: InputPathType,
    brick_index: number,
    mask: InputPathType,
    out_script: string,
): MakePqScriptPyParametersTagged {
    const params = {
        "@type": "afni/make_pq_script.py" as const,
        "dataset": dataset,
        "brick_index": brick_index,
        "mask": mask,
        "out_script": out_script,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function make_pq_script_py_cargs(
    params: MakePqScriptPyParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("make_pq_script.py");
    cargs.push(execution.inputFile((params["dataset"] ?? null)));
    cargs.push(String((params["brick_index"] ?? null)));
    cargs.push(execution.inputFile((params["mask"] ?? null)));
    cargs.push((params["out_script"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function make_pq_script_py_outputs(
    params: MakePqScriptPyParameters,
    execution: Execution,
): MakePqScriptPyOutputs {
    const ret: MakePqScriptPyOutputs = {
        root: execution.outputFile("."),
        script: execution.outputFile([(params["out_script"] ?? null)].join('')),
    };
    return ret;
}


/**
 * make_pq_script.py
 *
 * Creates a script to compute p-value and q-value curves.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MakePqScriptPyOutputs`).
 */
function make_pq_script_py_execute(
    params: MakePqScriptPyParameters,
    runner: Runner | null = null,
): MakePqScriptPyOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MAKE_PQ_SCRIPT_PY_METADATA);
    params = execution.params(params)
    const cargs = make_pq_script_py_cargs(params, execution)
    const ret = make_pq_script_py_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * make_pq_script.py
 *
 * Creates a script to compute p-value and q-value curves.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param dataset Input dataset (no sub-brick selectors)
 * @param brick_index Volume sub-brick for specific t-stat
 * @param mask Mask volume dataset
 * @param out_script Name for output script to write
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MakePqScriptPyOutputs`).
 */
function make_pq_script_py(
    dataset: InputPathType,
    brick_index: number,
    mask: InputPathType,
    out_script: string,
    runner: Runner | null = null,
): MakePqScriptPyOutputs {
    const params = make_pq_script_py_params(dataset, brick_index, mask, out_script)
    return make_pq_script_py_execute(params, runner);
}


export {
      MAKE_PQ_SCRIPT_PY_METADATA,
      MakePqScriptPyOutputs,
      make_pq_script_py,
      make_pq_script_py_execute,
      make_pq_script_py_params,
};
