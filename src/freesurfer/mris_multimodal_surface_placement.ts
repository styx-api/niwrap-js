// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_MULTIMODAL_SURFACE_PLACEMENT_METADATA: Metadata = {
    id: "92026e98ad5a95dddbebbf0c2d425303698ac22a.boutiques",
    name: "mris_multimodal_surface_placement",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisMultimodalSurfacePlacementParameters {
    "@type": "freesurfer.mris_multimodal_surface_placement";
    "input_surface": InputPathType;
    "output_surface": InputPathType;
    "sphere_surface": InputPathType;
    "normals": string;
    "values": string;
    "debug_vertex"?: number | null | undefined;
    "step_size": number;
    "number_of_steps": number;
    "gradient_sigma": number;
    "aseg_aparc": InputPathType;
    "white_surface": InputPathType;
    "prob_of_csf": number;
    "t1_image": InputPathType;
    "t2_image": InputPathType;
    "flair_image": InputPathType;
    "min_max": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mris_multimodal_surface_placement": mris_multimodal_surface_placement_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_multimodal_surface_placement(...)`.
 *
 * @interface
 */
interface MrisMultimodalSurfacePlacementOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_surface Input surface file
 * @param output_surface Output surface file
 * @param sphere_surface Sphere surface file
 * @param normals Normals file in VTK format
 * @param values Values file in VTK format
 * @param step_size Step size
 * @param number_of_steps Number of steps
 * @param gradient_sigma Gradient sigma value
 * @param aseg_aparc ASEG APARC image file
 * @param white_surface White surface file
 * @param prob_of_csf Probability of CSF
 * @param t1_image T1-weighted image file
 * @param t2_image T2-weighted image file
 * @param flair_image FLAIR image file
 * @param debug_vertex Debug vertex index
 * @param min_max Toggle between min or max operation
 *
 * @returns Parameter dictionary
 */
function mris_multimodal_surface_placement_params(
    input_surface: InputPathType,
    output_surface: InputPathType,
    sphere_surface: InputPathType,
    normals: string,
    values: string,
    step_size: number,
    number_of_steps: number,
    gradient_sigma: number,
    aseg_aparc: InputPathType,
    white_surface: InputPathType,
    prob_of_csf: number,
    t1_image: InputPathType,
    t2_image: InputPathType,
    flair_image: InputPathType,
    debug_vertex: number | null = null,
    min_max: boolean = false,
): MrisMultimodalSurfacePlacementParameters {
    const params = {
        "@type": "freesurfer.mris_multimodal_surface_placement" as const,
        "input_surface": input_surface,
        "output_surface": output_surface,
        "sphere_surface": sphere_surface,
        "normals": normals,
        "values": values,
        "step_size": step_size,
        "number_of_steps": number_of_steps,
        "gradient_sigma": gradient_sigma,
        "aseg_aparc": aseg_aparc,
        "white_surface": white_surface,
        "prob_of_csf": prob_of_csf,
        "t1_image": t1_image,
        "t2_image": t2_image,
        "flair_image": flair_image,
        "min_max": min_max,
    };
    if (debug_vertex !== null) {
        params["debug_vertex"] = debug_vertex;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_multimodal_surface_placement_cargs(
    params: MrisMultimodalSurfacePlacementParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_multimodal_surface_placement");
    cargs.push(
        "-i",
        execution.inputFile((params["input_surface"] ?? null))
    );
    cargs.push(
        "-o",
        execution.inputFile((params["output_surface"] ?? null))
    );
    cargs.push(
        "-b",
        execution.inputFile((params["sphere_surface"] ?? null))
    );
    cargs.push(
        "-n",
        (params["normals"] ?? null)
    );
    cargs.push(
        "-v",
        (params["values"] ?? null)
    );
    if ((params["debug_vertex"] ?? null) !== null) {
        cargs.push(
            "-d",
            String((params["debug_vertex"] ?? null))
        );
    }
    cargs.push(
        "-s",
        String((params["step_size"] ?? null))
    );
    cargs.push(
        "-k",
        String((params["number_of_steps"] ?? null))
    );
    cargs.push(
        "-g",
        String((params["gradient_sigma"] ?? null))
    );
    cargs.push(
        "-a",
        execution.inputFile((params["aseg_aparc"] ?? null))
    );
    cargs.push(
        "-w",
        execution.inputFile((params["white_surface"] ?? null))
    );
    cargs.push(
        "-p",
        String((params["prob_of_csf"] ?? null))
    );
    cargs.push(
        "-t1",
        execution.inputFile((params["t1_image"] ?? null))
    );
    cargs.push(
        "-t2",
        execution.inputFile((params["t2_image"] ?? null))
    );
    cargs.push(
        "-flair",
        execution.inputFile((params["flair_image"] ?? null))
    );
    if ((params["min_max"] ?? null)) {
        cargs.push("-min/max");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_multimodal_surface_placement_outputs(
    params: MrisMultimodalSurfacePlacementParameters,
    execution: Execution,
): MrisMultimodalSurfacePlacementOutputs {
    const ret: MrisMultimodalSurfacePlacementOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * FreeSurfer command for multimodal surface placement.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisMultimodalSurfacePlacementOutputs`).
 */
function mris_multimodal_surface_placement_execute(
    params: MrisMultimodalSurfacePlacementParameters,
    runner: Runner | null = null,
): MrisMultimodalSurfacePlacementOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_MULTIMODAL_SURFACE_PLACEMENT_METADATA);
    params = execution.params(params)
    const cargs = mris_multimodal_surface_placement_cargs(params, execution)
    const ret = mris_multimodal_surface_placement_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * FreeSurfer command for multimodal surface placement.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_surface Input surface file
 * @param output_surface Output surface file
 * @param sphere_surface Sphere surface file
 * @param normals Normals file in VTK format
 * @param values Values file in VTK format
 * @param step_size Step size
 * @param number_of_steps Number of steps
 * @param gradient_sigma Gradient sigma value
 * @param aseg_aparc ASEG APARC image file
 * @param white_surface White surface file
 * @param prob_of_csf Probability of CSF
 * @param t1_image T1-weighted image file
 * @param t2_image T2-weighted image file
 * @param flair_image FLAIR image file
 * @param debug_vertex Debug vertex index
 * @param min_max Toggle between min or max operation
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisMultimodalSurfacePlacementOutputs`).
 */
function mris_multimodal_surface_placement(
    input_surface: InputPathType,
    output_surface: InputPathType,
    sphere_surface: InputPathType,
    normals: string,
    values: string,
    step_size: number,
    number_of_steps: number,
    gradient_sigma: number,
    aseg_aparc: InputPathType,
    white_surface: InputPathType,
    prob_of_csf: number,
    t1_image: InputPathType,
    t2_image: InputPathType,
    flair_image: InputPathType,
    debug_vertex: number | null = null,
    min_max: boolean = false,
    runner: Runner | null = null,
): MrisMultimodalSurfacePlacementOutputs {
    const params = mris_multimodal_surface_placement_params(input_surface, output_surface, sphere_surface, normals, values, step_size, number_of_steps, gradient_sigma, aseg_aparc, white_surface, prob_of_csf, t1_image, t2_image, flair_image, debug_vertex, min_max)
    return mris_multimodal_surface_placement_execute(params, runner);
}


export {
      MRIS_MULTIMODAL_SURFACE_PLACEMENT_METADATA,
      MrisMultimodalSurfacePlacementOutputs,
      MrisMultimodalSurfacePlacementParameters,
      mris_multimodal_surface_placement,
      mris_multimodal_surface_placement_execute,
      mris_multimodal_surface_placement_params,
};
