// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const LABEL_GEOMETRY_MEASURES_METADATA: Metadata = {
    id: "d570e50748d9876bc47a760ba32c91d5c92cbc80.boutiques",
    name: "LabelGeometryMeasures",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface LabelGeometryMeasuresParameters {
    "@type": "ants.LabelGeometryMeasures";
    "image_dimension": number;
    "label_image": InputPathType;
    "intensity_image"?: string | null | undefined;
    "csv_file"?: InputPathType | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "ants.LabelGeometryMeasures": label_geometry_measures_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "ants.LabelGeometryMeasures": label_geometry_measures_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `label_geometry_measures(...)`.
 *
 * @interface
 */
interface LabelGeometryMeasuresOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The CSV file containing the geometry measures.
     */
    output_csv: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param image_dimension The dimensionality of the input images (e.g., 2 for 2D, 3 for 3D).
 * @param label_image The label image on which geometry measures are computed.
 * @param intensity_image An optional intensity image for computing intensity-weighted measures. Use "none" or "na" if not provided.
 * @param csv_file The output file where the geometry measures are written in CSV format.
 *
 * @returns Parameter dictionary
 */
function label_geometry_measures_params(
    image_dimension: number,
    label_image: InputPathType,
    intensity_image: string | null = null,
    csv_file: InputPathType | null = null,
): LabelGeometryMeasuresParameters {
    const params = {
        "@type": "ants.LabelGeometryMeasures" as const,
        "image_dimension": image_dimension,
        "label_image": label_image,
    };
    if (intensity_image !== null) {
        params["intensity_image"] = intensity_image;
    }
    if (csv_file !== null) {
        params["csv_file"] = csv_file;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function label_geometry_measures_cargs(
    params: LabelGeometryMeasuresParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("LabelGeometryMeasures");
    cargs.push(String((params["image_dimension"] ?? null)));
    cargs.push(execution.inputFile((params["label_image"] ?? null)));
    if ((params["intensity_image"] ?? null) !== null) {
        cargs.push((params["intensity_image"] ?? null));
    }
    if ((params["csv_file"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["csv_file"] ?? null)));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function label_geometry_measures_outputs(
    params: LabelGeometryMeasuresParameters,
    execution: Execution,
): LabelGeometryMeasuresOutputs {
    const ret: LabelGeometryMeasuresOutputs = {
        root: execution.outputFile("."),
        output_csv: ((params["csv_file"] ?? null) !== null) ? execution.outputFile([path.basename((params["csv_file"] ?? null))].join('')) : null,
    };
    return ret;
}


/**
 * This tool computes various geometry measures on a label image, optionally using an intensity image, and outputs the results to a CSV file.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `LabelGeometryMeasuresOutputs`).
 */
function label_geometry_measures_execute(
    params: LabelGeometryMeasuresParameters,
    execution: Execution,
): LabelGeometryMeasuresOutputs {
    params = execution.params(params)
    const cargs = label_geometry_measures_cargs(params, execution)
    const ret = label_geometry_measures_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * This tool computes various geometry measures on a label image, optionally using an intensity image, and outputs the results to a CSV file.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param image_dimension The dimensionality of the input images (e.g., 2 for 2D, 3 for 3D).
 * @param label_image The label image on which geometry measures are computed.
 * @param intensity_image An optional intensity image for computing intensity-weighted measures. Use "none" or "na" if not provided.
 * @param csv_file The output file where the geometry measures are written in CSV format.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `LabelGeometryMeasuresOutputs`).
 */
function label_geometry_measures(
    image_dimension: number,
    label_image: InputPathType,
    intensity_image: string | null = null,
    csv_file: InputPathType | null = null,
    runner: Runner | null = null,
): LabelGeometryMeasuresOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(LABEL_GEOMETRY_MEASURES_METADATA);
    const params = label_geometry_measures_params(image_dimension, label_image, intensity_image, csv_file)
    return label_geometry_measures_execute(params, execution);
}


export {
      LABEL_GEOMETRY_MEASURES_METADATA,
      LabelGeometryMeasuresOutputs,
      LabelGeometryMeasuresParameters,
      label_geometry_measures,
      label_geometry_measures_cargs,
      label_geometry_measures_execute,
      label_geometry_measures_outputs,
      label_geometry_measures_params,
};
