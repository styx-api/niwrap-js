// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const PAIRREG_METADATA: Metadata = {
    id: "1b9b8596ae0a3b92dba838a73505174c51bfebc8.boutiques",
    name: "pairreg",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface PairregParameters {
    "@type": "fsl.pairreg";
    "brain1": InputPathType;
    "brain2": InputPathType;
    "skull1": InputPathType;
    "skull2": InputPathType;
    "outputmatrix": InputPathType;
    "extra_flirt_args"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.pairreg": pairreg_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.pairreg": pairreg_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `pairreg(...)`.
 *
 * @interface
 */
interface PairregOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Pairwise registration output transformation matrix file
     */
    output_matrix: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param brain1 Brain image 1 (used as -ref internally)
 * @param brain2 Brain image 2
 * @param skull1 Skull image 1 (used as -ref internally)
 * @param skull2 Skull image 2
 * @param outputmatrix Output transformation matrix file
 * @param extra_flirt_args Extra arguments to pass to flirt
 *
 * @returns Parameter dictionary
 */
function pairreg_params(
    brain1: InputPathType,
    brain2: InputPathType,
    skull1: InputPathType,
    skull2: InputPathType,
    outputmatrix: InputPathType,
    extra_flirt_args: string | null = null,
): PairregParameters {
    const params = {
        "@type": "fsl.pairreg" as const,
        "brain1": brain1,
        "brain2": brain2,
        "skull1": skull1,
        "skull2": skull2,
        "outputmatrix": outputmatrix,
    };
    if (extra_flirt_args !== null) {
        params["extra_flirt_args"] = extra_flirt_args;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function pairreg_cargs(
    params: PairregParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("pairreg");
    cargs.push(execution.inputFile((params["brain1"] ?? null)));
    cargs.push(execution.inputFile((params["brain2"] ?? null)));
    cargs.push(execution.inputFile((params["skull1"] ?? null)));
    cargs.push(execution.inputFile((params["skull2"] ?? null)));
    cargs.push(execution.inputFile((params["outputmatrix"] ?? null)));
    if ((params["extra_flirt_args"] ?? null) !== null) {
        cargs.push((params["extra_flirt_args"] ?? null));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function pairreg_outputs(
    params: PairregParameters,
    execution: Execution,
): PairregOutputs {
    const ret: PairregOutputs = {
        root: execution.outputFile("."),
        output_matrix: execution.outputFile([path.basename((params["outputmatrix"] ?? null))].join('')),
    };
    return ret;
}


/**
 * Pairwise registration tool.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `PairregOutputs`).
 */
function pairreg_execute(
    params: PairregParameters,
    runner: Runner | null = null,
): PairregOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(PAIRREG_METADATA);
    params = execution.params(params)
    const cargs = pairreg_cargs(params, execution)
    const ret = pairreg_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Pairwise registration tool.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param brain1 Brain image 1 (used as -ref internally)
 * @param brain2 Brain image 2
 * @param skull1 Skull image 1 (used as -ref internally)
 * @param skull2 Skull image 2
 * @param outputmatrix Output transformation matrix file
 * @param extra_flirt_args Extra arguments to pass to flirt
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `PairregOutputs`).
 */
function pairreg(
    brain1: InputPathType,
    brain2: InputPathType,
    skull1: InputPathType,
    skull2: InputPathType,
    outputmatrix: InputPathType,
    extra_flirt_args: string | null = null,
    runner: Runner | null = null,
): PairregOutputs {
    const params = pairreg_params(brain1, brain2, skull1, skull2, outputmatrix, extra_flirt_args)
    return pairreg_execute(params, runner);
}


export {
      PAIRREG_METADATA,
      PairregOutputs,
      PairregParameters,
      pairreg,
      pairreg_execute,
      pairreg_params,
};
