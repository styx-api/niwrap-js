// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ANTS_INTRODUCTION_SH_METADATA: Metadata = {
    id: "ea6433a22b9e7d78a34c893edf721a839a07cf99.boutiques",
    name: "antsIntroduction.sh",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface AntsIntroductionShParameters {
    "@type": "ants.antsIntroduction.sh";
    "image_dimension": 2 | 3;
    "reference_image": InputPathType;
    "input_image": InputPathType;
    "force"?: 0 | 1 | null | undefined;
    "labels_in_fixed_image_space"?: string | null | undefined;
    "max_iterations"?: number | null | undefined;
    "n4_bias_field_correction"?: 0 | 1 | null | undefined;
    "outprefix"?: string | null | undefined;
    "quality_check"?: 0 | 1 | null | undefined;
    "similarity_metric"?: string | null | undefined;
    "transformation_model"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "ants.antsIntroduction.sh": ants_introduction_sh_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `ants_introduction_sh(...)`.
 *
 * @interface
 */
interface AntsIntroductionShOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param image_dimension Image dimension for registration: 2 or 3.
 * @param reference_image Reference image for registration.
 * @param input_image Input image to be registered.
 * @param force Force script to proceed even if headers may be incompatible.
 * @param labels_in_fixed_image_space Labels in fixed image space to deform to moving image.
 * @param max_iterations Maximum number of iterations.
 * @param n4_bias_field_correction N4 Bias Field Correction of moving image: 0 for off, 1 for on.
 * @param outprefix A prefix that is prepended to all output files.
 * @param quality_check Perform a Quality Check (QC) of the result: 0 for off, 1 for on.
 * @param similarity_metric Type of similarity metric used for registration.
 * @param transformation_model Type of transformation model used for registration.
 *
 * @returns Parameter dictionary
 */
function ants_introduction_sh_params(
    image_dimension: 2 | 3,
    reference_image: InputPathType,
    input_image: InputPathType,
    force: 0 | 1 | null = 1,
    labels_in_fixed_image_space: string | null = null,
    max_iterations: number | null = null,
    n4_bias_field_correction: 0 | 1 | null = 0,
    outprefix: string | null = null,
    quality_check: 0 | 1 | null = 0,
    similarity_metric: string | null = null,
    transformation_model: string | null = null,
): AntsIntroductionShParameters {
    const params = {
        "@type": "ants.antsIntroduction.sh" as const,
        "image_dimension": image_dimension,
        "reference_image": reference_image,
        "input_image": input_image,
    };
    if (force !== null) {
        params["force"] = force;
    }
    if (labels_in_fixed_image_space !== null) {
        params["labels_in_fixed_image_space"] = labels_in_fixed_image_space;
    }
    if (max_iterations !== null) {
        params["max_iterations"] = max_iterations;
    }
    if (n4_bias_field_correction !== null) {
        params["n4_bias_field_correction"] = n4_bias_field_correction;
    }
    if (outprefix !== null) {
        params["outprefix"] = outprefix;
    }
    if (quality_check !== null) {
        params["quality_check"] = quality_check;
    }
    if (similarity_metric !== null) {
        params["similarity_metric"] = similarity_metric;
    }
    if (transformation_model !== null) {
        params["transformation_model"] = transformation_model;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function ants_introduction_sh_cargs(
    params: AntsIntroductionShParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("antsIntroduction.sh");
    cargs.push(
        "-d",
        String((params["image_dimension"] ?? null))
    );
    cargs.push(
        "-r",
        execution.inputFile((params["reference_image"] ?? null))
    );
    cargs.push(
        "-i",
        execution.inputFile((params["input_image"] ?? null))
    );
    if ((params["force"] ?? null) !== null) {
        cargs.push(
            "-f",
            String((params["force"] ?? null))
        );
    }
    if ((params["labels_in_fixed_image_space"] ?? null) !== null) {
        cargs.push(
            "-l",
            (params["labels_in_fixed_image_space"] ?? null)
        );
    }
    if ((params["max_iterations"] ?? null) !== null) {
        cargs.push(
            "-m",
            String((params["max_iterations"] ?? null))
        );
    }
    if ((params["n4_bias_field_correction"] ?? null) !== null) {
        cargs.push(
            "-n",
            String((params["n4_bias_field_correction"] ?? null))
        );
    }
    if ((params["outprefix"] ?? null) !== null) {
        cargs.push(
            "-o",
            (params["outprefix"] ?? null)
        );
    }
    if ((params["quality_check"] ?? null) !== null) {
        cargs.push(
            "-q",
            String((params["quality_check"] ?? null))
        );
    }
    if ((params["similarity_metric"] ?? null) !== null) {
        cargs.push(
            "-s",
            (params["similarity_metric"] ?? null)
        );
    }
    if ((params["transformation_model"] ?? null) !== null) {
        cargs.push(
            "-t",
            (params["transformation_model"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function ants_introduction_sh_outputs(
    params: AntsIntroductionShParameters,
    execution: Execution,
): AntsIntroductionShOutputs {
    const ret: AntsIntroductionShOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Script for registration using ANTS with compulsory and optional arguments.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `AntsIntroductionShOutputs`).
 */
function ants_introduction_sh_execute(
    params: AntsIntroductionShParameters,
    execution: Execution,
): AntsIntroductionShOutputs {
    params = execution.params(params)
    const cargs = ants_introduction_sh_cargs(params, execution)
    const ret = ants_introduction_sh_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Script for registration using ANTS with compulsory and optional arguments.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param image_dimension Image dimension for registration: 2 or 3.
 * @param reference_image Reference image for registration.
 * @param input_image Input image to be registered.
 * @param force Force script to proceed even if headers may be incompatible.
 * @param labels_in_fixed_image_space Labels in fixed image space to deform to moving image.
 * @param max_iterations Maximum number of iterations.
 * @param n4_bias_field_correction N4 Bias Field Correction of moving image: 0 for off, 1 for on.
 * @param outprefix A prefix that is prepended to all output files.
 * @param quality_check Perform a Quality Check (QC) of the result: 0 for off, 1 for on.
 * @param similarity_metric Type of similarity metric used for registration.
 * @param transformation_model Type of transformation model used for registration.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `AntsIntroductionShOutputs`).
 */
function ants_introduction_sh(
    image_dimension: 2 | 3,
    reference_image: InputPathType,
    input_image: InputPathType,
    force: 0 | 1 | null = 1,
    labels_in_fixed_image_space: string | null = null,
    max_iterations: number | null = null,
    n4_bias_field_correction: 0 | 1 | null = 0,
    outprefix: string | null = null,
    quality_check: 0 | 1 | null = 0,
    similarity_metric: string | null = null,
    transformation_model: string | null = null,
    runner: Runner | null = null,
): AntsIntroductionShOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ANTS_INTRODUCTION_SH_METADATA);
    const params = ants_introduction_sh_params(image_dimension, reference_image, input_image, force, labels_in_fixed_image_space, max_iterations, n4_bias_field_correction, outprefix, quality_check, similarity_metric, transformation_model)
    return ants_introduction_sh_execute(params, execution);
}


export {
      ANTS_INTRODUCTION_SH_METADATA,
      AntsIntroductionShOutputs,
      AntsIntroductionShParameters,
      ants_introduction_sh,
      ants_introduction_sh_cargs,
      ants_introduction_sh_execute,
      ants_introduction_sh_outputs,
      ants_introduction_sh_params,
};
