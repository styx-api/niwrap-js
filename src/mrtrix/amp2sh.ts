// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const AMP2SH_METADATA: Metadata = {
    id: "b1deae186542fe482c4a2e51622f124fe000c4fc.boutiques",
    name: "amp2sh",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface Amp2shFslgradParameters {
    "@type": "mrtrix.amp2sh.fslgrad";
    "bvecs": InputPathType;
    "bvals": InputPathType;
}


interface Amp2shVariousStringParameters {
    "@type": "mrtrix.amp2sh.VariousString";
    "obj": string;
}


interface Amp2shVariousFileParameters {
    "@type": "mrtrix.amp2sh.VariousFile";
    "obj": InputPathType;
}


interface Amp2shConfigParameters {
    "@type": "mrtrix.amp2sh.config";
    "key": string;
    "value": string;
}


interface Amp2shParameters {
    "@type": "mrtrix.amp2sh";
    "lmax"?: number | null | undefined;
    "normalise": boolean;
    "directions"?: InputPathType | null | undefined;
    "rician"?: InputPathType | null | undefined;
    "grad"?: InputPathType | null | undefined;
    "fslgrad"?: Amp2shFslgradParameters | null | undefined;
    "shells"?: Array<number> | null | undefined;
    "strides"?: Amp2shVariousStringParameters | Amp2shVariousFileParameters | null | undefined;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<Amp2shConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "amp": InputPathType;
    "SH": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "mrtrix.amp2sh": amp2sh_cargs,
        "mrtrix.amp2sh.fslgrad": amp2sh_fslgrad_cargs,
        "mrtrix.amp2sh.VariousString": amp2sh_various_string_cargs,
        "mrtrix.amp2sh.VariousFile": amp2sh_various_file_cargs,
        "mrtrix.amp2sh.config": amp2sh_config_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "mrtrix.amp2sh": amp2sh_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param bvecs Provide the diffusion-weighted gradient scheme used in the acquisition in FSL bvecs/bvals format files. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
 * @param bvals Provide the diffusion-weighted gradient scheme used in the acquisition in FSL bvecs/bvals format files. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
 *
 * @returns Parameter dictionary
 */
function amp2sh_fslgrad_params(
    bvecs: InputPathType,
    bvals: InputPathType,
): Amp2shFslgradParameters {
    const params = {
        "@type": "mrtrix.amp2sh.fslgrad" as const,
        "bvecs": bvecs,
        "bvals": bvals,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function amp2sh_fslgrad_cargs(
    params: Amp2shFslgradParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-fslgrad");
    cargs.push(execution.inputFile((params["bvecs"] ?? null)));
    cargs.push(execution.inputFile((params["bvals"] ?? null)));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param obj String object.
 *
 * @returns Parameter dictionary
 */
function amp2sh_various_string_params(
    obj: string,
): Amp2shVariousStringParameters {
    const params = {
        "@type": "mrtrix.amp2sh.VariousString" as const,
        "obj": obj,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function amp2sh_various_string_cargs(
    params: Amp2shVariousStringParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push((params["obj"] ?? null));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param obj File object.
 *
 * @returns Parameter dictionary
 */
function amp2sh_various_file_params(
    obj: InputPathType,
): Amp2shVariousFileParameters {
    const params = {
        "@type": "mrtrix.amp2sh.VariousFile" as const,
        "obj": obj,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function amp2sh_various_file_cargs(
    params: Amp2shVariousFileParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push(execution.inputFile((params["obj"] ?? null)));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param key temporarily set the value of an MRtrix config file entry.
 * @param value temporarily set the value of an MRtrix config file entry.
 *
 * @returns Parameter dictionary
 */
function amp2sh_config_params(
    key: string,
    value: string,
): Amp2shConfigParameters {
    const params = {
        "@type": "mrtrix.amp2sh.config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function amp2sh_config_cargs(
    params: Amp2shConfigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `amp2sh(...)`.
 *
 * @interface
 */
interface Amp2shOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output spherical harmonics coefficients image.
     */
    sh: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param amp the input amplitude image.
 * @param sh the output spherical harmonics coefficients image.
 * @param lmax set the maximum harmonic order for the output series. By default, the program will use the highest possible lmax given the number of diffusion-weighted images, up to a maximum of 8.
 * @param normalise normalise the DW signal to the b=0 image
 * @param directions the directions corresponding to the input amplitude image used to sample AFD. By default this option is not required providing the direction set is supplied in the amplitude image. This should be supplied as a list of directions [az el], as generated using the dirgen command, or as a list of [ x y z ] Cartesian coordinates.
 * @param rician correct for Rician noise induced bias, using noise map supplied
 * @param grad Provide the diffusion-weighted gradient scheme used in the acquisition in a text file. This should be supplied as a 4xN text file with each line is in the format [ X Y Z b ], where [ X Y Z ] describe the direction of the applied gradient, and b gives the b-value in units of s/mm^2. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
 * @param fslgrad Provide the diffusion-weighted gradient scheme used in the acquisition in FSL bvecs/bvals format files. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
 * @param shells specify one or more b-values to use during processing, as a comma-separated list of the desired approximate b-values (b-values are clustered to allow for small deviations). Note that some commands are incompatible with multiple b-values, and will report an error if more than one b-value is provided. 
WARNING: note that, even though the b=0 volumes are never referred to as shells in the literature, they still have to be explicitly included in the list of b-values as provided to the -shell option! Several algorithms which include the b=0 volumes in their computations may otherwise return an undesired result.
 * @param strides specify the strides of the output data in memory; either as a comma-separated list of (signed) integers, or as a template image from which the strides shall be extracted and used. The actual strides produced will depend on whether the output image format can support it.
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 *
 * @returns Parameter dictionary
 */
function amp2sh_params(
    amp: InputPathType,
    sh: string,
    lmax: number | null = null,
    normalise: boolean = false,
    directions: InputPathType | null = null,
    rician: InputPathType | null = null,
    grad: InputPathType | null = null,
    fslgrad: Amp2shFslgradParameters | null = null,
    shells: Array<number> | null = null,
    strides: Amp2shVariousStringParameters | Amp2shVariousFileParameters | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<Amp2shConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): Amp2shParameters {
    const params = {
        "@type": "mrtrix.amp2sh" as const,
        "normalise": normalise,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "amp": amp,
        "SH": sh,
    };
    if (lmax !== null) {
        params["lmax"] = lmax;
    }
    if (directions !== null) {
        params["directions"] = directions;
    }
    if (rician !== null) {
        params["rician"] = rician;
    }
    if (grad !== null) {
        params["grad"] = grad;
    }
    if (fslgrad !== null) {
        params["fslgrad"] = fslgrad;
    }
    if (shells !== null) {
        params["shells"] = shells;
    }
    if (strides !== null) {
        params["strides"] = strides;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function amp2sh_cargs(
    params: Amp2shParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("amp2sh");
    if ((params["lmax"] ?? null) !== null) {
        cargs.push(
            "-lmax",
            String((params["lmax"] ?? null))
        );
    }
    if ((params["normalise"] ?? null)) {
        cargs.push("-normalise");
    }
    if ((params["directions"] ?? null) !== null) {
        cargs.push(
            "-directions",
            execution.inputFile((params["directions"] ?? null))
        );
    }
    if ((params["rician"] ?? null) !== null) {
        cargs.push(
            "-rician",
            execution.inputFile((params["rician"] ?? null))
        );
    }
    if ((params["grad"] ?? null) !== null) {
        cargs.push(
            "-grad",
            execution.inputFile((params["grad"] ?? null))
        );
    }
    if ((params["fslgrad"] ?? null) !== null) {
        cargs.push(...dynCargs((params["fslgrad"] ?? null)["@type"])((params["fslgrad"] ?? null), execution));
    }
    if ((params["shells"] ?? null) !== null) {
        cargs.push(
            "-shells",
            (params["shells"] ?? null).map(String).join(",")
        );
    }
    if ((params["strides"] ?? null) !== null) {
        cargs.push(
            "-strides",
            ...dynCargs((params["strides"] ?? null)["@type"])((params["strides"] ?? null), execution)
        );
    }
    if ((params["info"] ?? null)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? null)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => dynCargs(s["@type"])(s, execution)).flat());
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    cargs.push(execution.inputFile((params["amp"] ?? null)));
    cargs.push((params["SH"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function amp2sh_outputs(
    params: Amp2shParameters,
    execution: Execution,
): Amp2shOutputs {
    const ret: Amp2shOutputs = {
        root: execution.outputFile("."),
        sh: execution.outputFile([(params["SH"] ?? null)].join('')),
    };
    return ret;
}


/**
 * amp2sh
 *
 * Convert a set of amplitudes (defined along a set of corresponding directions) to their spherical harmonic representation.
 *
 * The spherical harmonic decomposition is calculated by least-squares linear fitting to the amplitude data.
 *
 * The directions can be defined either as a DW gradient scheme (for example to compute the SH representation of the DW signal), a set of [az el] pairs as output by the dirgen command, or a set of [ x y z ] directions in Cartesian coordinates. The DW gradient scheme or direction set can be supplied within the input image header or using the -gradient or -directions option. Note that if a direction set and DW gradient scheme can be found, the direction set will be used by default.
 *
 * The spherical harmonic coefficients are stored according the conventions described the main documentation, which can be found at the following link: 
 * https://mrtrix.readthedocs.io/en/3.0.4/concepts/spherical_harmonics.html
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Amp2shOutputs`).
 */
function amp2sh_execute(
    params: Amp2shParameters,
    runner: Runner | null = null,
): Amp2shOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(AMP2SH_METADATA);
    params = execution.params(params)
    const cargs = amp2sh_cargs(params, execution)
    const ret = amp2sh_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * amp2sh
 *
 * Convert a set of amplitudes (defined along a set of corresponding directions) to their spherical harmonic representation.
 *
 * The spherical harmonic decomposition is calculated by least-squares linear fitting to the amplitude data.
 *
 * The directions can be defined either as a DW gradient scheme (for example to compute the SH representation of the DW signal), a set of [az el] pairs as output by the dirgen command, or a set of [ x y z ] directions in Cartesian coordinates. The DW gradient scheme or direction set can be supplied within the input image header or using the -gradient or -directions option. Note that if a direction set and DW gradient scheme can be found, the direction set will be used by default.
 *
 * The spherical harmonic coefficients are stored according the conventions described the main documentation, which can be found at the following link: 
 * https://mrtrix.readthedocs.io/en/3.0.4/concepts/spherical_harmonics.html
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param amp the input amplitude image.
 * @param sh the output spherical harmonics coefficients image.
 * @param lmax set the maximum harmonic order for the output series. By default, the program will use the highest possible lmax given the number of diffusion-weighted images, up to a maximum of 8.
 * @param normalise normalise the DW signal to the b=0 image
 * @param directions the directions corresponding to the input amplitude image used to sample AFD. By default this option is not required providing the direction set is supplied in the amplitude image. This should be supplied as a list of directions [az el], as generated using the dirgen command, or as a list of [ x y z ] Cartesian coordinates.
 * @param rician correct for Rician noise induced bias, using noise map supplied
 * @param grad Provide the diffusion-weighted gradient scheme used in the acquisition in a text file. This should be supplied as a 4xN text file with each line is in the format [ X Y Z b ], where [ X Y Z ] describe the direction of the applied gradient, and b gives the b-value in units of s/mm^2. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
 * @param fslgrad Provide the diffusion-weighted gradient scheme used in the acquisition in FSL bvecs/bvals format files. If a diffusion gradient scheme is present in the input image header, the data provided with this option will be instead used.
 * @param shells specify one or more b-values to use during processing, as a comma-separated list of the desired approximate b-values (b-values are clustered to allow for small deviations). Note that some commands are incompatible with multiple b-values, and will report an error if more than one b-value is provided. 
WARNING: note that, even though the b=0 volumes are never referred to as shells in the literature, they still have to be explicitly included in the list of b-values as provided to the -shell option! Several algorithms which include the b=0 volumes in their computations may otherwise return an undesired result.
 * @param strides specify the strides of the output data in memory; either as a comma-separated list of (signed) integers, or as a template image from which the strides shall be extracted and used. The actual strides produced will depend on whether the output image format can support it.
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Amp2shOutputs`).
 */
function amp2sh(
    amp: InputPathType,
    sh: string,
    lmax: number | null = null,
    normalise: boolean = false,
    directions: InputPathType | null = null,
    rician: InputPathType | null = null,
    grad: InputPathType | null = null,
    fslgrad: Amp2shFslgradParameters | null = null,
    shells: Array<number> | null = null,
    strides: Amp2shVariousStringParameters | Amp2shVariousFileParameters | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<Amp2shConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): Amp2shOutputs {
    const params = amp2sh_params(amp, sh, lmax, normalise, directions, rician, grad, fslgrad, shells, strides, info, quiet, debug, force, nthreads, config, help, version)
    return amp2sh_execute(params, runner);
}


export {
      AMP2SH_METADATA,
      Amp2shConfigParameters,
      Amp2shFslgradParameters,
      Amp2shOutputs,
      Amp2shParameters,
      Amp2shVariousFileParameters,
      Amp2shVariousStringParameters,
      amp2sh,
      amp2sh_config_params,
      amp2sh_execute,
      amp2sh_fslgrad_params,
      amp2sh_params,
      amp2sh_various_file_params,
      amp2sh_various_string_params,
};
