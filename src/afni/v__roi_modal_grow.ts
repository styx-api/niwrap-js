// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__ROI_MODAL_GROW_METADATA: Metadata = {
    id: "569ed3bfade748be8a4eae1d8812ba05b410fe8f.boutiques",
    name: "@ROI_modal_grow",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VRoiModalGrowParameters {
    "__STYXTYPE__": "@ROI_modal_grow";
    "input_dset": InputPathType;
    "niters": number;
    "outdir"?: string | null | undefined;
    "mask"?: InputPathType | null | undefined;
    "prefix"?: string | null | undefined;
    "neighborhood_type"?: number | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "@ROI_modal_grow": v__roi_modal_grow_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "@ROI_modal_grow": v__roi_modal_grow_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__roi_modal_grow(...)`.
 *
 * @interface
 */
interface VRoiModalGrowOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Final output dataset
     */
    output_file: OutputPathType | null;
}


function v__roi_modal_grow_params(
    input_dset: InputPathType,
    niters: number,
    outdir: string | null = null,
    mask: InputPathType | null = null,
    prefix: string | null = null,
    neighborhood_type: number | null = null,
): VRoiModalGrowParameters {
    /**
     * Build parameters.
    
     * @param input_dset Required input dataset. This dataset should be a set of integer values, assuming approximate isotropic voxels.
     * @param niters Number of iterations for modal growth, generally making sense for values from about 1-10.
     * @param outdir Directory name for output. All output goes to this directory. Default is rmgrow.
     * @param mask Mask dataset at the same grid as the input dataset. Could be a dilated version of the original mask or a larger region like a cortical ribbon mask. Not required but often desirable.
     * @param prefix Base name of the final output dataset, i.e., baseprefix.nii.gz. Default is rmg, so output would be rmg.nii.gz.
     * @param neighborhood_type Neighborhood type used in finding mode. 1 - facing neighbors, 2 - edges, 3 - corners.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "@ROI_modal_grow" as const,
        "input_dset": input_dset,
        "niters": niters,
    };
    if (outdir !== null) {
        params["outdir"] = outdir;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (neighborhood_type !== null) {
        params["neighborhood_type"] = neighborhood_type;
    }
    return params;
}


function v__roi_modal_grow_cargs(
    params: VRoiModalGrowParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("@ROI_modal_grow");
    cargs.push(
        "-input",
        execution.inputFile((params["input_dset"] ?? null))
    );
    cargs.push(
        "-niters",
        String((params["niters"] ?? null))
    );
    if ((params["outdir"] ?? null) !== null) {
        cargs.push(
            "-outdir",
            (params["outdir"] ?? null)
        );
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["neighborhood_type"] ?? null) !== null) {
        cargs.push(
            "-NN",
            String((params["neighborhood_type"] ?? null))
        );
    }
    return cargs;
}


function v__roi_modal_grow_outputs(
    params: VRoiModalGrowParameters,
    execution: Execution,
): VRoiModalGrowOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: VRoiModalGrowOutputs = {
        root: execution.outputFile("."),
        output_file: ((params["outdir"] ?? null) !== null && (params["prefix"] ?? null) !== null) ? execution.outputFile([(params["outdir"] ?? null), "/", (params["prefix"] ?? null), ".nii.gz"].join('')) : null,
    };
    return ret;
}


function v__roi_modal_grow_execute(
    params: VRoiModalGrowParameters,
    execution: Execution,
): VRoiModalGrowOutputs {
    /**
     * Script to grow a set of regions in a volumetric dataset using modal smoothing.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `VRoiModalGrowOutputs`).
     */
    params = execution.params(params)
    const cargs = v__roi_modal_grow_cargs(params, execution)
    const ret = v__roi_modal_grow_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v__roi_modal_grow(
    input_dset: InputPathType,
    niters: number,
    outdir: string | null = null,
    mask: InputPathType | null = null,
    prefix: string | null = null,
    neighborhood_type: number | null = null,
    runner: Runner | null = null,
): VRoiModalGrowOutputs {
    /**
     * Script to grow a set of regions in a volumetric dataset using modal smoothing.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param input_dset Required input dataset. This dataset should be a set of integer values, assuming approximate isotropic voxels.
     * @param niters Number of iterations for modal growth, generally making sense for values from about 1-10.
     * @param outdir Directory name for output. All output goes to this directory. Default is rmgrow.
     * @param mask Mask dataset at the same grid as the input dataset. Could be a dilated version of the original mask or a larger region like a cortical ribbon mask. Not required but often desirable.
     * @param prefix Base name of the final output dataset, i.e., baseprefix.nii.gz. Default is rmg, so output would be rmg.nii.gz.
     * @param neighborhood_type Neighborhood type used in finding mode. 1 - facing neighbors, 2 - edges, 3 - corners.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `VRoiModalGrowOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__ROI_MODAL_GROW_METADATA);
    const params = v__roi_modal_grow_params(input_dset, niters, outdir, mask, prefix, neighborhood_type)
    return v__roi_modal_grow_execute(params, execution);
}


export {
      VRoiModalGrowOutputs,
      VRoiModalGrowParameters,
      V__ROI_MODAL_GROW_METADATA,
      v__roi_modal_grow,
      v__roi_modal_grow_params,
};
