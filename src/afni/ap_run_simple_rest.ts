// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const AP_RUN_SIMPLE_REST_METADATA: Metadata = {
    id: "5092ef596210a75b6b040d6dc8cfafbc8fb2a70b.boutiques",
    name: "ap_run_simple_rest",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface ApRunSimpleRestParameters {
    "__STYXTYPE__": "ap_run_simple_rest";
    "anat"?: InputPathType | null | undefined;
    "epi": Array<InputPathType>;
    "nt_rm"?: number | null | undefined;
    "run_ap": boolean;
    "run_proc": boolean;
    "subjid"?: string | null | undefined;
    "template"?: InputPathType | null | undefined;
    "compressor"?: string | null | undefined;
    "verb"?: number | null | undefined;
    "echo": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "ap_run_simple_rest": ap_run_simple_rest_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "ap_run_simple_rest": ap_run_simple_rest_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `ap_run_simple_rest(...)`.
 *
 * @interface
 */
interface ApRunSimpleRestOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * afni_proc.py command script
     */
    run_ap_script: OutputPathType | null;
    /**
     * proc script (if AP is run)
     */
    proc_script: OutputPathType | null;
    /**
     * proc results directory (if run)
     */
    proc_results_dir: OutputPathType | null;
    /**
     * Text output files from AP and proc scripts
     */
    text_output_files: OutputPathType;
}


function ap_run_simple_rest_params(
    epi: Array<InputPathType>,
    anat: InputPathType | null = null,
    nt_rm: number | null = null,
    run_ap: boolean = false,
    run_proc: boolean = false,
    subjid: string | null = null,
    template: InputPathType | null = null,
    compressor: string | null = null,
    verb: number | null = null,
    echo: boolean = false,
): ApRunSimpleRestParameters {
    /**
     * Build parameters.
    
     * @param epi EPI datasets
     * @param anat Single anatomical dataset
     * @param nt_rm Number of time points to remove from starts of runs
     * @param run_ap Run the afni_proc.py command
     * @param run_proc Run the proc script from afni_proc.py command
     * @param subjid Specify subject ID for file names
     * @param template Specify template for standard space
     * @param compressor Control automatic compression of *.BRIK files
     * @param verb Specify verbosity level
     * @param echo Same as verbosity level 3
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "ap_run_simple_rest" as const,
        "epi": epi,
        "run_ap": run_ap,
        "run_proc": run_proc,
        "echo": echo,
    };
    if (anat !== null) {
        params["anat"] = anat;
    }
    if (nt_rm !== null) {
        params["nt_rm"] = nt_rm;
    }
    if (subjid !== null) {
        params["subjid"] = subjid;
    }
    if (template !== null) {
        params["template"] = template;
    }
    if (compressor !== null) {
        params["compressor"] = compressor;
    }
    if (verb !== null) {
        params["verb"] = verb;
    }
    return params;
}


function ap_run_simple_rest_cargs(
    params: ApRunSimpleRestParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("ap_run_simple_rest.tcsh");
    if ((params["anat"] ?? null) !== null) {
        cargs.push(
            "-anat",
            execution.inputFile((params["anat"] ?? null))
        );
    }
    cargs.push(
        "-epi",
        ...(params["epi"] ?? null).map(f => execution.inputFile(f))
    );
    if ((params["nt_rm"] ?? null) !== null) {
        cargs.push(
            "-nt_rm",
            String((params["nt_rm"] ?? null))
        );
    }
    if ((params["run_ap"] ?? null)) {
        cargs.push("-run_ap");
    }
    if ((params["run_proc"] ?? null)) {
        cargs.push("-run_proc");
    }
    if ((params["subjid"] ?? null) !== null) {
        cargs.push(
            "-subjid",
            (params["subjid"] ?? null)
        );
    }
    if ((params["template"] ?? null) !== null) {
        cargs.push(
            "-template",
            execution.inputFile((params["template"] ?? null))
        );
    }
    if ((params["compressor"] ?? null) !== null) {
        cargs.push(
            "-compressor",
            (params["compressor"] ?? null)
        );
    }
    if ((params["verb"] ?? null) !== null) {
        cargs.push(
            "-verb",
            String((params["verb"] ?? null))
        );
    }
    if ((params["echo"] ?? null)) {
        cargs.push("-echo");
    }
    return cargs;
}


function ap_run_simple_rest_outputs(
    params: ApRunSimpleRestParameters,
    execution: Execution,
): ApRunSimpleRestOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: ApRunSimpleRestOutputs = {
        root: execution.outputFile("."),
        run_ap_script: ((params["subjid"] ?? null) !== null) ? execution.outputFile(["run_ap_", (params["subjid"] ?? null)].join('')) : null,
        proc_script: ((params["subjid"] ?? null) !== null) ? execution.outputFile(["proc.", (params["subjid"] ?? null)].join('')) : null,
        proc_results_dir: ((params["subjid"] ?? null) !== null) ? execution.outputFile([(params["subjid"] ?? null), ".results"].join('')) : null,
        text_output_files: execution.outputFile(["out.*"].join('')),
    };
    return ret;
}


function ap_run_simple_rest_execute(
    params: ApRunSimpleRestParameters,
    execution: Execution,
): ApRunSimpleRestOutputs {
    /**
     * Run a quick afni_proc.py analysis for QC.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `ApRunSimpleRestOutputs`).
     */
    params = execution.params(params)
    const cargs = ap_run_simple_rest_cargs(params, execution)
    const ret = ap_run_simple_rest_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function ap_run_simple_rest(
    epi: Array<InputPathType>,
    anat: InputPathType | null = null,
    nt_rm: number | null = null,
    run_ap: boolean = false,
    run_proc: boolean = false,
    subjid: string | null = null,
    template: InputPathType | null = null,
    compressor: string | null = null,
    verb: number | null = null,
    echo: boolean = false,
    runner: Runner | null = null,
): ApRunSimpleRestOutputs {
    /**
     * Run a quick afni_proc.py analysis for QC.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param epi EPI datasets
     * @param anat Single anatomical dataset
     * @param nt_rm Number of time points to remove from starts of runs
     * @param run_ap Run the afni_proc.py command
     * @param run_proc Run the proc script from afni_proc.py command
     * @param subjid Specify subject ID for file names
     * @param template Specify template for standard space
     * @param compressor Control automatic compression of *.BRIK files
     * @param verb Specify verbosity level
     * @param echo Same as verbosity level 3
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `ApRunSimpleRestOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(AP_RUN_SIMPLE_REST_METADATA);
    const params = ap_run_simple_rest_params(epi, anat, nt_rm, run_ap, run_proc, subjid, template, compressor, verb, echo)
    return ap_run_simple_rest_execute(params, execution);
}


export {
      AP_RUN_SIMPLE_REST_METADATA,
      ApRunSimpleRestOutputs,
      ApRunSimpleRestParameters,
      ap_run_simple_rest,
      ap_run_simple_rest_params,
};
