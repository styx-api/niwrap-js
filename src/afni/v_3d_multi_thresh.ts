// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_MULTI_THRESH_METADATA: Metadata = {
    id: "0cd522f82df292e38bac580f53ce63e58f4d0ba1.boutiques",
    name: "3dMultiThresh",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dMultiThreshParameters {
    "@type": "afni.3dMultiThresh";
    "mthresh_file": InputPathType;
    "input_file": InputPathType;
    "index"?: number | null | undefined;
    "signed_flag"?: string | null | undefined;
    "positive_sign_flag": boolean;
    "negative_sign_flag": boolean;
    "prefix"?: string | null | undefined;
    "mask_only_flag": boolean;
    "all_mask"?: string | null | undefined;
    "no_zero_flag": boolean;
    "quiet_flag": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dMultiThresh": v_3d_multi_thresh_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dMultiThresh": v_3d_multi_thresh_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_multi_thresh(...)`.
 *
 * @interface
 */
interface V3dMultiThreshOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Thresholded version of the input dataset.
     */
    output_file: OutputPathType | null;
    /**
     * 0/1 mask dataset of voxels that survive the process.
     */
    mask_output: OutputPathType | null;
    /**
     * Multi-volume dataset where each volume is the binary mask of voxels that pass ONE of the tests.
     */
    all_mask_output: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param mthresh_file Multi-threshold dataset from 3dXClustSim, usually via running '3dttest++ -ETAC'.
 * @param input_file Dataset to threshold.
 * @param index Index (sub-brick) on which to threshold.
 * @param signed_flag Indicates if the .mthresh.nii file from 3dXClustSim was created using 1-sided thresholding. Choose sign + or -.
 * @param positive_sign_flag Same as '-signed +'.
 * @param negative_sign_flag Same as '-signed -'.
 * @param prefix Prefix for output dataset. Can be 'NULL' to get no output dataset.
 * @param mask_only_flag Instead of outputting a thresholded version of the input dataset, just output a 0/1 mask dataset of voxels that survive the process.
 * @param all_mask Write out a multi-volume dataset with prefix 'qqq' where each volume is the binary mask of voxels that pass ONE of the tests.
 * @param no_zero_flag Prevents the output of a dataset if it would be all zero.
 * @param quiet_flag Turn off progress report messages.
 *
 * @returns Parameter dictionary
 */
function v_3d_multi_thresh_params(
    mthresh_file: InputPathType,
    input_file: InputPathType,
    index: number | null = null,
    signed_flag: string | null = null,
    positive_sign_flag: boolean = false,
    negative_sign_flag: boolean = false,
    prefix: string | null = null,
    mask_only_flag: boolean = false,
    all_mask: string | null = null,
    no_zero_flag: boolean = false,
    quiet_flag: boolean = false,
): V3dMultiThreshParameters {
    const params = {
        "@type": "afni.3dMultiThresh" as const,
        "mthresh_file": mthresh_file,
        "input_file": input_file,
        "positive_sign_flag": positive_sign_flag,
        "negative_sign_flag": negative_sign_flag,
        "mask_only_flag": mask_only_flag,
        "no_zero_flag": no_zero_flag,
        "quiet_flag": quiet_flag,
    };
    if (index !== null) {
        params["index"] = index;
    }
    if (signed_flag !== null) {
        params["signed_flag"] = signed_flag;
    }
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (all_mask !== null) {
        params["all_mask"] = all_mask;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_multi_thresh_cargs(
    params: V3dMultiThreshParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dMultiThresh");
    cargs.push(
        "-mthresh",
        execution.inputFile((params["mthresh_file"] ?? null))
    );
    cargs.push(
        "-input",
        execution.inputFile((params["input_file"] ?? null))
    );
    if ((params["index"] ?? null) !== null) {
        cargs.push(
            "-1tindex",
            String((params["index"] ?? null))
        );
    }
    if ((params["signed_flag"] ?? null) !== null) {
        cargs.push(
            "-signed",
            (params["signed_flag"] ?? null)
        );
    }
    if ((params["positive_sign_flag"] ?? null)) {
        cargs.push("-pos");
    }
    if ((params["negative_sign_flag"] ?? null)) {
        cargs.push("-neg");
    }
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["mask_only_flag"] ?? null)) {
        cargs.push("-maskonly");
    }
    if ((params["all_mask"] ?? null) !== null) {
        cargs.push(
            "-allmask",
            (params["all_mask"] ?? null)
        );
    }
    if ((params["no_zero_flag"] ?? null)) {
        cargs.push("-nozero");
    }
    if ((params["quiet_flag"] ?? null)) {
        cargs.push("-quiet");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_multi_thresh_outputs(
    params: V3dMultiThreshParameters,
    execution: Execution,
): V3dMultiThreshOutputs {
    const ret: V3dMultiThreshOutputs = {
        root: execution.outputFile("."),
        output_file: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), ".nii.gz"].join('')) : null,
        mask_output: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "_mask.nii.gz"].join('')) : null,
        all_mask_output: ((params["all_mask"] ?? null) !== null) ? execution.outputFile([(params["all_mask"] ?? null), ".nii.gz"].join('')) : null,
    };
    return ret;
}


/**
 * Program to apply a multi-threshold (mthresh) dataset to an input dataset.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `V3dMultiThreshOutputs`).
 */
function v_3d_multi_thresh_execute(
    params: V3dMultiThreshParameters,
    execution: Execution,
): V3dMultiThreshOutputs {
    params = execution.params(params)
    const cargs = v_3d_multi_thresh_cargs(params, execution)
    const ret = v_3d_multi_thresh_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Program to apply a multi-threshold (mthresh) dataset to an input dataset.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param mthresh_file Multi-threshold dataset from 3dXClustSim, usually via running '3dttest++ -ETAC'.
 * @param input_file Dataset to threshold.
 * @param index Index (sub-brick) on which to threshold.
 * @param signed_flag Indicates if the .mthresh.nii file from 3dXClustSim was created using 1-sided thresholding. Choose sign + or -.
 * @param positive_sign_flag Same as '-signed +'.
 * @param negative_sign_flag Same as '-signed -'.
 * @param prefix Prefix for output dataset. Can be 'NULL' to get no output dataset.
 * @param mask_only_flag Instead of outputting a thresholded version of the input dataset, just output a 0/1 mask dataset of voxels that survive the process.
 * @param all_mask Write out a multi-volume dataset with prefix 'qqq' where each volume is the binary mask of voxels that pass ONE of the tests.
 * @param no_zero_flag Prevents the output of a dataset if it would be all zero.
 * @param quiet_flag Turn off progress report messages.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dMultiThreshOutputs`).
 */
function v_3d_multi_thresh(
    mthresh_file: InputPathType,
    input_file: InputPathType,
    index: number | null = null,
    signed_flag: string | null = null,
    positive_sign_flag: boolean = false,
    negative_sign_flag: boolean = false,
    prefix: string | null = null,
    mask_only_flag: boolean = false,
    all_mask: string | null = null,
    no_zero_flag: boolean = false,
    quiet_flag: boolean = false,
    runner: Runner | null = null,
): V3dMultiThreshOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_MULTI_THRESH_METADATA);
    const params = v_3d_multi_thresh_params(mthresh_file, input_file, index, signed_flag, positive_sign_flag, negative_sign_flag, prefix, mask_only_flag, all_mask, no_zero_flag, quiet_flag)
    return v_3d_multi_thresh_execute(params, execution);
}


export {
      V3dMultiThreshOutputs,
      V3dMultiThreshParameters,
      V_3D_MULTI_THRESH_METADATA,
      v_3d_multi_thresh,
      v_3d_multi_thresh_cargs,
      v_3d_multi_thresh_execute,
      v_3d_multi_thresh_outputs,
      v_3d_multi_thresh_params,
};
