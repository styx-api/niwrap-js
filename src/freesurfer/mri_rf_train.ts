// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_RF_TRAIN_METADATA: Metadata = {
    id: "870f25d10067d5fd18479ccaf606dc51ef296eaf.boutiques",
    name: "mri_rf_train",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriRfTrainParameters {
    "@type"?: "freesurfer/mri_rf_train";
    "seg_volume": string;
    "atlas_transform": string;
    "mask_volume"?: string | null | undefined;
    "node_spacing"?: number | null | undefined;
    "prior_spacing"?: number | null | undefined;
    "input_training_data"?: Array<string> | null | undefined;
    "sanity_check": boolean;
    "subjects": Array<string>;
    "output_rfa": string;
}
type MriRfTrainParametersTagged = Required<Pick<MriRfTrainParameters, '@type'>> & MriRfTrainParameters;


/**
 * Output object returned when calling `MriRfTrainParameters(...)`.
 *
 * @interface
 */
interface MriRfTrainOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param seg_volume Segmentation volume (path relative to $subject/mri).
 * @param atlas_transform Atlas transform (path relative to $subject/mri/transforms).
 * @param subjects Input subjects.
 * @param output_rfa Output RFA filename.
 * @param mask_volume Use volname as a mask (path relative to $subject/mri).
 * @param node_spacing Spacing of classifiers in canonical space.
 * @param prior_spacing Spacing of class priors in canonical space.
 * @param input_training_data Specifying training data (path relative to $subject/mri). Can specify multiple inputs. If not specified, 'orig' is used.
 * @param sanity_check Conduct sanity-check of labels for obvious edit errors.
 *
 * @returns Parameter dictionary
 */
function mri_rf_train_params(
    seg_volume: string,
    atlas_transform: string,
    subjects: Array<string>,
    output_rfa: string,
    mask_volume: string | null = null,
    node_spacing: number | null = null,
    prior_spacing: number | null = null,
    input_training_data: Array<string> | null = null,
    sanity_check: boolean = false,
): MriRfTrainParametersTagged {
    const params = {
        "@type": "freesurfer/mri_rf_train" as const,
        "seg_volume": seg_volume,
        "atlas_transform": atlas_transform,
        "sanity_check": sanity_check,
        "subjects": subjects,
        "output_rfa": output_rfa,
    };
    if (mask_volume !== null) {
        params["mask_volume"] = mask_volume;
    }
    if (node_spacing !== null) {
        params["node_spacing"] = node_spacing;
    }
    if (prior_spacing !== null) {
        params["prior_spacing"] = prior_spacing;
    }
    if (input_training_data !== null) {
        params["input_training_data"] = input_training_data;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_rf_train_cargs(
    params: MriRfTrainParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_rf_train");
    cargs.push(
        "-seg",
        (params["seg_volume"] ?? null)
    );
    cargs.push(
        "-xform",
        (params["atlas_transform"] ?? null)
    );
    if ((params["mask_volume"] ?? null) !== null) {
        cargs.push(
            "-mask",
            (params["mask_volume"] ?? null)
        );
    }
    if ((params["node_spacing"] ?? null) !== null) {
        cargs.push(
            "-node_spacing",
            String((params["node_spacing"] ?? null))
        );
    }
    if ((params["prior_spacing"] ?? null) !== null) {
        cargs.push(
            "-prior_spacing",
            String((params["prior_spacing"] ?? null))
        );
    }
    if ((params["input_training_data"] ?? null) !== null) {
        cargs.push(
            "-input",
            ...(params["input_training_data"] ?? null)
        );
    }
    if ((params["sanity_check"] ?? false)) {
        cargs.push("-check");
    }
    cargs.push(...(params["subjects"] ?? null));
    cargs.push((params["output_rfa"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_rf_train_outputs(
    params: MriRfTrainParameters,
    execution: Execution,
): MriRfTrainOutputs {
    const ret: MriRfTrainOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * mri_rf_train
 *
 * Trains GCA data with multiple subjects using MRI data.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriRfTrainOutputs`).
 */
function mri_rf_train_execute(
    params: MriRfTrainParameters,
    runner: Runner | null = null,
): MriRfTrainOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_RF_TRAIN_METADATA);
    params = execution.params(params)
    const cargs = mri_rf_train_cargs(params, execution)
    const ret = mri_rf_train_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_rf_train
 *
 * Trains GCA data with multiple subjects using MRI data.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param seg_volume Segmentation volume (path relative to $subject/mri).
 * @param atlas_transform Atlas transform (path relative to $subject/mri/transforms).
 * @param subjects Input subjects.
 * @param output_rfa Output RFA filename.
 * @param mask_volume Use volname as a mask (path relative to $subject/mri).
 * @param node_spacing Spacing of classifiers in canonical space.
 * @param prior_spacing Spacing of class priors in canonical space.
 * @param input_training_data Specifying training data (path relative to $subject/mri). Can specify multiple inputs. If not specified, 'orig' is used.
 * @param sanity_check Conduct sanity-check of labels for obvious edit errors.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriRfTrainOutputs`).
 */
function mri_rf_train(
    seg_volume: string,
    atlas_transform: string,
    subjects: Array<string>,
    output_rfa: string,
    mask_volume: string | null = null,
    node_spacing: number | null = null,
    prior_spacing: number | null = null,
    input_training_data: Array<string> | null = null,
    sanity_check: boolean = false,
    runner: Runner | null = null,
): MriRfTrainOutputs {
    const params = mri_rf_train_params(seg_volume, atlas_transform, subjects, output_rfa, mask_volume, node_spacing, prior_spacing, input_training_data, sanity_check)
    return mri_rf_train_execute(params, runner);
}


export {
      MRI_RF_TRAIN_METADATA,
      MriRfTrainOutputs,
      mri_rf_train,
      mri_rf_train_execute,
      mri_rf_train_params,
};
