// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SH2PEAKS_METADATA: Metadata = {
    id: "fa5c5976ef9cd75e8ab67b278ed530d08b43702c.boutiques",
    name: "sh2peaks",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface Sh2peaksDirectionParameters {
    "@type": "mrtrix.sh2peaks.direction";
    "phi": number;
    "theta": number;
}


interface Sh2peaksConfigParameters {
    "@type": "mrtrix.sh2peaks.config";
    "key": string;
    "value": string;
}


interface Sh2peaksParameters {
    "@type": "mrtrix.sh2peaks";
    "num"?: number | null | undefined;
    "direction"?: Array<Sh2peaksDirectionParameters> | null | undefined;
    "peaks"?: InputPathType | null | undefined;
    "threshold"?: number | null | undefined;
    "seeds"?: InputPathType | null | undefined;
    "mask"?: InputPathType | null | undefined;
    "fast": boolean;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<Sh2peaksConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "SH": InputPathType;
    "output": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "mrtrix.sh2peaks": sh2peaks_cargs,
        "mrtrix.sh2peaks.direction": sh2peaks_direction_cargs,
        "mrtrix.sh2peaks.config": sh2peaks_config_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "mrtrix.sh2peaks": sh2peaks_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param phi the direction of a peak to estimate. The algorithm will attempt to find the same number of peaks as have been specified using this option.
 * @param theta the direction of a peak to estimate. The algorithm will attempt to find the same number of peaks as have been specified using this option.
 *
 * @returns Parameter dictionary
 */
function sh2peaks_direction_params(
    phi: number,
    theta: number,
): Sh2peaksDirectionParameters {
    const params = {
        "@type": "mrtrix.sh2peaks.direction" as const,
        "phi": phi,
        "theta": theta,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function sh2peaks_direction_cargs(
    params: Sh2peaksDirectionParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-direction");
    cargs.push(String((params["phi"] ?? null)));
    cargs.push(String((params["theta"] ?? null)));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param key temporarily set the value of an MRtrix config file entry.
 * @param value temporarily set the value of an MRtrix config file entry.
 *
 * @returns Parameter dictionary
 */
function sh2peaks_config_params(
    key: string,
    value: string,
): Sh2peaksConfigParameters {
    const params = {
        "@type": "mrtrix.sh2peaks.config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function sh2peaks_config_cargs(
    params: Sh2peaksConfigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Output object returned when calling `sh2peaks(...)`.
 *
 * @interface
 */
interface Sh2peaksOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output image. Each volume corresponds to the x, y & z component of each peak direction vector in turn.
     */
    output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param sh the input image of SH coefficients.
 * @param output the output image. Each volume corresponds to the x, y & z component of each peak direction vector in turn.
 * @param num the number of peaks to extract (default: 3).
 * @param direction the direction of a peak to estimate. The algorithm will attempt to find the same number of peaks as have been specified using this option.
 * @param peaks the program will try to find the peaks that most closely match those in the image provided.
 * @param threshold only peak amplitudes greater than the threshold will be considered.
 * @param seeds specify a set of directions from which to start the multiple restarts of the optimisation (by default, the built-in 60 direction set is used)
 * @param mask only perform computation within the specified binary brain mask image.
 * @param fast use lookup table to compute associated Legendre polynomials (faster, but approximate).
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 *
 * @returns Parameter dictionary
 */
function sh2peaks_params(
    sh: InputPathType,
    output: string,
    num: number | null = null,
    direction: Array<Sh2peaksDirectionParameters> | null = null,
    peaks: InputPathType | null = null,
    threshold: number | null = null,
    seeds: InputPathType | null = null,
    mask: InputPathType | null = null,
    fast: boolean = false,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<Sh2peaksConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): Sh2peaksParameters {
    const params = {
        "@type": "mrtrix.sh2peaks" as const,
        "fast": fast,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "SH": sh,
        "output": output,
    };
    if (num !== null) {
        params["num"] = num;
    }
    if (direction !== null) {
        params["direction"] = direction;
    }
    if (peaks !== null) {
        params["peaks"] = peaks;
    }
    if (threshold !== null) {
        params["threshold"] = threshold;
    }
    if (seeds !== null) {
        params["seeds"] = seeds;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function sh2peaks_cargs(
    params: Sh2peaksParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("sh2peaks");
    if ((params["num"] ?? null) !== null) {
        cargs.push(
            "-num",
            String((params["num"] ?? null))
        );
    }
    if ((params["direction"] ?? null) !== null) {
        cargs.push(...(params["direction"] ?? null).map(s => dynCargs(s["@type"])(s, execution)).flat());
    }
    if ((params["peaks"] ?? null) !== null) {
        cargs.push(
            "-peaks",
            execution.inputFile((params["peaks"] ?? null))
        );
    }
    if ((params["threshold"] ?? null) !== null) {
        cargs.push(
            "-threshold",
            String((params["threshold"] ?? null))
        );
    }
    if ((params["seeds"] ?? null) !== null) {
        cargs.push(
            "-seeds",
            execution.inputFile((params["seeds"] ?? null))
        );
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["fast"] ?? null)) {
        cargs.push("-fast");
    }
    if ((params["info"] ?? null)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? null)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => dynCargs(s["@type"])(s, execution)).flat());
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    cargs.push(execution.inputFile((params["SH"] ?? null)));
    cargs.push((params["output"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function sh2peaks_outputs(
    params: Sh2peaksParameters,
    execution: Execution,
): Sh2peaksOutputs {
    const ret: Sh2peaksOutputs = {
        root: execution.outputFile("."),
        output: execution.outputFile([(params["output"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Extract the peaks of a spherical harmonic function in each voxel.
 *
 * Peaks of the spherical harmonic function in each voxel are located by commencing a Newton search along each of a set of pre-specified directions
 *
 * The spherical harmonic coefficients are stored according the conventions described the main documentation, which can be found at the following link: 
 * https://mrtrix.readthedocs.io/en/3.0.4/concepts/spherical_harmonics.html
 *
 * References:
 *
 * Jeurissen, B.; Leemans, A.; Tournier, J.-D.; Jones, D.K.; Sijbers, J. Investigating the prevalence of complex fiber configurations in white matter tissue with diffusion magnetic resonance imaging. Human Brain Mapping, 2013, 34(11), 2747-2766.
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `Sh2peaksOutputs`).
 */
function sh2peaks_execute(
    params: Sh2peaksParameters,
    execution: Execution,
): Sh2peaksOutputs {
    params = execution.params(params)
    const cargs = sh2peaks_cargs(params, execution)
    const ret = sh2peaks_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Extract the peaks of a spherical harmonic function in each voxel.
 *
 * Peaks of the spherical harmonic function in each voxel are located by commencing a Newton search along each of a set of pre-specified directions
 *
 * The spherical harmonic coefficients are stored according the conventions described the main documentation, which can be found at the following link: 
 * https://mrtrix.readthedocs.io/en/3.0.4/concepts/spherical_harmonics.html
 *
 * References:
 *
 * Jeurissen, B.; Leemans, A.; Tournier, J.-D.; Jones, D.K.; Sijbers, J. Investigating the prevalence of complex fiber configurations in white matter tissue with diffusion magnetic resonance imaging. Human Brain Mapping, 2013, 34(11), 2747-2766.
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param sh the input image of SH coefficients.
 * @param output the output image. Each volume corresponds to the x, y & z component of each peak direction vector in turn.
 * @param num the number of peaks to extract (default: 3).
 * @param direction the direction of a peak to estimate. The algorithm will attempt to find the same number of peaks as have been specified using this option.
 * @param peaks the program will try to find the peaks that most closely match those in the image provided.
 * @param threshold only peak amplitudes greater than the threshold will be considered.
 * @param seeds specify a set of directions from which to start the multiple restarts of the optimisation (by default, the built-in 60 direction set is used)
 * @param mask only perform computation within the specified binary brain mask image.
 * @param fast use lookup table to compute associated Legendre polynomials (faster, but approximate).
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Sh2peaksOutputs`).
 */
function sh2peaks(
    sh: InputPathType,
    output: string,
    num: number | null = null,
    direction: Array<Sh2peaksDirectionParameters> | null = null,
    peaks: InputPathType | null = null,
    threshold: number | null = null,
    seeds: InputPathType | null = null,
    mask: InputPathType | null = null,
    fast: boolean = false,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<Sh2peaksConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): Sh2peaksOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SH2PEAKS_METADATA);
    const params = sh2peaks_params(sh, output, num, direction, peaks, threshold, seeds, mask, fast, info, quiet, debug, force, nthreads, config, help, version)
    return sh2peaks_execute(params, execution);
}


export {
      SH2PEAKS_METADATA,
      Sh2peaksConfigParameters,
      Sh2peaksDirectionParameters,
      Sh2peaksOutputs,
      Sh2peaksParameters,
      sh2peaks,
      sh2peaks_cargs,
      sh2peaks_config_cargs,
      sh2peaks_config_params,
      sh2peaks_direction_cargs,
      sh2peaks_direction_params,
      sh2peaks_execute,
      sh2peaks_outputs,
      sh2peaks_params,
};
