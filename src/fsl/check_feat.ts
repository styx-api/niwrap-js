// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CHECK_FEAT_METADATA: Metadata = {
    id: "5c01c982506b5f2701ba4b9d8807b6af43506adb.boutiques",
    name: "checkFEAT",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface CheckFeatParameters {
    "@type"?: "fsl/checkFEAT";
    "report_file": InputPathType;
    "report_log_file": InputPathType;
}
type CheckFeatParametersTagged = Required<Pick<CheckFeatParameters, '@type'>> & CheckFeatParameters;


/**
 * Output object returned when calling `CheckFeatParameters(...)`.
 *
 * @interface
 */
interface CheckFeatOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output HTML report
     */
    output_report: OutputPathType;
    /**
     * Output HTML report log
     */
    output_report_log: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param report_file Path to the HTML report
 * @param report_log_file Path to the HTML report log
 *
 * @returns Parameter dictionary
 */
function check_feat_params(
    report_file: InputPathType,
    report_log_file: InputPathType,
): CheckFeatParametersTagged {
    const params = {
        "@type": "fsl/checkFEAT" as const,
        "report_file": report_file,
        "report_log_file": report_log_file,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function check_feat_cargs(
    params: CheckFeatParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("checkFEAT");
    cargs.push(execution.inputFile((params["report_file"] ?? null)));
    cargs.push(execution.inputFile((params["report_log_file"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function check_feat_outputs(
    params: CheckFeatParameters,
    execution: Execution,
): CheckFeatOutputs {
    const ret: CheckFeatOutputs = {
        root: execution.outputFile("."),
        output_report: execution.outputFile(["output_report.html"].join('')),
        output_report_log: execution.outputFile(["output_report_log.html"].join('')),
    };
    return ret;
}


/**
 * checkFEAT
 *
 * Perform checks on FEAT analysis results.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CheckFeatOutputs`).
 */
function check_feat_execute(
    params: CheckFeatParameters,
    runner: Runner | null = null,
): CheckFeatOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CHECK_FEAT_METADATA);
    params = execution.params(params)
    const cargs = check_feat_cargs(params, execution)
    const ret = check_feat_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * checkFEAT
 *
 * Perform checks on FEAT analysis results.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param report_file Path to the HTML report
 * @param report_log_file Path to the HTML report log
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CheckFeatOutputs`).
 */
function check_feat(
    report_file: InputPathType,
    report_log_file: InputPathType,
    runner: Runner | null = null,
): CheckFeatOutputs {
    const params = check_feat_params(report_file, report_log_file)
    return check_feat_execute(params, runner);
}


export {
      CHECK_FEAT_METADATA,
      CheckFeatOutputs,
      check_feat,
      check_feat_execute,
      check_feat_params,
};
