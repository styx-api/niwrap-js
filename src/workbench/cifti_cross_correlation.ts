// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CIFTI_CROSS_CORRELATION_METADATA: Metadata = {
    id: "d6e5609483ce1b783c981ae6ed17a12d344a7123.boutiques",
    name: "cifti-cross-correlation",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface CiftiCrossCorrelationParameters {
    "__STYXTYPE__": "cifti-cross-correlation";
    "cifti_a": InputPathType;
    "cifti_b": InputPathType;
    "cifti_out": string;
    "opt_weights_weight_file"?: string | null | undefined;
    "opt_fisher_z": boolean;
    "opt_mem_limit_limit_gb"?: number | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "cifti-cross-correlation": cifti_cross_correlation_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "cifti-cross-correlation": cifti_cross_correlation_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `cifti_cross_correlation(...)`.
 *
 * @interface
 */
interface CiftiCrossCorrelationOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * output cifti file
     */
    cifti_out: OutputPathType;
}


function cifti_cross_correlation_params(
    cifti_a: InputPathType,
    cifti_b: InputPathType,
    cifti_out: string,
    opt_weights_weight_file: string | null = null,
    opt_fisher_z: boolean = false,
    opt_mem_limit_limit_gb: number | null = null,
): CiftiCrossCorrelationParameters {
    /**
     * Build parameters.
    
     * @param cifti_a first input cifti file
     * @param cifti_b second input cifti file
     * @param cifti_out output cifti file
     * @param opt_weights_weight_file specify column weights: text file containing one weight per column
     * @param opt_fisher_z apply fisher small z transform (ie, artanh) to correlation
     * @param opt_mem_limit_limit_gb restrict memory usage: memory limit in gigabytes
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "cifti-cross-correlation" as const,
        "cifti_a": cifti_a,
        "cifti_b": cifti_b,
        "cifti_out": cifti_out,
        "opt_fisher_z": opt_fisher_z,
    };
    if (opt_weights_weight_file !== null) {
        params["opt_weights_weight_file"] = opt_weights_weight_file;
    }
    if (opt_mem_limit_limit_gb !== null) {
        params["opt_mem_limit_limit_gb"] = opt_mem_limit_limit_gb;
    }
    return params;
}


function cifti_cross_correlation_cargs(
    params: CiftiCrossCorrelationParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-cifti-cross-correlation");
    cargs.push(execution.inputFile((params["cifti_a"] ?? null)));
    cargs.push(execution.inputFile((params["cifti_b"] ?? null)));
    cargs.push((params["cifti_out"] ?? null));
    if ((params["opt_weights_weight_file"] ?? null) !== null) {
        cargs.push(
            "-weights",
            (params["opt_weights_weight_file"] ?? null)
        );
    }
    if ((params["opt_fisher_z"] ?? null)) {
        cargs.push("-fisher-z");
    }
    if ((params["opt_mem_limit_limit_gb"] ?? null) !== null) {
        cargs.push(
            "-mem-limit",
            String((params["opt_mem_limit_limit_gb"] ?? null))
        );
    }
    return cargs;
}


function cifti_cross_correlation_outputs(
    params: CiftiCrossCorrelationParameters,
    execution: Execution,
): CiftiCrossCorrelationOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: CiftiCrossCorrelationOutputs = {
        root: execution.outputFile("."),
        cifti_out: execution.outputFile([(params["cifti_out"] ?? null)].join('')),
    };
    return ret;
}


function cifti_cross_correlation_execute(
    params: CiftiCrossCorrelationParameters,
    execution: Execution,
): CiftiCrossCorrelationOutputs {
    /**
     * Correlate a cifti file with another cifti file.
     * 
     * Correlates every row in <cifti-a> with every row in <cifti-b>.  The mapping along columns in <cifti-b> becomes the mapping along rows in the output.
     * 
     * When using the -fisher-z option, the output is NOT a Z-score, it is artanh(r), to do further math on this output, consider using -cifti-math.
     * 
     * Restricting the memory usage will make it calculate the output in chunks, by reading through <cifti-b> multiple times.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `CiftiCrossCorrelationOutputs`).
     */
    params = execution.params(params)
    const cargs = cifti_cross_correlation_cargs(params, execution)
    const ret = cifti_cross_correlation_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function cifti_cross_correlation(
    cifti_a: InputPathType,
    cifti_b: InputPathType,
    cifti_out: string,
    opt_weights_weight_file: string | null = null,
    opt_fisher_z: boolean = false,
    opt_mem_limit_limit_gb: number | null = null,
    runner: Runner | null = null,
): CiftiCrossCorrelationOutputs {
    /**
     * Correlate a cifti file with another cifti file.
     * 
     * Correlates every row in <cifti-a> with every row in <cifti-b>.  The mapping along columns in <cifti-b> becomes the mapping along rows in the output.
     * 
     * When using the -fisher-z option, the output is NOT a Z-score, it is artanh(r), to do further math on this output, consider using -cifti-math.
     * 
     * Restricting the memory usage will make it calculate the output in chunks, by reading through <cifti-b> multiple times.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param cifti_a first input cifti file
     * @param cifti_b second input cifti file
     * @param cifti_out output cifti file
     * @param opt_weights_weight_file specify column weights: text file containing one weight per column
     * @param opt_fisher_z apply fisher small z transform (ie, artanh) to correlation
     * @param opt_mem_limit_limit_gb restrict memory usage: memory limit in gigabytes
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `CiftiCrossCorrelationOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CIFTI_CROSS_CORRELATION_METADATA);
    const params = cifti_cross_correlation_params(cifti_a, cifti_b, cifti_out, opt_weights_weight_file, opt_fisher_z, opt_mem_limit_limit_gb)
    return cifti_cross_correlation_execute(params, execution);
}


export {
      CIFTI_CROSS_CORRELATION_METADATA,
      CiftiCrossCorrelationOutputs,
      CiftiCrossCorrelationParameters,
      cifti_cross_correlation,
      cifti_cross_correlation_params,
};
