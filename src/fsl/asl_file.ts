// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ASL_FILE_METADATA: Metadata = {
    id: "cbdbabdffdc0f831f4815b08ad995d7bf14f1cd6.boutiques",
    name: "asl_file",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface AslFileParameters {
    "__STYXTYPE__": "asl_file";
    "datafile": InputPathType;
    "ntis": number;
    "mask"?: InputPathType | null | undefined;
    "inblockform"?: "rpt" | "tis" | null | undefined;
    "inaslform"?: "diff" | "tc" | "ct" | "tcb" | "ctb" | null | undefined;
    "rpts"?: string | null | undefined;
    "pairs": boolean;
    "spairs": boolean;
    "diff": boolean;
    "surrdiff": boolean;
    "extrapolate": boolean;
    "neighbour"?: number | null | undefined;
    "pvgm"?: InputPathType | null | undefined;
    "pvwm"?: InputPathType | null | undefined;
    "kernel"?: number | null | undefined;
    "outfile": string;
    "outblockform"?: "rpt" | "tis" | null | undefined;
    "mean": boolean;
    "split"?: string | null | undefined;
    "epoch": boolean;
    "epoch_length"?: number | null | undefined;
    "epoch_overlap"?: number | null | undefined;
    "epoch_unit"?: "rpt" | "tis" | null | undefined;
    "deconv": boolean;
    "aif"?: InputPathType | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "asl_file": asl_file_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "asl_file": asl_file_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `asl_file(...)`.
 *
 * @interface
 */
interface AslFileOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Primary output data file
     */
    output_data: OutputPathType;
    /**
     * Mean output data file
     */
    output_mean: OutputPathType;
}


function asl_file_params(
    datafile: InputPathType,
    ntis: number,
    outfile: string,
    mask: InputPathType | null = null,
    inblockform: "rpt" | "tis" | null = null,
    inaslform: "diff" | "tc" | "ct" | "tcb" | "ctb" | null = "diff",
    rpts: string | null = null,
    pairs: boolean = false,
    spairs: boolean = false,
    diff: boolean = false,
    surrdiff: boolean = false,
    extrapolate: boolean = false,
    neighbour: number | null = null,
    pvgm: InputPathType | null = null,
    pvwm: InputPathType | null = null,
    kernel: number | null = null,
    outblockform: "rpt" | "tis" | null = null,
    mean: boolean = false,
    split: string | null = null,
    epoch: boolean = false,
    epoch_length: number | null = null,
    epoch_overlap: number | null = null,
    epoch_unit: "rpt" | "tis" | null = null,
    deconv: boolean = false,
    aif: InputPathType | null = null,
): AslFileParameters {
    /**
     * Build parameters.
    
     * @param datafile ASL data file
     * @param ntis Number of TIs in the file
     * @param outfile Output data file
     * @param mask Mask file
     * @param inblockform Input block format
     * @param inaslform ASL data form
     * @param rpts Number of repeats at each TI as comma separated list, not required if the number of repeats is same for all TIs  (only for use with --ibf=tis)
     * @param pairs Data contains adjacent pairs of measurements (e.g. Tag, Control) DEPRECATED use --iaf instead
     * @param spairs Split the pairs within the data, e.g. to separate tag and control images in output
     * @param diff Take the difference between the pairs, i.e., Tag-control difference
     * @param surrdiff Do surround subtraction on the pairs
     * @param extrapolate Option to extrapolate the edge of the brain to fix the artefact on the edge of the brain
     * @param neighbour Neighbour size for extrapolation, must be an odd number between 3 and 9. Default: 5
     * @param pvgm GM partial volume map
     * @param pvwm WM partial volume map
     * @param kernel Kernel size (in voxels) of partial volume correction, must be an odd number between 3 and 9. Default: 5
     * @param outblockform Output block format
     * @param mean Output ASL data having taken mean at each TI to file
     * @param split Split data into separate files for each TI, specify filename root
     * @param epoch Output epochs of ASL data (takes mean at each TI within the epoch)
     * @param epoch_length Length of epochs in number of repeats
     * @param epoch_overlap Amount of overlap between epochs in number of repeats
     * @param epoch_unit Epochs to be determined over
     * @param deconv Deconvolution of data with arterial input functions
     * @param aif Arterial input functions for deconvolution (4D volume, one aif for each voxel within mask)
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "asl_file" as const,
        "datafile": datafile,
        "ntis": ntis,
        "pairs": pairs,
        "spairs": spairs,
        "diff": diff,
        "surrdiff": surrdiff,
        "extrapolate": extrapolate,
        "outfile": outfile,
        "mean": mean,
        "epoch": epoch,
        "deconv": deconv,
    };
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (inblockform !== null) {
        params["inblockform"] = inblockform;
    }
    if (inaslform !== null) {
        params["inaslform"] = inaslform;
    }
    if (rpts !== null) {
        params["rpts"] = rpts;
    }
    if (neighbour !== null) {
        params["neighbour"] = neighbour;
    }
    if (pvgm !== null) {
        params["pvgm"] = pvgm;
    }
    if (pvwm !== null) {
        params["pvwm"] = pvwm;
    }
    if (kernel !== null) {
        params["kernel"] = kernel;
    }
    if (outblockform !== null) {
        params["outblockform"] = outblockform;
    }
    if (split !== null) {
        params["split"] = split;
    }
    if (epoch_length !== null) {
        params["epoch_length"] = epoch_length;
    }
    if (epoch_overlap !== null) {
        params["epoch_overlap"] = epoch_overlap;
    }
    if (epoch_unit !== null) {
        params["epoch_unit"] = epoch_unit;
    }
    if (aif !== null) {
        params["aif"] = aif;
    }
    return params;
}


function asl_file_cargs(
    params: AslFileParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("asl_file");
    cargs.push(
        "--data",
        execution.inputFile((params["datafile"] ?? null))
    );
    cargs.push(
        "--ntis",
        String((params["ntis"] ?? null))
    );
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "--mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["inblockform"] ?? null) !== null) {
        cargs.push(
            "--ibf",
            (params["inblockform"] ?? null)
        );
    }
    if ((params["inaslform"] ?? null) !== null) {
        cargs.push(
            "--iaf",
            (params["inaslform"] ?? null)
        );
    }
    if ((params["rpts"] ?? null) !== null) {
        cargs.push(
            "--rpts",
            (params["rpts"] ?? null)
        );
    }
    if ((params["pairs"] ?? null)) {
        cargs.push("--pairs");
    }
    if ((params["spairs"] ?? null)) {
        cargs.push("--spairs");
    }
    if ((params["diff"] ?? null)) {
        cargs.push("--diff");
    }
    if ((params["surrdiff"] ?? null)) {
        cargs.push("--surrdiff");
    }
    if ((params["extrapolate"] ?? null)) {
        cargs.push("--extrapolate");
    }
    if ((params["neighbour"] ?? null) !== null) {
        cargs.push(
            "--neighbour",
            String((params["neighbour"] ?? null))
        );
    }
    if ((params["pvgm"] ?? null) !== null) {
        cargs.push(
            "--pvgm",
            execution.inputFile((params["pvgm"] ?? null))
        );
    }
    if ((params["pvwm"] ?? null) !== null) {
        cargs.push(
            "--pvwm",
            execution.inputFile((params["pvwm"] ?? null))
        );
    }
    if ((params["kernel"] ?? null) !== null) {
        cargs.push(
            "--kernel",
            String((params["kernel"] ?? null))
        );
    }
    cargs.push(
        "--out",
        (params["outfile"] ?? null)
    );
    if ((params["outblockform"] ?? null) !== null) {
        cargs.push(
            "--obf",
            (params["outblockform"] ?? null)
        );
    }
    if ((params["mean"] ?? null)) {
        cargs.push("--mean");
    }
    if ((params["split"] ?? null) !== null) {
        cargs.push(
            "--split",
            (params["split"] ?? null)
        );
    }
    if ((params["epoch"] ?? null)) {
        cargs.push("--epoch");
    }
    if ((params["epoch_length"] ?? null) !== null) {
        cargs.push(
            "--elen",
            String((params["epoch_length"] ?? null))
        );
    }
    if ((params["epoch_overlap"] ?? null) !== null) {
        cargs.push(
            "--eol",
            String((params["epoch_overlap"] ?? null))
        );
    }
    if ((params["epoch_unit"] ?? null) !== null) {
        cargs.push(
            "--eunit",
            (params["epoch_unit"] ?? null)
        );
    }
    if ((params["deconv"] ?? null)) {
        cargs.push("--deconv");
    }
    if ((params["aif"] ?? null) !== null) {
        cargs.push(
            "--aif",
            execution.inputFile((params["aif"] ?? null))
        );
    }
    return cargs;
}


function asl_file_outputs(
    params: AslFileParameters,
    execution: Execution,
): AslFileOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: AslFileOutputs = {
        root: execution.outputFile("."),
        output_data: execution.outputFile([(params["outfile"] ?? null), ".nii.gz"].join('')),
        output_mean: execution.outputFile([(params["outfile"] ?? null), "_mean.nii.gz"].join('')),
    };
    return ret;
}


function asl_file_execute(
    params: AslFileParameters,
    execution: Execution,
): AslFileOutputs {
    /**
     * ASL data manipulation tool for FSL.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `AslFileOutputs`).
     */
    params = execution.params(params)
    const cargs = asl_file_cargs(params, execution)
    const ret = asl_file_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function asl_file(
    datafile: InputPathType,
    ntis: number,
    outfile: string,
    mask: InputPathType | null = null,
    inblockform: "rpt" | "tis" | null = null,
    inaslform: "diff" | "tc" | "ct" | "tcb" | "ctb" | null = "diff",
    rpts: string | null = null,
    pairs: boolean = false,
    spairs: boolean = false,
    diff: boolean = false,
    surrdiff: boolean = false,
    extrapolate: boolean = false,
    neighbour: number | null = null,
    pvgm: InputPathType | null = null,
    pvwm: InputPathType | null = null,
    kernel: number | null = null,
    outblockform: "rpt" | "tis" | null = null,
    mean: boolean = false,
    split: string | null = null,
    epoch: boolean = false,
    epoch_length: number | null = null,
    epoch_overlap: number | null = null,
    epoch_unit: "rpt" | "tis" | null = null,
    deconv: boolean = false,
    aif: InputPathType | null = null,
    runner: Runner | null = null,
): AslFileOutputs {
    /**
     * ASL data manipulation tool for FSL.
     * 
     * Author: FMRIB Analysis Group, University of Oxford
     * 
     * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
     * @param datafile ASL data file
     * @param ntis Number of TIs in the file
     * @param outfile Output data file
     * @param mask Mask file
     * @param inblockform Input block format
     * @param inaslform ASL data form
     * @param rpts Number of repeats at each TI as comma separated list, not required if the number of repeats is same for all TIs  (only for use with --ibf=tis)
     * @param pairs Data contains adjacent pairs of measurements (e.g. Tag, Control) DEPRECATED use --iaf instead
     * @param spairs Split the pairs within the data, e.g. to separate tag and control images in output
     * @param diff Take the difference between the pairs, i.e., Tag-control difference
     * @param surrdiff Do surround subtraction on the pairs
     * @param extrapolate Option to extrapolate the edge of the brain to fix the artefact on the edge of the brain
     * @param neighbour Neighbour size for extrapolation, must be an odd number between 3 and 9. Default: 5
     * @param pvgm GM partial volume map
     * @param pvwm WM partial volume map
     * @param kernel Kernel size (in voxels) of partial volume correction, must be an odd number between 3 and 9. Default: 5
     * @param outblockform Output block format
     * @param mean Output ASL data having taken mean at each TI to file
     * @param split Split data into separate files for each TI, specify filename root
     * @param epoch Output epochs of ASL data (takes mean at each TI within the epoch)
     * @param epoch_length Length of epochs in number of repeats
     * @param epoch_overlap Amount of overlap between epochs in number of repeats
     * @param epoch_unit Epochs to be determined over
     * @param deconv Deconvolution of data with arterial input functions
     * @param aif Arterial input functions for deconvolution (4D volume, one aif for each voxel within mask)
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `AslFileOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ASL_FILE_METADATA);
    const params = asl_file_params(datafile, ntis, outfile, mask, inblockform, inaslform, rpts, pairs, spairs, diff, surrdiff, extrapolate, neighbour, pvgm, pvwm, kernel, outblockform, mean, split, epoch, epoch_length, epoch_overlap, epoch_unit, deconv, aif)
    return asl_file_execute(params, execution);
}


export {
      ASL_FILE_METADATA,
      AslFileOutputs,
      AslFileParameters,
      asl_file,
      asl_file_params,
};
