// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TEXTURE_COOCCURRENCE_FEATURES_METADATA: Metadata = {
    id: "36fd8d98a5b73dfdbef9caea9f2224df1cbd0850.boutiques",
    name: "TextureCooccurrenceFeatures",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface TextureCooccurrenceFeaturesParameters {
    "@type"?: "ants/TextureCooccurrenceFeatures";
    "image_dimension": number;
    "input_image": InputPathType;
    "number_of_bins_per_axis"?: number | null | undefined;
    "mask_image"?: InputPathType | null | undefined;
    "mask_label"?: number | null | undefined;
}
type TextureCooccurrenceFeaturesParametersTagged = Required<Pick<TextureCooccurrenceFeaturesParameters, '@type'>> & TextureCooccurrenceFeaturesParameters;


/**
 * Output object returned when calling `TextureCooccurrenceFeaturesParameters(...)`.
 *
 * @interface
 */
interface TextureCooccurrenceFeaturesOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output file containing the calculated texture co-occurrence features.
     */
    features_output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param image_dimension The dimensionality of the input image, e.g., 2 for 2D images, 3 for 3D images.
 * @param input_image The input image file for which texture co-occurrence features will be calculated.
 * @param number_of_bins_per_axis The number of bins per axis to be used in the histogram for texture calculation. Defaults to 256.
 * @param mask_image Optional mask image to specify the regions of interest in the input image for which features will be calculated.
 * @param mask_label Label value in the mask image to specify which region to process. Defaults to 1.
 *
 * @returns Parameter dictionary
 */
function texture_cooccurrence_features_params(
    image_dimension: number,
    input_image: InputPathType,
    number_of_bins_per_axis: number | null = null,
    mask_image: InputPathType | null = null,
    mask_label: number | null = null,
): TextureCooccurrenceFeaturesParametersTagged {
    const params = {
        "@type": "ants/TextureCooccurrenceFeatures" as const,
        "image_dimension": image_dimension,
        "input_image": input_image,
    };
    if (number_of_bins_per_axis !== null) {
        params["number_of_bins_per_axis"] = number_of_bins_per_axis;
    }
    if (mask_image !== null) {
        params["mask_image"] = mask_image;
    }
    if (mask_label !== null) {
        params["mask_label"] = mask_label;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function texture_cooccurrence_features_cargs(
    params: TextureCooccurrenceFeaturesParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("TextureCooccurrenceFeatures");
    cargs.push(String((params["image_dimension"] ?? null)));
    cargs.push(execution.inputFile((params["input_image"] ?? null)));
    if ((params["number_of_bins_per_axis"] ?? null) !== null) {
        cargs.push(String((params["number_of_bins_per_axis"] ?? null)));
    }
    if ((params["mask_image"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["mask_image"] ?? null)));
    }
    if ((params["mask_label"] ?? null) !== null) {
        cargs.push(String((params["mask_label"] ?? null)));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function texture_cooccurrence_features_outputs(
    params: TextureCooccurrenceFeaturesParameters,
    execution: Execution,
): TextureCooccurrenceFeaturesOutputs {
    const ret: TextureCooccurrenceFeaturesOutputs = {
        root: execution.outputFile("."),
        features_output: execution.outputFile([path.basename((params["input_image"] ?? null)), "_features.txt"].join('')),
    };
    return ret;
}


/**
 * TextureCooccurrenceFeatures
 *
 * Calculates texture co-occurrence features such as Energy, Entropy, Inverse Difference Moment, Inertia, Cluster Shade, and Cluster Prominence from an input image.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TextureCooccurrenceFeaturesOutputs`).
 */
function texture_cooccurrence_features_execute(
    params: TextureCooccurrenceFeaturesParameters,
    runner: Runner | null = null,
): TextureCooccurrenceFeaturesOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TEXTURE_COOCCURRENCE_FEATURES_METADATA);
    params = execution.params(params)
    const cargs = texture_cooccurrence_features_cargs(params, execution)
    const ret = texture_cooccurrence_features_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * TextureCooccurrenceFeatures
 *
 * Calculates texture co-occurrence features such as Energy, Entropy, Inverse Difference Moment, Inertia, Cluster Shade, and Cluster Prominence from an input image.
 *
 * Author: ANTs Developers
 *
 * URL: https://github.com/ANTsX/ANTs
 *
 * @param image_dimension The dimensionality of the input image, e.g., 2 for 2D images, 3 for 3D images.
 * @param input_image The input image file for which texture co-occurrence features will be calculated.
 * @param number_of_bins_per_axis The number of bins per axis to be used in the histogram for texture calculation. Defaults to 256.
 * @param mask_image Optional mask image to specify the regions of interest in the input image for which features will be calculated.
 * @param mask_label Label value in the mask image to specify which region to process. Defaults to 1.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TextureCooccurrenceFeaturesOutputs`).
 */
function texture_cooccurrence_features(
    image_dimension: number,
    input_image: InputPathType,
    number_of_bins_per_axis: number | null = null,
    mask_image: InputPathType | null = null,
    mask_label: number | null = null,
    runner: Runner | null = null,
): TextureCooccurrenceFeaturesOutputs {
    const params = texture_cooccurrence_features_params(image_dimension, input_image, number_of_bins_per_axis, mask_image, mask_label)
    return texture_cooccurrence_features_execute(params, runner);
}


export {
      TEXTURE_COOCCURRENCE_FEATURES_METADATA,
      TextureCooccurrenceFeaturesOutputs,
      texture_cooccurrence_features,
      texture_cooccurrence_features_execute,
      texture_cooccurrence_features_params,
};
