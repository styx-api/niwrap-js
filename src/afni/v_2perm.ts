// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_2PERM_METADATA: Metadata = {
    id: "540f8e1f8b85823bcf0dba52846ee4ef33340eca.boutiques",
    name: "2perm",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V2permParameters {
    "@type"?: "afni/2perm";
    "prefix"?: string | null | undefined;
    "comma": boolean;
    "bottom_int": number;
    "top_int": number;
    "subset1_size"?: number | null | undefined;
    "subset2_size"?: number | null | undefined;
}
type V2permParametersTagged = Required<Pick<V2permParameters, '@type'>> & V2permParameters;


/**
 * Output object returned when calling `V2permParameters(...)`.
 *
 * @interface
 */
interface V2permOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * First subset output file
     */
    file_a: OutputPathType | null;
    /**
     * Second subset output file
     */
    file_b: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param bottom_int Bottom integer of the range
 * @param top_int Top integer of the range
 * @param prefix Prefix for output files (default 'AFNIroolz')
 * @param comma Write each file as a single row of comma-separated numbers
 * @param subset1_size Size of the first subset (optional, default is half the range)
 * @param subset2_size Size of the second subset (optional, default is half the range)
 *
 * @returns Parameter dictionary
 */
function v_2perm_params(
    bottom_int: number,
    top_int: number,
    prefix: string | null = null,
    comma: boolean = false,
    subset1_size: number | null = null,
    subset2_size: number | null = null,
): V2permParametersTagged {
    const params = {
        "@type": "afni/2perm" as const,
        "comma": comma,
        "bottom_int": bottom_int,
        "top_int": top_int,
    };
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (subset1_size !== null) {
        params["subset1_size"] = subset1_size;
    }
    if (subset2_size !== null) {
        params["subset2_size"] = subset2_size;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_2perm_cargs(
    params: V2permParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("2perm");
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["comma"] ?? false)) {
        cargs.push("-comma");
    }
    cargs.push(String((params["bottom_int"] ?? null)));
    cargs.push(String((params["top_int"] ?? null)));
    if ((params["subset1_size"] ?? null) !== null) {
        cargs.push(String((params["subset1_size"] ?? null)));
    }
    if ((params["subset2_size"] ?? null) !== null) {
        cargs.push(String((params["subset2_size"] ?? null)));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_2perm_outputs(
    params: V2permParameters,
    execution: Execution,
): V2permOutputs {
    const ret: V2permOutputs = {
        root: execution.outputFile("."),
        file_a: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "_A"].join('')) : null,
        file_b: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "_B"].join('')) : null,
    };
    return ret;
}


/**
 * 2perm
 *
 * Generates two random non-overlapping subsets of a given set of integers.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V2permOutputs`).
 */
function v_2perm_execute(
    params: V2permParameters,
    runner: Runner | null = null,
): V2permOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_2PERM_METADATA);
    params = execution.params(params)
    const cargs = v_2perm_cargs(params, execution)
    const ret = v_2perm_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 2perm
 *
 * Generates two random non-overlapping subsets of a given set of integers.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param bottom_int Bottom integer of the range
 * @param top_int Top integer of the range
 * @param prefix Prefix for output files (default 'AFNIroolz')
 * @param comma Write each file as a single row of comma-separated numbers
 * @param subset1_size Size of the first subset (optional, default is half the range)
 * @param subset2_size Size of the second subset (optional, default is half the range)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V2permOutputs`).
 */
function v_2perm(
    bottom_int: number,
    top_int: number,
    prefix: string | null = null,
    comma: boolean = false,
    subset1_size: number | null = null,
    subset2_size: number | null = null,
    runner: Runner | null = null,
): V2permOutputs {
    const params = v_2perm_params(bottom_int, top_int, prefix, comma, subset1_size, subset2_size)
    return v_2perm_execute(params, runner);
}


export {
      V2permOutputs,
      V_2PERM_METADATA,
      v_2perm,
      v_2perm_execute,
      v_2perm_params,
};
