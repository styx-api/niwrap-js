// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_AND_METADATA: Metadata = {
    id: "fc9c157fa97aee9cd814998f22d0f65be168bad4.boutiques",
    name: "mri_and",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriAndParameters {
    "@type": "freesurfer.mri_and";
    "input_files": Array<InputPathType>;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_and": mri_and_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_and(...)`.
 *
 * @interface
 */
interface MriAndOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_files Input volume files
 *
 * @returns Parameter dictionary
 */
function mri_and_params(
    input_files: Array<InputPathType>,
): MriAndParameters {
    const params = {
        "@type": "freesurfer.mri_and" as const,
        "input_files": input_files,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_and_cargs(
    params: MriAndParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_and");
    cargs.push(...(params["input_files"] ?? null).map(f => execution.inputFile(f)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_and_outputs(
    params: MriAndParameters,
    execution: Execution,
): MriAndOutputs {
    const ret: MriAndOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Performs a logical voxel-wise AND on a series of volumes.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriAndOutputs`).
 */
function mri_and_execute(
    params: MriAndParameters,
    runner: Runner | null = null,
): MriAndOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_AND_METADATA);
    params = execution.params(params)
    const cargs = mri_and_cargs(params, execution)
    const ret = mri_and_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Performs a logical voxel-wise AND on a series of volumes.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_files Input volume files
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriAndOutputs`).
 */
function mri_and(
    input_files: Array<InputPathType>,
    runner: Runner | null = null,
): MriAndOutputs {
    const params = mri_and_params(input_files)
    return mri_and_execute(params, runner);
}


export {
      MRI_AND_METADATA,
      MriAndOutputs,
      MriAndParameters,
      mri_and,
      mri_and_execute,
      mri_and_params,
};
