// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const VOLUME_TFCE_METADATA: Metadata = {
    id: "58f4b90d8d17a205f671b8071e2175a9a3c8e266.boutiques",
    name: "volume-tfce",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface VolumeTfcePresmoothParameters {
    "__STYXTYPE__": "presmooth";
    "kernel": number;
    "opt_fwhm": boolean;
}


interface VolumeTfceParametersParameters {
    "__STYXTYPE__": "parameters";
    "e": number;
    "h": number;
}


interface VolumeTfceParameters {
    "__STYXTYPE__": "volume-tfce";
    "volume_in": InputPathType;
    "volume_out": string;
    "presmooth"?: VolumeTfcePresmoothParameters | null | undefined;
    "opt_roi_roi_volume"?: InputPathType | null | undefined;
    "parameters"?: VolumeTfceParametersParameters | null | undefined;
    "opt_subvolume_subvolume"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "volume-tfce": volume_tfce_cargs,
        "presmooth": volume_tfce_presmooth_cargs,
        "parameters": volume_tfce_parameters_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "volume-tfce": volume_tfce_outputs,
    };
    return outputsFuncs[t];
}


function volume_tfce_presmooth_params(
    kernel: number,
    opt_fwhm: boolean = false,
): VolumeTfcePresmoothParameters {
    /**
     * Build parameters.
    
     * @param kernel the size of the gaussian smoothing kernel in mm, as sigma by default
     * @param opt_fwhm smoothing kernel size is FWHM, not sigma
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "presmooth" as const,
        "kernel": kernel,
        "opt_fwhm": opt_fwhm,
    };
    return params;
}


function volume_tfce_presmooth_cargs(
    params: VolumeTfcePresmoothParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("-presmooth");
    cargs.push(String((params["kernel"] ?? null)));
    if ((params["opt_fwhm"] ?? null)) {
        cargs.push("-fwhm");
    }
    return cargs;
}


function volume_tfce_parameters_params(
    e: number,
    h: number,
): VolumeTfceParametersParameters {
    /**
     * Build parameters.
    
     * @param e exponent for cluster volume (default 0.5)
     * @param h exponent for threshold value (default 2.0)
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "parameters" as const,
        "e": e,
        "h": h,
    };
    return params;
}


function volume_tfce_parameters_cargs(
    params: VolumeTfceParametersParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("-parameters");
    cargs.push(String((params["e"] ?? null)));
    cargs.push(String((params["h"] ?? null)));
    return cargs;
}


/**
 * Output object returned when calling `volume_tfce(...)`.
 *
 * @interface
 */
interface VolumeTfceOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output volume
     */
    volume_out: OutputPathType;
}


function volume_tfce_params(
    volume_in: InputPathType,
    volume_out: string,
    presmooth: VolumeTfcePresmoothParameters | null = null,
    opt_roi_roi_volume: InputPathType | null = null,
    parameters: VolumeTfceParametersParameters | null = null,
    opt_subvolume_subvolume: string | null = null,
): VolumeTfceParameters {
    /**
     * Build parameters.
    
     * @param volume_in the volume to run TFCE on
     * @param volume_out the output volume
     * @param presmooth smooth the volume before running TFCE
     * @param opt_roi_roi_volume select a region of interest to run TFCE on: the area to run TFCE on, as a volume
     * @param parameters set parameters for TFCE integral
     * @param opt_subvolume_subvolume select a single subvolume: the subvolume number or name
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "volume-tfce" as const,
        "volume_in": volume_in,
        "volume_out": volume_out,
    };
    if (presmooth !== null) {
        params["presmooth"] = presmooth;
    }
    if (opt_roi_roi_volume !== null) {
        params["opt_roi_roi_volume"] = opt_roi_roi_volume;
    }
    if (parameters !== null) {
        params["parameters"] = parameters;
    }
    if (opt_subvolume_subvolume !== null) {
        params["opt_subvolume_subvolume"] = opt_subvolume_subvolume;
    }
    return params;
}


function volume_tfce_cargs(
    params: VolumeTfceParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-volume-tfce");
    cargs.push(execution.inputFile((params["volume_in"] ?? null)));
    cargs.push((params["volume_out"] ?? null));
    if ((params["presmooth"] ?? null) !== null) {
        cargs.push(...dynCargs((params["presmooth"] ?? null).__STYXTYPE__)((params["presmooth"] ?? null), execution));
    }
    if ((params["opt_roi_roi_volume"] ?? null) !== null) {
        cargs.push(
            "-roi",
            execution.inputFile((params["opt_roi_roi_volume"] ?? null))
        );
    }
    if ((params["parameters"] ?? null) !== null) {
        cargs.push(...dynCargs((params["parameters"] ?? null).__STYXTYPE__)((params["parameters"] ?? null), execution));
    }
    if ((params["opt_subvolume_subvolume"] ?? null) !== null) {
        cargs.push(
            "-subvolume",
            (params["opt_subvolume_subvolume"] ?? null)
        );
    }
    return cargs;
}


function volume_tfce_outputs(
    params: VolumeTfceParameters,
    execution: Execution,
): VolumeTfceOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: VolumeTfceOutputs = {
        root: execution.outputFile("."),
        volume_out: execution.outputFile([(params["volume_out"] ?? null)].join('')),
    };
    return ret;
}


function volume_tfce_execute(
    params: VolumeTfceParameters,
    execution: Execution,
): VolumeTfceOutputs {
    /**
     * Do tfce on a volume file.
     * 
     * This command does not do any statistical analysis.  Please use something like PALM if you are just trying to do statistics on your data.
     * 
     * Threshold-free cluster enhancement is a method to increase the relative value of regions that would form clusters in a standard thresholding test.  This is accomplished by evaluating the integral of:
     * 
     * e(h, p)^E * h^H * dh
     * 
     * at each voxel p, where h ranges from 0 to the maximum value in the data, and e(h, p) is the extent of the cluster containing voxel p at threshold h.  Negative values are similarly enhanced by negating the data, running the same process, and negating the result.
     * 
     * This method is explained in: Smith SM, Nichols TE., "Threshold-free cluster enhancement: addressing problems of smoothing, threshold dependence and localisation in cluster inference." Neuroimage. 2009 Jan 1;44(1):83-98. PMID: 18501637.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `VolumeTfceOutputs`).
     */
    params = execution.params(params)
    const cargs = volume_tfce_cargs(params, execution)
    const ret = volume_tfce_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function volume_tfce(
    volume_in: InputPathType,
    volume_out: string,
    presmooth: VolumeTfcePresmoothParameters | null = null,
    opt_roi_roi_volume: InputPathType | null = null,
    parameters: VolumeTfceParametersParameters | null = null,
    opt_subvolume_subvolume: string | null = null,
    runner: Runner | null = null,
): VolumeTfceOutputs {
    /**
     * Do tfce on a volume file.
     * 
     * This command does not do any statistical analysis.  Please use something like PALM if you are just trying to do statistics on your data.
     * 
     * Threshold-free cluster enhancement is a method to increase the relative value of regions that would form clusters in a standard thresholding test.  This is accomplished by evaluating the integral of:
     * 
     * e(h, p)^E * h^H * dh
     * 
     * at each voxel p, where h ranges from 0 to the maximum value in the data, and e(h, p) is the extent of the cluster containing voxel p at threshold h.  Negative values are similarly enhanced by negating the data, running the same process, and negating the result.
     * 
     * This method is explained in: Smith SM, Nichols TE., "Threshold-free cluster enhancement: addressing problems of smoothing, threshold dependence and localisation in cluster inference." Neuroimage. 2009 Jan 1;44(1):83-98. PMID: 18501637.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param volume_in the volume to run TFCE on
     * @param volume_out the output volume
     * @param presmooth smooth the volume before running TFCE
     * @param opt_roi_roi_volume select a region of interest to run TFCE on: the area to run TFCE on, as a volume
     * @param parameters set parameters for TFCE integral
     * @param opt_subvolume_subvolume select a single subvolume: the subvolume number or name
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `VolumeTfceOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(VOLUME_TFCE_METADATA);
    const params = volume_tfce_params(volume_in, volume_out, presmooth, opt_roi_roi_volume, parameters, opt_subvolume_subvolume)
    return volume_tfce_execute(params, execution);
}


export {
      VOLUME_TFCE_METADATA,
      VolumeTfceOutputs,
      VolumeTfceParameters,
      VolumeTfceParametersParameters,
      VolumeTfcePresmoothParameters,
      volume_tfce,
      volume_tfce_parameters_params,
      volume_tfce_params,
      volume_tfce_presmooth_params,
};
