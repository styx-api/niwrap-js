// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TRK_TOOLS_METADATA: Metadata = {
    id: "4dc371140c0aeb4d9bc3aacbdf63d35a219d2dd8.boutiques",
    name: "trk_tools",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface TrkToolsParameters {
    "__STYXTYPE__": "trk_tools";
    "reference_image": InputPathType;
    "input_trk": InputPathType;
    "output_trk"?: string | null | undefined;
    "output_image"?: string | null | undefined;
    "update_header": boolean;
    "output_vtk"?: string | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "trk_tools": trk_tools_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "trk_tools": trk_tools_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `trk_tools(...)`.
 *
 * @interface
 */
interface TrkToolsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The processed output TRK file
     */
    trk_output_file: OutputPathType | null;
    /**
     * Image exported from TRK file
     */
    image_output_file: OutputPathType | null;
    /**
     * VTK file containing streamlines
     */
    vtk_output_file: OutputPathType | null;
}


function trk_tools_params(
    reference_image: InputPathType,
    input_trk: InputPathType,
    output_trk: string | null = null,
    output_image: string | null = null,
    update_header: boolean = false,
    output_vtk: string | null = null,
): TrkToolsParameters {
    /**
     * Build parameters.
    
     * @param reference_image Reference image for TRK processing
     * @param input_trk Input TRK file to be processed
     * @param output_trk Output TRK file
     * @param output_image Export TRK into an image
     * @param update_header Update TRK header with reference image
     * @param output_vtk Output streamlines in VTK format
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "trk_tools" as const,
        "reference_image": reference_image,
        "input_trk": input_trk,
        "update_header": update_header,
    };
    if (output_trk !== null) {
        params["output_trk"] = output_trk;
    }
    if (output_image !== null) {
        params["output_image"] = output_image;
    }
    if (output_vtk !== null) {
        params["output_vtk"] = output_vtk;
    }
    return params;
}


function trk_tools_cargs(
    params: TrkToolsParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("trk_tools");
    cargs.push(
        "-i",
        execution.inputFile((params["reference_image"] ?? null))
    );
    cargs.push(
        "-f",
        execution.inputFile((params["input_trk"] ?? null))
    );
    if ((params["output_trk"] ?? null) !== null) {
        cargs.push(
            "-o",
            (params["output_trk"] ?? null)
        );
    }
    if ((params["output_image"] ?? null) !== null) {
        cargs.push(
            "-e",
            (params["output_image"] ?? null)
        );
    }
    if ((params["update_header"] ?? null)) {
        cargs.push("-u");
    }
    if ((params["output_vtk"] ?? null) !== null) {
        cargs.push(
            "-v",
            (params["output_vtk"] ?? null)
        );
    }
    return cargs;
}


function trk_tools_outputs(
    params: TrkToolsParameters,
    execution: Execution,
): TrkToolsOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: TrkToolsOutputs = {
        root: execution.outputFile("."),
        trk_output_file: ((params["output_trk"] ?? null) !== null) ? execution.outputFile([(params["output_trk"] ?? null)].join('')) : null,
        image_output_file: ((params["output_image"] ?? null) !== null) ? execution.outputFile([(params["output_image"] ?? null)].join('')) : null,
        vtk_output_file: ((params["output_vtk"] ?? null) !== null) ? execution.outputFile([(params["output_vtk"] ?? null)].join('')) : null,
    };
    return ret;
}


function trk_tools_execute(
    params: TrkToolsParameters,
    execution: Execution,
): TrkToolsOutputs {
    /**
     * Tool for processing TRK files.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `TrkToolsOutputs`).
     */
    params = execution.params(params)
    const cargs = trk_tools_cargs(params, execution)
    const ret = trk_tools_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function trk_tools(
    reference_image: InputPathType,
    input_trk: InputPathType,
    output_trk: string | null = null,
    output_image: string | null = null,
    update_header: boolean = false,
    output_vtk: string | null = null,
    runner: Runner | null = null,
): TrkToolsOutputs {
    /**
     * Tool for processing TRK files.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param reference_image Reference image for TRK processing
     * @param input_trk Input TRK file to be processed
     * @param output_trk Output TRK file
     * @param output_image Export TRK into an image
     * @param update_header Update TRK header with reference image
     * @param output_vtk Output streamlines in VTK format
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `TrkToolsOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TRK_TOOLS_METADATA);
    const params = trk_tools_params(reference_image, input_trk, output_trk, output_image, update_header, output_vtk)
    return trk_tools_execute(params, execution);
}


export {
      TRK_TOOLS_METADATA,
      TrkToolsOutputs,
      TrkToolsParameters,
      trk_tools,
      trk_tools_params,
};
