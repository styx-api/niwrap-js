// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const APSEARCH_METADATA: Metadata = {
    id: "cd2ec5b2b99155700676e65bd9c04ed3a27a09dc.boutiques",
    name: "apsearch",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface ApsearchParameters {
    "__STYXTYPE__": "apsearch";
    "search_term": string;
    "file_output"?: string | null | undefined;
    "verbose": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "apsearch": apsearch_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "apsearch": apsearch_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `apsearch(...)`.
 *
 * @interface
 */
interface ApsearchOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * File containing search results
     */
    output_file: OutputPathType | null;
}


function apsearch_params(
    search_term: string,
    file_output: string | null = null,
    verbose: boolean = false,
): ApsearchParameters {
    /**
     * Build parameters.
    
     * @param search_term Term to search
     * @param file_output File to save the search results
     * @param verbose Print detailed information during search
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "apsearch" as const,
        "search_term": search_term,
        "verbose": verbose,
    };
    if (file_output !== null) {
        params["file_output"] = file_output;
    }
    return params;
}


function apsearch_cargs(
    params: ApsearchParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("apsearch");
    cargs.push((params["search_term"] ?? null));
    if ((params["file_output"] ?? null) !== null) {
        cargs.push((params["file_output"] ?? null));
    }
    if ((params["verbose"] ?? null)) {
        cargs.push("-v");
    }
    return cargs;
}


function apsearch_outputs(
    params: ApsearchParameters,
    execution: Execution,
): ApsearchOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: ApsearchOutputs = {
        root: execution.outputFile("."),
        output_file: ((params["file_output"] ?? null) !== null) ? execution.outputFile([(params["file_output"] ?? null)].join('')) : null,
    };
    return ret;
}


function apsearch_execute(
    params: ApsearchParameters,
    execution: Execution,
): ApsearchOutputs {
    /**
     * A tool for searching applications.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `ApsearchOutputs`).
     */
    params = execution.params(params)
    const cargs = apsearch_cargs(params, execution)
    const ret = apsearch_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function apsearch(
    search_term: string,
    file_output: string | null = null,
    verbose: boolean = false,
    runner: Runner | null = null,
): ApsearchOutputs {
    /**
     * A tool for searching applications.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param search_term Term to search
     * @param file_output File to save the search results
     * @param verbose Print detailed information during search
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `ApsearchOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(APSEARCH_METADATA);
    const params = apsearch_params(search_term, file_output, verbose)
    return apsearch_execute(params, execution);
}


export {
      APSEARCH_METADATA,
      ApsearchOutputs,
      ApsearchParameters,
      apsearch,
      apsearch_params,
};
