// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_SAMPLE_PARC_METADATA: Metadata = {
    id: "630f4107826cbf1f372159b4ffd743acb835e4cc.boutiques",
    name: "mris_sample_parc",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisSampleParcParameters {
    "@type": "freesurfer.mris_sample_parc";
    "subject_name": string;
    "hemisphere": string;
    "parc_name": string;
    "output_annot": string;
    "sdir"?: string | null | undefined;
    "surf"?: string | null | undefined;
    "fix"?: number | null | undefined;
    "replace"?: number | null | undefined;
    "trans"?: Array<number> | null | undefined;
    "cortex"?: string | null | undefined;
    "projmm"?: number | null | undefined;
    "proj"?: number | null | undefined;
    "projfrac"?: number | null | undefined;
    "file"?: string | null | undefined;
    "ct"?: string | null | undefined;
    "v_level"?: number | null | undefined;
    "filter"?: number | null | undefined;
    "smooth"?: number | null | undefined;
    "w_size"?: number | null | undefined;
    "thickness"?: string | null | undefined;
    "change_unknown"?: number | null | undefined;
    "help": boolean;
    "version": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mris_sample_parc": mris_sample_parc_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mris_sample_parc": mris_sample_parc_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_sample_parc(...)`.
 *
 * @interface
 */
interface MrisSampleParcOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output annotation file.
     */
    outfile: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subject_name The subject ID.
 * @param hemisphere Hemisphere: rh or lh.
 * @param parc_name Parcellation filename.
 * @param output_annot Output annotation filename.
 * @param sdir Use as subjects directory (default: $SUBJECTS_DIR).
 * @param surf Use as surface (default: 'white').
 * @param fix Fix topology of all labels smaller than the specified number of vertices (default=-1, do all).
 * @param replace Replace label with deeper ones.
 * @param trans Translate one label number to another.
 * @param cortex Mask regions outside of the specified cortex label.
 * @param projmm Project the specified number of millimeters along surface normal (default=0.0).
 * @param proj Same as -projmm.
 * @param projfrac Project the specified percent along surface normal (default=0.5).
 * @param file Use as translation file (default: 'cma_parcellation_colors.txt').
 * @param ct Embed color table into output annotation file.
 * @param v_level Diagnostic level (default=0).
 * @param filter Apply mode filter a specified number of times to parcellation (default=0).
 * @param smooth Smooth surface a specified number of times (default=0).
 * @param w_size Use window size for sampling (default=7).
 * @param thickness Use thickness file (default: 'thickness').
 * @param change_unknown Change largest connected unknown region to specified label (default: don't change).
 * @param help Print help info.
 * @param version Print version info.
 *
 * @returns Parameter dictionary
 */
function mris_sample_parc_params(
    subject_name: string,
    hemisphere: string,
    parc_name: string,
    output_annot: string,
    sdir: string | null = null,
    surf: string | null = null,
    fix: number | null = null,
    replace: number | null = null,
    trans: Array<number> | null = null,
    cortex: string | null = null,
    projmm: number | null = null,
    proj: number | null = null,
    projfrac: number | null = null,
    file: string | null = null,
    ct: string | null = null,
    v_level: number | null = null,
    filter: number | null = null,
    smooth: number | null = null,
    w_size: number | null = null,
    thickness: string | null = null,
    change_unknown: number | null = null,
    help: boolean = false,
    version: boolean = false,
): MrisSampleParcParameters {
    const params = {
        "@type": "freesurfer.mris_sample_parc" as const,
        "subject_name": subject_name,
        "hemisphere": hemisphere,
        "parc_name": parc_name,
        "output_annot": output_annot,
        "help": help,
        "version": version,
    };
    if (sdir !== null) {
        params["sdir"] = sdir;
    }
    if (surf !== null) {
        params["surf"] = surf;
    }
    if (fix !== null) {
        params["fix"] = fix;
    }
    if (replace !== null) {
        params["replace"] = replace;
    }
    if (trans !== null) {
        params["trans"] = trans;
    }
    if (cortex !== null) {
        params["cortex"] = cortex;
    }
    if (projmm !== null) {
        params["projmm"] = projmm;
    }
    if (proj !== null) {
        params["proj"] = proj;
    }
    if (projfrac !== null) {
        params["projfrac"] = projfrac;
    }
    if (file !== null) {
        params["file"] = file;
    }
    if (ct !== null) {
        params["ct"] = ct;
    }
    if (v_level !== null) {
        params["v_level"] = v_level;
    }
    if (filter !== null) {
        params["filter"] = filter;
    }
    if (smooth !== null) {
        params["smooth"] = smooth;
    }
    if (w_size !== null) {
        params["w_size"] = w_size;
    }
    if (thickness !== null) {
        params["thickness"] = thickness;
    }
    if (change_unknown !== null) {
        params["change_unknown"] = change_unknown;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_sample_parc_cargs(
    params: MrisSampleParcParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_sample_parc");
    cargs.push((params["subject_name"] ?? null));
    cargs.push((params["hemisphere"] ?? null));
    cargs.push((params["parc_name"] ?? null));
    cargs.push((params["output_annot"] ?? null));
    if ((params["sdir"] ?? null) !== null) {
        cargs.push(
            "-sdir",
            (params["sdir"] ?? null)
        );
    }
    if ((params["surf"] ?? null) !== null) {
        cargs.push(
            "-surf",
            (params["surf"] ?? null)
        );
    }
    if ((params["fix"] ?? null) !== null) {
        cargs.push(
            "-fix",
            String((params["fix"] ?? null))
        );
    }
    if ((params["replace"] ?? null) !== null) {
        cargs.push(
            "-replace",
            String((params["replace"] ?? null))
        );
    }
    if ((params["trans"] ?? null) !== null) {
        cargs.push(
            "-trans",
            ...(params["trans"] ?? null).map(String)
        );
    }
    if ((params["cortex"] ?? null) !== null) {
        cargs.push(
            "-cortex",
            (params["cortex"] ?? null)
        );
    }
    if ((params["projmm"] ?? null) !== null) {
        cargs.push(
            "-projmm",
            String((params["projmm"] ?? null))
        );
    }
    if ((params["proj"] ?? null) !== null) {
        cargs.push(
            "-proj",
            String((params["proj"] ?? null))
        );
    }
    if ((params["projfrac"] ?? null) !== null) {
        cargs.push(
            "-projfrac",
            String((params["projfrac"] ?? null))
        );
    }
    if ((params["file"] ?? null) !== null) {
        cargs.push(
            "-file",
            (params["file"] ?? null)
        );
    }
    if ((params["ct"] ?? null) !== null) {
        cargs.push(
            "-ct",
            (params["ct"] ?? null)
        );
    }
    if ((params["v_level"] ?? null) !== null) {
        cargs.push(
            "-v",
            String((params["v_level"] ?? null))
        );
    }
    if ((params["filter"] ?? null) !== null) {
        cargs.push(
            "-f",
            String((params["filter"] ?? null))
        );
    }
    if ((params["smooth"] ?? null) !== null) {
        cargs.push(
            "-a",
            String((params["smooth"] ?? null))
        );
    }
    if ((params["w_size"] ?? null) !== null) {
        cargs.push(
            "-w",
            String((params["w_size"] ?? null))
        );
    }
    if ((params["thickness"] ?? null) !== null) {
        cargs.push(
            "-t",
            (params["thickness"] ?? null)
        );
    }
    if ((params["change_unknown"] ?? null) !== null) {
        cargs.push(
            "-u",
            String((params["change_unknown"] ?? null))
        );
    }
    if ((params["help"] ?? null)) {
        cargs.push("--help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("--version");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_sample_parc_outputs(
    params: MrisSampleParcParameters,
    execution: Execution,
): MrisSampleParcOutputs {
    const ret: MrisSampleParcOutputs = {
        root: execution.outputFile("."),
        outfile: execution.outputFile([(params["output_annot"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mris_sample_parc
 *
 * This program samples a volumetric parcellation onto a surface.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisSampleParcOutputs`).
 */
function mris_sample_parc_execute(
    params: MrisSampleParcParameters,
    runner: Runner | null = null,
): MrisSampleParcOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_SAMPLE_PARC_METADATA);
    params = execution.params(params)
    const cargs = mris_sample_parc_cargs(params, execution)
    const ret = mris_sample_parc_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mris_sample_parc
 *
 * This program samples a volumetric parcellation onto a surface.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subject_name The subject ID.
 * @param hemisphere Hemisphere: rh or lh.
 * @param parc_name Parcellation filename.
 * @param output_annot Output annotation filename.
 * @param sdir Use as subjects directory (default: $SUBJECTS_DIR).
 * @param surf Use as surface (default: 'white').
 * @param fix Fix topology of all labels smaller than the specified number of vertices (default=-1, do all).
 * @param replace Replace label with deeper ones.
 * @param trans Translate one label number to another.
 * @param cortex Mask regions outside of the specified cortex label.
 * @param projmm Project the specified number of millimeters along surface normal (default=0.0).
 * @param proj Same as -projmm.
 * @param projfrac Project the specified percent along surface normal (default=0.5).
 * @param file Use as translation file (default: 'cma_parcellation_colors.txt').
 * @param ct Embed color table into output annotation file.
 * @param v_level Diagnostic level (default=0).
 * @param filter Apply mode filter a specified number of times to parcellation (default=0).
 * @param smooth Smooth surface a specified number of times (default=0).
 * @param w_size Use window size for sampling (default=7).
 * @param thickness Use thickness file (default: 'thickness').
 * @param change_unknown Change largest connected unknown region to specified label (default: don't change).
 * @param help Print help info.
 * @param version Print version info.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisSampleParcOutputs`).
 */
function mris_sample_parc(
    subject_name: string,
    hemisphere: string,
    parc_name: string,
    output_annot: string,
    sdir: string | null = null,
    surf: string | null = null,
    fix: number | null = null,
    replace: number | null = null,
    trans: Array<number> | null = null,
    cortex: string | null = null,
    projmm: number | null = null,
    proj: number | null = null,
    projfrac: number | null = null,
    file: string | null = null,
    ct: string | null = null,
    v_level: number | null = null,
    filter: number | null = null,
    smooth: number | null = null,
    w_size: number | null = null,
    thickness: string | null = null,
    change_unknown: number | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): MrisSampleParcOutputs {
    const params = mris_sample_parc_params(subject_name, hemisphere, parc_name, output_annot, sdir, surf, fix, replace, trans, cortex, projmm, proj, projfrac, file, ct, v_level, filter, smooth, w_size, thickness, change_unknown, help, version)
    return mris_sample_parc_execute(params, runner);
}


export {
      MRIS_SAMPLE_PARC_METADATA,
      MrisSampleParcOutputs,
      MrisSampleParcParameters,
      mris_sample_parc,
      mris_sample_parc_execute,
      mris_sample_parc_params,
};
