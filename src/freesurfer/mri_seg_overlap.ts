// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_SEG_OVERLAP_METADATA: Metadata = {
    id: "e61800f776c2289b9b4a7391243b109288f38e81.boutiques",
    name: "mri_seg_overlap",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriSegOverlapParameters {
    "__STYXTYPE__": "mri_seg_overlap";
    "vol1": InputPathType;
    "vol2": InputPathType;
    "out_file"?: string | null | undefined;
    "measures"?: Array<string> | null | undefined;
    "labels"?: Array<string> | null | undefined;
    "label_names"?: Array<string> | null | undefined;
    "label_file"?: InputPathType | null | undefined;
    "no_names_flag": boolean;
    "seg_flag": boolean;
    "quiet_flag": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mri_seg_overlap": mri_seg_overlap_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mri_seg_overlap": mri_seg_overlap_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_seg_overlap(...)`.
 *
 * @interface
 */
interface MriSegOverlapOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Detailed overlap report saved to a JSON file.
     */
    overlap_report: OutputPathType | null;
}


function mri_seg_overlap_params(
    vol1: InputPathType,
    vol2: InputPathType,
    out_file: string | null = null,
    measures: Array<string> | null = null,
    labels: Array<string> | null = null,
    label_names: Array<string> | null = null,
    label_file: InputPathType | null = null,
    no_names_flag: boolean = false,
    seg_flag: boolean = false,
    quiet_flag: boolean = false,
): MriSegOverlapParameters {
    /**
     * Build parameters.
    
     * @param vol1 First segmentation volume input
     * @param vol2 Second segmentation volume input
     * @param out_file Save detailed overlap report to a JSON file.
     * @param measures List of measures to compute. Options include: dice, jaccard, voldiff.
     * @param labels Space-separated list of label values to include.
     * @param label_names Custom label names corresponding to the values specified with the --labels flag.
     * @param label_file Text file specifying the label values to include. Must be in the format of a freesurfer lookup-table.
     * @param no_names_flag Do not report label names.
     * @param seg_flag Compute overlap between the major segmentation structures.
     * @param quiet_flag Quiet mode - do not print results to stdout.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mri_seg_overlap" as const,
        "vol1": vol1,
        "vol2": vol2,
        "no_names_flag": no_names_flag,
        "seg_flag": seg_flag,
        "quiet_flag": quiet_flag,
    };
    if (out_file !== null) {
        params["out_file"] = out_file;
    }
    if (measures !== null) {
        params["measures"] = measures;
    }
    if (labels !== null) {
        params["labels"] = labels;
    }
    if (label_names !== null) {
        params["label_names"] = label_names;
    }
    if (label_file !== null) {
        params["label_file"] = label_file;
    }
    return params;
}


function mri_seg_overlap_cargs(
    params: MriSegOverlapParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mri_seg_overlap");
    cargs.push(execution.inputFile((params["vol1"] ?? null)));
    cargs.push(execution.inputFile((params["vol2"] ?? null)));
    if ((params["out_file"] ?? null) !== null) {
        cargs.push(
            "-o",
            (params["out_file"] ?? null)
        );
    }
    if ((params["measures"] ?? null) !== null) {
        cargs.push(
            "-m",
            ...(params["measures"] ?? null)
        );
    }
    if ((params["labels"] ?? null) !== null) {
        cargs.push(
            "-l",
            ...(params["labels"] ?? null)
        );
    }
    if ((params["label_names"] ?? null) !== null) {
        cargs.push(
            "-n",
            ...(params["label_names"] ?? null)
        );
    }
    if ((params["label_file"] ?? null) !== null) {
        cargs.push(
            "-f",
            execution.inputFile((params["label_file"] ?? null))
        );
    }
    if ((params["no_names_flag"] ?? null)) {
        cargs.push("-x");
    }
    if ((params["seg_flag"] ?? null)) {
        cargs.push("-s");
    }
    if ((params["quiet_flag"] ?? null)) {
        cargs.push("-q");
    }
    return cargs;
}


function mri_seg_overlap_outputs(
    params: MriSegOverlapParameters,
    execution: Execution,
): MriSegOverlapOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MriSegOverlapOutputs = {
        root: execution.outputFile("."),
        overlap_report: ((params["out_file"] ?? null) !== null) ? execution.outputFile([(params["out_file"] ?? null)].join('')) : null,
    };
    return ret;
}


function mri_seg_overlap_execute(
    params: MriSegOverlapParameters,
    execution: Execution,
): MriSegOverlapOutputs {
    /**
     * Compute the structural overlap between two segmentation volumes.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MriSegOverlapOutputs`).
     */
    params = execution.params(params)
    const cargs = mri_seg_overlap_cargs(params, execution)
    const ret = mri_seg_overlap_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mri_seg_overlap(
    vol1: InputPathType,
    vol2: InputPathType,
    out_file: string | null = null,
    measures: Array<string> | null = null,
    labels: Array<string> | null = null,
    label_names: Array<string> | null = null,
    label_file: InputPathType | null = null,
    no_names_flag: boolean = false,
    seg_flag: boolean = false,
    quiet_flag: boolean = false,
    runner: Runner | null = null,
): MriSegOverlapOutputs {
    /**
     * Compute the structural overlap between two segmentation volumes.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param vol1 First segmentation volume input
     * @param vol2 Second segmentation volume input
     * @param out_file Save detailed overlap report to a JSON file.
     * @param measures List of measures to compute. Options include: dice, jaccard, voldiff.
     * @param labels Space-separated list of label values to include.
     * @param label_names Custom label names corresponding to the values specified with the --labels flag.
     * @param label_file Text file specifying the label values to include. Must be in the format of a freesurfer lookup-table.
     * @param no_names_flag Do not report label names.
     * @param seg_flag Compute overlap between the major segmentation structures.
     * @param quiet_flag Quiet mode - do not print results to stdout.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MriSegOverlapOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_SEG_OVERLAP_METADATA);
    const params = mri_seg_overlap_params(vol1, vol2, out_file, measures, labels, label_names, label_file, no_names_flag, seg_flag, quiet_flag)
    return mri_seg_overlap_execute(params, execution);
}


export {
      MRI_SEG_OVERLAP_METADATA,
      MriSegOverlapOutputs,
      MriSegOverlapParameters,
      mri_seg_overlap,
      mri_seg_overlap_params,
};
