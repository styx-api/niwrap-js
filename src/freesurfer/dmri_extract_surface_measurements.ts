// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DMRI_EXTRACT_SURFACE_MEASUREMENTS_METADATA: Metadata = {
    id: "ba58cc768fedfd8c0bd03df98664733dd0e1a4e1.boutiques",
    name: "dmri_extractSurfaceMeasurements",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface DmriExtractSurfaceMeasurementsParameters {
    "@type"?: "freesurfer/dmri_extractSurfaceMeasurements";
    "streamline_file": InputPathType;
    "lh_surface_file": InputPathType;
    "lh_thickness_overlay": InputPathType;
    "lh_curvature_overlay": InputPathType;
    "rh_surface_file": InputPathType;
    "rh_thickness_overlay": InputPathType;
    "rh_curvature_overlay": InputPathType;
    "output_directory": string;
    "reference_image"?: InputPathType | null | undefined;
    "reference_image_anatomical"?: InputPathType | null | undefined;
    "transformation"?: InputPathType | null | undefined;
    "annotation_file"?: InputPathType | null | undefined;
    "fa_options"?: Array<string> | null | undefined;
}
type DmriExtractSurfaceMeasurementsParametersTagged = Required<Pick<DmriExtractSurfaceMeasurementsParameters, '@type'>> & DmriExtractSurfaceMeasurementsParameters;


/**
 * Output object returned when calling `DmriExtractSurfaceMeasurementsParameters(...)`.
 *
 * @interface
 */
interface DmriExtractSurfaceMeasurementsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param streamline_file Streamline file in .trk format
 * @param lh_surface_file Left hemisphere surface file
 * @param lh_thickness_overlay Left hemisphere thickness overlay file
 * @param lh_curvature_overlay Left hemisphere curvature overlay file
 * @param rh_surface_file Right hemisphere surface file
 * @param rh_thickness_overlay Right hemisphere thickness overlay file
 * @param rh_curvature_overlay Right hemisphere curvature overlay file
 * @param output_directory Output directory
 * @param reference_image Reference image for situations where FA is not used
 * @param reference_image_anatomical Reference image for anatomical space when diffusion and anatomical spaces are not registered
 * @param transformation Transformation from diffusion to anatomical space
 * @param annotation_file Annotation file
 * @param fa_options FA options including the number of files and their respective paths
 *
 * @returns Parameter dictionary
 */
function dmri_extract_surface_measurements_params(
    streamline_file: InputPathType,
    lh_surface_file: InputPathType,
    lh_thickness_overlay: InputPathType,
    lh_curvature_overlay: InputPathType,
    rh_surface_file: InputPathType,
    rh_thickness_overlay: InputPathType,
    rh_curvature_overlay: InputPathType,
    output_directory: string,
    reference_image: InputPathType | null = null,
    reference_image_anatomical: InputPathType | null = null,
    transformation: InputPathType | null = null,
    annotation_file: InputPathType | null = null,
    fa_options: Array<string> | null = null,
): DmriExtractSurfaceMeasurementsParametersTagged {
    const params = {
        "@type": "freesurfer/dmri_extractSurfaceMeasurements" as const,
        "streamline_file": streamline_file,
        "lh_surface_file": lh_surface_file,
        "lh_thickness_overlay": lh_thickness_overlay,
        "lh_curvature_overlay": lh_curvature_overlay,
        "rh_surface_file": rh_surface_file,
        "rh_thickness_overlay": rh_thickness_overlay,
        "rh_curvature_overlay": rh_curvature_overlay,
        "output_directory": output_directory,
    };
    if (reference_image !== null) {
        params["reference_image"] = reference_image;
    }
    if (reference_image_anatomical !== null) {
        params["reference_image_anatomical"] = reference_image_anatomical;
    }
    if (transformation !== null) {
        params["transformation"] = transformation;
    }
    if (annotation_file !== null) {
        params["annotation_file"] = annotation_file;
    }
    if (fa_options !== null) {
        params["fa_options"] = fa_options;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dmri_extract_surface_measurements_cargs(
    params: DmriExtractSurfaceMeasurementsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("dmri_extractSurfaceMeasurements");
    cargs.push(
        "-i",
        execution.inputFile((params["streamline_file"] ?? null))
    );
    cargs.push(
        "-sl",
        execution.inputFile((params["lh_surface_file"] ?? null))
    );
    cargs.push(
        "-tl",
        execution.inputFile((params["lh_thickness_overlay"] ?? null))
    );
    cargs.push(
        "-cl",
        execution.inputFile((params["lh_curvature_overlay"] ?? null))
    );
    cargs.push(
        "-sr",
        execution.inputFile((params["rh_surface_file"] ?? null))
    );
    cargs.push(
        "-tr",
        execution.inputFile((params["rh_thickness_overlay"] ?? null))
    );
    cargs.push(
        "-cr",
        execution.inputFile((params["rh_curvature_overlay"] ?? null))
    );
    cargs.push(
        "-o",
        (params["output_directory"] ?? null)
    );
    if ((params["reference_image"] ?? null) !== null) {
        cargs.push(
            "-rid",
            execution.inputFile((params["reference_image"] ?? null))
        );
    }
    if ((params["reference_image_anatomical"] ?? null) !== null) {
        cargs.push(
            "-ria",
            execution.inputFile((params["reference_image_anatomical"] ?? null))
        );
    }
    if ((params["transformation"] ?? null) !== null) {
        cargs.push(
            "-t",
            execution.inputFile((params["transformation"] ?? null))
        );
    }
    if ((params["annotation_file"] ?? null) !== null) {
        cargs.push(
            "-a",
            execution.inputFile((params["annotation_file"] ?? null))
        );
    }
    if ((params["fa_options"] ?? null) !== null) {
        cargs.push(
            "-fa",
            ...(params["fa_options"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function dmri_extract_surface_measurements_outputs(
    params: DmriExtractSurfaceMeasurementsParameters,
    execution: Execution,
): DmriExtractSurfaceMeasurementsOutputs {
    const ret: DmriExtractSurfaceMeasurementsOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * dmri_extractSurfaceMeasurements
 *
 * A tool for extracting surface measurements from diffusion MRI data.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DmriExtractSurfaceMeasurementsOutputs`).
 */
function dmri_extract_surface_measurements_execute(
    params: DmriExtractSurfaceMeasurementsParameters,
    runner: Runner | null = null,
): DmriExtractSurfaceMeasurementsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DMRI_EXTRACT_SURFACE_MEASUREMENTS_METADATA);
    params = execution.params(params)
    const cargs = dmri_extract_surface_measurements_cargs(params, execution)
    const ret = dmri_extract_surface_measurements_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * dmri_extractSurfaceMeasurements
 *
 * A tool for extracting surface measurements from diffusion MRI data.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param streamline_file Streamline file in .trk format
 * @param lh_surface_file Left hemisphere surface file
 * @param lh_thickness_overlay Left hemisphere thickness overlay file
 * @param lh_curvature_overlay Left hemisphere curvature overlay file
 * @param rh_surface_file Right hemisphere surface file
 * @param rh_thickness_overlay Right hemisphere thickness overlay file
 * @param rh_curvature_overlay Right hemisphere curvature overlay file
 * @param output_directory Output directory
 * @param reference_image Reference image for situations where FA is not used
 * @param reference_image_anatomical Reference image for anatomical space when diffusion and anatomical spaces are not registered
 * @param transformation Transformation from diffusion to anatomical space
 * @param annotation_file Annotation file
 * @param fa_options FA options including the number of files and their respective paths
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DmriExtractSurfaceMeasurementsOutputs`).
 */
function dmri_extract_surface_measurements(
    streamline_file: InputPathType,
    lh_surface_file: InputPathType,
    lh_thickness_overlay: InputPathType,
    lh_curvature_overlay: InputPathType,
    rh_surface_file: InputPathType,
    rh_thickness_overlay: InputPathType,
    rh_curvature_overlay: InputPathType,
    output_directory: string,
    reference_image: InputPathType | null = null,
    reference_image_anatomical: InputPathType | null = null,
    transformation: InputPathType | null = null,
    annotation_file: InputPathType | null = null,
    fa_options: Array<string> | null = null,
    runner: Runner | null = null,
): DmriExtractSurfaceMeasurementsOutputs {
    const params = dmri_extract_surface_measurements_params(streamline_file, lh_surface_file, lh_thickness_overlay, lh_curvature_overlay, rh_surface_file, rh_thickness_overlay, rh_curvature_overlay, output_directory, reference_image, reference_image_anatomical, transformation, annotation_file, fa_options)
    return dmri_extract_surface_measurements_execute(params, runner);
}


export {
      DMRI_EXTRACT_SURFACE_MEASUREMENTS_METADATA,
      DmriExtractSurfaceMeasurementsOutputs,
      dmri_extract_surface_measurements,
      dmri_extract_surface_measurements_execute,
      dmri_extract_surface_measurements_params,
};
