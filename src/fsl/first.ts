// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FIRST_METADATA: Metadata = {
    id: "8eac6ab5351837befce2e9912ac56d5eab1d4f71.boutiques",
    name: "first",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface FirstParameters {
    "@type": "fsl.first";
    "input_file": InputPathType;
    "output_name": string;
    "input_model": InputPathType;
    "flirt_matrix": InputPathType;
    "verbose": boolean;
    "help": boolean;
    "input_model2"?: InputPathType | null | undefined;
    "nmodes"?: number | null | undefined;
    "intref": boolean;
    "multi_image_input": boolean;
    "binary_surface_output": boolean;
    "bmap_name"?: InputPathType | null | undefined;
    "bvars"?: InputPathType | null | undefined;
    "shcond": boolean;
    "loadbvars": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.first": first_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.first": first_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `first(...)`.
 *
 * @interface
 */
interface FirstOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Segmented output image
     */
    segmented_output_image: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_file Filename of input image to be segmented.
 * @param output_name Output name
 * @param input_model Filename of input model (the structure to be segmented).
 * @param flirt_matrix Filename of flirt matrix that transform input image to MNI space (output of first_flirt).
 * @param verbose Switch on diagnostic messages
 * @param help Display help message
 * @param input_model2 Filename of second input model (the structure to be segmented).
 * @param nmodes Specifies number of modes used.
 * @param intref Use structure specified by modelname2 as intensity reference
 * @param multi_image_input Use structure specified by modelname2 as intensity reference
 * @param binary_surface_output Use structure specified by modelname2 as intensity reference
 * @param bmap_name Filename of conditional mapping matrix
 * @param bvars Initialize using bvars from a previous segmentation. When using with --shcond specifies the shape of the structure we are conditioning on.
 * @param shcond Use conditional shape probability
 * @param loadbvars Load initial parameter estimates from a previous segmentation.
 *
 * @returns Parameter dictionary
 */
function first_params(
    input_file: InputPathType,
    output_name: string,
    input_model: InputPathType,
    flirt_matrix: InputPathType,
    verbose: boolean = false,
    help: boolean = false,
    input_model2: InputPathType | null = null,
    nmodes: number | null = null,
    intref: boolean = false,
    multi_image_input: boolean = false,
    binary_surface_output: boolean = false,
    bmap_name: InputPathType | null = null,
    bvars: InputPathType | null = null,
    shcond: boolean = false,
    loadbvars: boolean = false,
): FirstParameters {
    const params = {
        "@type": "fsl.first" as const,
        "input_file": input_file,
        "output_name": output_name,
        "input_model": input_model,
        "flirt_matrix": flirt_matrix,
        "verbose": verbose,
        "help": help,
        "intref": intref,
        "multi_image_input": multi_image_input,
        "binary_surface_output": binary_surface_output,
        "shcond": shcond,
        "loadbvars": loadbvars,
    };
    if (input_model2 !== null) {
        params["input_model2"] = input_model2;
    }
    if (nmodes !== null) {
        params["nmodes"] = nmodes;
    }
    if (bmap_name !== null) {
        params["bmap_name"] = bmap_name;
    }
    if (bvars !== null) {
        params["bvars"] = bvars;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function first_cargs(
    params: FirstParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("first");
    cargs.push(
        "-i",
        execution.inputFile((params["input_file"] ?? null))
    );
    cargs.push(
        "-k",
        (params["output_name"] ?? null)
    );
    cargs.push(
        "-m",
        execution.inputFile((params["input_model"] ?? null))
    );
    cargs.push(
        "-l",
        execution.inputFile((params["flirt_matrix"] ?? null))
    );
    if ((params["verbose"] ?? null)) {
        cargs.push("-v");
    }
    if ((params["help"] ?? null)) {
        cargs.push("-h");
    }
    if ((params["input_model2"] ?? null) !== null) {
        cargs.push(
            "-p",
            execution.inputFile((params["input_model2"] ?? null))
        );
    }
    if ((params["nmodes"] ?? null) !== null) {
        cargs.push(
            "-n",
            String((params["nmodes"] ?? null))
        );
    }
    if ((params["intref"] ?? null)) {
        cargs.push("--intref");
    }
    if ((params["multi_image_input"] ?? null)) {
        cargs.push("--multiImageInput");
    }
    if ((params["binary_surface_output"] ?? null)) {
        cargs.push("--binarySurfaceOutput");
    }
    if ((params["bmap_name"] ?? null) !== null) {
        cargs.push(
            "-b",
            execution.inputFile((params["bmap_name"] ?? null))
        );
    }
    if ((params["bvars"] ?? null) !== null) {
        cargs.push(
            "-o",
            execution.inputFile((params["bvars"] ?? null))
        );
    }
    if ((params["shcond"] ?? null)) {
        cargs.push("--shcond");
    }
    if ((params["loadbvars"] ?? null)) {
        cargs.push("--loadbvars");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function first_outputs(
    params: FirstParameters,
    execution: Execution,
): FirstOutputs {
    const ret: FirstOutputs = {
        root: execution.outputFile("."),
        segmented_output_image: execution.outputFile([(params["output_name"] ?? null), "_seg.nii.gz"].join('')),
    };
    return ret;
}


/**
 * A command-line tool for segmenting subcortical structures in MRI images using models and transformations.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `FirstOutputs`).
 */
function first_execute(
    params: FirstParameters,
    execution: Execution,
): FirstOutputs {
    params = execution.params(params)
    const cargs = first_cargs(params, execution)
    const ret = first_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * A command-line tool for segmenting subcortical structures in MRI images using models and transformations.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param input_file Filename of input image to be segmented.
 * @param output_name Output name
 * @param input_model Filename of input model (the structure to be segmented).
 * @param flirt_matrix Filename of flirt matrix that transform input image to MNI space (output of first_flirt).
 * @param verbose Switch on diagnostic messages
 * @param help Display help message
 * @param input_model2 Filename of second input model (the structure to be segmented).
 * @param nmodes Specifies number of modes used.
 * @param intref Use structure specified by modelname2 as intensity reference
 * @param multi_image_input Use structure specified by modelname2 as intensity reference
 * @param binary_surface_output Use structure specified by modelname2 as intensity reference
 * @param bmap_name Filename of conditional mapping matrix
 * @param bvars Initialize using bvars from a previous segmentation. When using with --shcond specifies the shape of the structure we are conditioning on.
 * @param shcond Use conditional shape probability
 * @param loadbvars Load initial parameter estimates from a previous segmentation.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FirstOutputs`).
 */
function first(
    input_file: InputPathType,
    output_name: string,
    input_model: InputPathType,
    flirt_matrix: InputPathType,
    verbose: boolean = false,
    help: boolean = false,
    input_model2: InputPathType | null = null,
    nmodes: number | null = null,
    intref: boolean = false,
    multi_image_input: boolean = false,
    binary_surface_output: boolean = false,
    bmap_name: InputPathType | null = null,
    bvars: InputPathType | null = null,
    shcond: boolean = false,
    loadbvars: boolean = false,
    runner: Runner | null = null,
): FirstOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FIRST_METADATA);
    const params = first_params(input_file, output_name, input_model, flirt_matrix, verbose, help, input_model2, nmodes, intref, multi_image_input, binary_surface_output, bmap_name, bvars, shcond, loadbvars)
    return first_execute(params, execution);
}


export {
      FIRST_METADATA,
      FirstOutputs,
      FirstParameters,
      first,
      first_cargs,
      first_execute,
      first_outputs,
      first_params,
};
