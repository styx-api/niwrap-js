// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_REVERSE_METADATA: Metadata = {
    id: "a62b3581c919ee2de9ea29c9c8f31b6b9b96227a.boutiques",
    name: "mris_reverse",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisReverseParameters {
    "@type": "freesurfer.mris_reverse";
    "input_surface": InputPathType;
    "output_surface": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mris_reverse": mris_reverse_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mris_reverse": mris_reverse_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_reverse(...)`.
 *
 * @interface
 */
interface MrisReverseOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Reversed cortical surface file.
     */
    reversed_surface: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_surface Input cortical surface file.
 * @param output_surface Output cortical surface file.
 *
 * @returns Parameter dictionary
 */
function mris_reverse_params(
    input_surface: InputPathType,
    output_surface: string,
): MrisReverseParameters {
    const params = {
        "@type": "freesurfer.mris_reverse" as const,
        "input_surface": input_surface,
        "output_surface": output_surface,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_reverse_cargs(
    params: MrisReverseParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_reverse");
    cargs.push(execution.inputFile((params["input_surface"] ?? null)));
    cargs.push((params["output_surface"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_reverse_outputs(
    params: MrisReverseParameters,
    execution: Execution,
): MrisReverseOutputs {
    const ret: MrisReverseOutputs = {
        root: execution.outputFile("."),
        reversed_surface: execution.outputFile([(params["output_surface"] ?? null), ".surf"].join('')),
    };
    return ret;
}


/**
 * mris_reverse
 *
 * This tool reverses a cortical surface.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisReverseOutputs`).
 */
function mris_reverse_execute(
    params: MrisReverseParameters,
    runner: Runner | null = null,
): MrisReverseOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_REVERSE_METADATA);
    params = execution.params(params)
    const cargs = mris_reverse_cargs(params, execution)
    const ret = mris_reverse_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mris_reverse
 *
 * This tool reverses a cortical surface.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_surface Input cortical surface file.
 * @param output_surface Output cortical surface file.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisReverseOutputs`).
 */
function mris_reverse(
    input_surface: InputPathType,
    output_surface: string,
    runner: Runner | null = null,
): MrisReverseOutputs {
    const params = mris_reverse_params(input_surface, output_surface)
    return mris_reverse_execute(params, runner);
}


export {
      MRIS_REVERSE_METADATA,
      MrisReverseOutputs,
      MrisReverseParameters,
      mris_reverse,
      mris_reverse_execute,
      mris_reverse_params,
};
