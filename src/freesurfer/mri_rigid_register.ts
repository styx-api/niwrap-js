// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_RIGID_REGISTER_METADATA: Metadata = {
    id: "754acada827d58b48e830b0ed757b63bcbe26d66.boutiques",
    name: "mri_rigid_register",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriRigidRegisterParameters {
    "@type": "freesurfer.mri_rigid_register";
    "source_volume": InputPathType;
    "target_volume": InputPathType;
    "transform_output": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_rigid_register": mri_rigid_register_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_rigid_register": mri_rigid_register_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_rigid_register(...)`.
 *
 * @interface
 */
interface MriRigidRegisterOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file for transform matrix
     */
    transform_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param source_volume Source volume file for registration
 * @param target_volume Target volume file for registration
 * @param transform_output Output file name for the transform
 *
 * @returns Parameter dictionary
 */
function mri_rigid_register_params(
    source_volume: InputPathType,
    target_volume: InputPathType,
    transform_output: string,
): MriRigidRegisterParameters {
    const params = {
        "@type": "freesurfer.mri_rigid_register" as const,
        "source_volume": source_volume,
        "target_volume": target_volume,
        "transform_output": transform_output,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_rigid_register_cargs(
    params: MriRigidRegisterParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_rigid_register");
    cargs.push(execution.inputFile((params["source_volume"] ?? null)));
    cargs.push(execution.inputFile((params["target_volume"] ?? null)));
    cargs.push((params["transform_output"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_rigid_register_outputs(
    params: MriRigidRegisterParameters,
    execution: Execution,
): MriRigidRegisterOutputs {
    const ret: MriRigidRegisterOutputs = {
        root: execution.outputFile("."),
        transform_file: execution.outputFile([(params["transform_output"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mri_rigid_register
 *
 * Rigid registration tool for MRI volumes.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriRigidRegisterOutputs`).
 */
function mri_rigid_register_execute(
    params: MriRigidRegisterParameters,
    runner: Runner | null = null,
): MriRigidRegisterOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_RIGID_REGISTER_METADATA);
    params = execution.params(params)
    const cargs = mri_rigid_register_cargs(params, execution)
    const ret = mri_rigid_register_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_rigid_register
 *
 * Rigid registration tool for MRI volumes.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param source_volume Source volume file for registration
 * @param target_volume Target volume file for registration
 * @param transform_output Output file name for the transform
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriRigidRegisterOutputs`).
 */
function mri_rigid_register(
    source_volume: InputPathType,
    target_volume: InputPathType,
    transform_output: string,
    runner: Runner | null = null,
): MriRigidRegisterOutputs {
    const params = mri_rigid_register_params(source_volume, target_volume, transform_output)
    return mri_rigid_register_execute(params, runner);
}


export {
      MRI_RIGID_REGISTER_METADATA,
      MriRigidRegisterOutputs,
      MriRigidRegisterParameters,
      mri_rigid_register,
      mri_rigid_register_execute,
      mri_rigid_register_params,
};
