// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__SUMA_MAKE_SPEC_FS_METADATA: Metadata = {
    id: "35abec1cbcc0a7c9a8b395b5a4855788850c3f95.boutiques",
    name: "@SUMA_Make_Spec_FS",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VSumaMakeSpecFsParameters {
    "__STYXTYPE__": "@SUMA_Make_Spec_FS";
    "subject_id": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "@SUMA_Make_Spec_FS": v__suma_make_spec_fs_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "@SUMA_Make_Spec_FS": v__suma_make_spec_fs_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__suma_make_spec_fs(...)`.
 *
 * @interface
 */
interface VSumaMakeSpecFsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * All created files are stored in a new SUMA directory
     */
    suma_output: OutputPathType;
}


function v__suma_make_spec_fs_params(
    subject_id: string,
): VSumaMakeSpecFsParameters {
    /**
     * Build parameters.
    
     * @param subject_id Required subject ID for file naming
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "@SUMA_Make_Spec_FS" as const,
        "subject_id": subject_id,
    };
    return params;
}


function v__suma_make_spec_fs_cargs(
    params: VSumaMakeSpecFsParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("@SUMA_Make_Spec_FS");
    cargs.push("[OPTIONS]");
    cargs.push(
        "-sid",
        (params["subject_id"] ?? null)
    );
    return cargs;
}


function v__suma_make_spec_fs_outputs(
    params: VSumaMakeSpecFsParameters,
    execution: Execution,
): VSumaMakeSpecFsOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: VSumaMakeSpecFsOutputs = {
        root: execution.outputFile("."),
        suma_output: execution.outputFile(["SUMA/*"].join('')),
    };
    return ret;
}


function v__suma_make_spec_fs_execute(
    params: VSumaMakeSpecFsParameters,
    execution: Execution,
): VSumaMakeSpecFsOutputs {
    /**
     * Prepare for surface viewing in SUMA.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `VSumaMakeSpecFsOutputs`).
     */
    params = execution.params(params)
    const cargs = v__suma_make_spec_fs_cargs(params, execution)
    const ret = v__suma_make_spec_fs_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v__suma_make_spec_fs(
    subject_id: string,
    runner: Runner | null = null,
): VSumaMakeSpecFsOutputs {
    /**
     * Prepare for surface viewing in SUMA.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param subject_id Required subject ID for file naming
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `VSumaMakeSpecFsOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__SUMA_MAKE_SPEC_FS_METADATA);
    const params = v__suma_make_spec_fs_params(subject_id)
    return v__suma_make_spec_fs_execute(params, execution);
}


export {
      VSumaMakeSpecFsOutputs,
      VSumaMakeSpecFsParameters,
      V__SUMA_MAKE_SPEC_FS_METADATA,
      v__suma_make_spec_fs,
      v__suma_make_spec_fs_params,
};
