// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__SUMA_REPREFIXIZE_SPEC_METADATA: Metadata = {
    id: "a8545098535b72c07ad26ff409d12a14404e4007.boutiques",
    name: "@suma_reprefixize_spec",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VSumaReprefixizeSpecParameters {
    "__STYXTYPE__": "@suma_reprefixize_spec";
    "input_file": InputPathType;
    "prefix": string;
    "output_dir": string;
    "work_dir": string;
    "no_clean": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "@suma_reprefixize_spec": v__suma_reprefixize_spec_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "@suma_reprefixize_spec": v__suma_reprefixize_spec_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__suma_reprefixize_spec(...)`.
 *
 * @interface
 */
interface VSumaReprefixizeSpecOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Prefixed SUMA specification files
     */
    prefixed_spec_files: OutputPathType;
}


function v__suma_reprefixize_spec_params(
    input_file: InputPathType,
    prefix: string,
    output_dir: string,
    work_dir: string,
    no_clean: boolean = false,
): VSumaReprefixizeSpecParameters {
    /**
     * Build parameters.
    
     * @param input_file Input SUMA specification file
     * @param prefix Prefix to be added to the file names
     * @param output_dir Output directory where the prefixed files will be saved
     * @param work_dir Working directory for temporary files
     * @param no_clean Flag to avoid cleaning temporary files
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "@suma_reprefixize_spec" as const,
        "input_file": input_file,
        "prefix": prefix,
        "output_dir": output_dir,
        "work_dir": work_dir,
        "no_clean": no_clean,
    };
    return params;
}


function v__suma_reprefixize_spec_cargs(
    params: VSumaReprefixizeSpecParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("@suma_reprefixize_spec");
    cargs.push(
        "-input",
        execution.inputFile((params["input_file"] ?? null))
    );
    cargs.push(
        "-preprefix",
        (params["prefix"] ?? null)
    );
    cargs.push(
        "-odir",
        (params["output_dir"] ?? null)
    );
    cargs.push(
        "-workdir",
        (params["work_dir"] ?? null)
    );
    if ((params["no_clean"] ?? null)) {
        cargs.push("-no_clean");
    }
    return cargs;
}


function v__suma_reprefixize_spec_outputs(
    params: VSumaReprefixizeSpecParameters,
    execution: Execution,
): VSumaReprefixizeSpecOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: VSumaReprefixizeSpecOutputs = {
        root: execution.outputFile("."),
        prefixed_spec_files: execution.outputFile([(params["output_dir"] ?? null), "/*.spec"].join('')),
    };
    return ret;
}


function v__suma_reprefixize_spec_execute(
    params: VSumaReprefixizeSpecParameters,
    execution: Execution,
): VSumaReprefixizeSpecOutputs {
    /**
     * A tool for prefixing and working with SUMA specification files.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `VSumaReprefixizeSpecOutputs`).
     */
    params = execution.params(params)
    const cargs = v__suma_reprefixize_spec_cargs(params, execution)
    const ret = v__suma_reprefixize_spec_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v__suma_reprefixize_spec(
    input_file: InputPathType,
    prefix: string,
    output_dir: string,
    work_dir: string,
    no_clean: boolean = false,
    runner: Runner | null = null,
): VSumaReprefixizeSpecOutputs {
    /**
     * A tool for prefixing and working with SUMA specification files.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param input_file Input SUMA specification file
     * @param prefix Prefix to be added to the file names
     * @param output_dir Output directory where the prefixed files will be saved
     * @param work_dir Working directory for temporary files
     * @param no_clean Flag to avoid cleaning temporary files
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `VSumaReprefixizeSpecOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__SUMA_REPREFIXIZE_SPEC_METADATA);
    const params = v__suma_reprefixize_spec_params(input_file, prefix, output_dir, work_dir, no_clean)
    return v__suma_reprefixize_spec_execute(params, execution);
}


export {
      VSumaReprefixizeSpecOutputs,
      VSumaReprefixizeSpecParameters,
      V__SUMA_REPREFIXIZE_SPEC_METADATA,
      v__suma_reprefixize_spec,
      v__suma_reprefixize_spec_params,
};
