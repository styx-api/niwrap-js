// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURFACE_SET_COORDINATES_METADATA: Metadata = {
    id: "72e93a016bdeefa39870b1c99e99dc40793bcdc3.boutiques",
    name: "surface-set-coordinates",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface SurfaceSetCoordinatesParameters {
    "@type": "workbench.surface-set-coordinates";
    "surface_in": InputPathType;
    "coord_metric": InputPathType;
    "surface_out": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.surface-set-coordinates": surface_set_coordinates_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.surface-set-coordinates": surface_set_coordinates_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `surface_set_coordinates(...)`.
 *
 * @interface
 */
interface SurfaceSetCoordinatesOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the new surface
     */
    surface_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param surface_in the surface to use for the topology
 * @param coord_metric the new coordinates, as a 3-column metric file
 * @param surface_out the new surface
 *
 * @returns Parameter dictionary
 */
function surface_set_coordinates_params(
    surface_in: InputPathType,
    coord_metric: InputPathType,
    surface_out: string,
): SurfaceSetCoordinatesParameters {
    const params = {
        "@type": "workbench.surface-set-coordinates" as const,
        "surface_in": surface_in,
        "coord_metric": coord_metric,
        "surface_out": surface_out,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function surface_set_coordinates_cargs(
    params: SurfaceSetCoordinatesParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-surface-set-coordinates");
    cargs.push(execution.inputFile((params["surface_in"] ?? null)));
    cargs.push(execution.inputFile((params["coord_metric"] ?? null)));
    cargs.push((params["surface_out"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function surface_set_coordinates_outputs(
    params: SurfaceSetCoordinatesParameters,
    execution: Execution,
): SurfaceSetCoordinatesOutputs {
    const ret: SurfaceSetCoordinatesOutputs = {
        root: execution.outputFile("."),
        surface_out: execution.outputFile([(params["surface_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * surface-set-coordinates
 *
 * Modify coordinates of a surface.
 *
 * Takes the topology from an existing surface file, and uses values from a metric file as coordinates to construct a new surface file.
 *
 * See -surface-coordinates-to-metric for how to get surface coordinates as a metric file, such that you can then modify them via metric commands, etc.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfaceSetCoordinatesOutputs`).
 */
function surface_set_coordinates_execute(
    params: SurfaceSetCoordinatesParameters,
    runner: Runner | null = null,
): SurfaceSetCoordinatesOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURFACE_SET_COORDINATES_METADATA);
    params = execution.params(params)
    const cargs = surface_set_coordinates_cargs(params, execution)
    const ret = surface_set_coordinates_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * surface-set-coordinates
 *
 * Modify coordinates of a surface.
 *
 * Takes the topology from an existing surface file, and uses values from a metric file as coordinates to construct a new surface file.
 *
 * See -surface-coordinates-to-metric for how to get surface coordinates as a metric file, such that you can then modify them via metric commands, etc.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param surface_in the surface to use for the topology
 * @param coord_metric the new coordinates, as a 3-column metric file
 * @param surface_out the new surface
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SurfaceSetCoordinatesOutputs`).
 */
function surface_set_coordinates(
    surface_in: InputPathType,
    coord_metric: InputPathType,
    surface_out: string,
    runner: Runner | null = null,
): SurfaceSetCoordinatesOutputs {
    const params = surface_set_coordinates_params(surface_in, coord_metric, surface_out)
    return surface_set_coordinates_execute(params, runner);
}


export {
      SURFACE_SET_COORDINATES_METADATA,
      SurfaceSetCoordinatesOutputs,
      SurfaceSetCoordinatesParameters,
      surface_set_coordinates,
      surface_set_coordinates_execute,
      surface_set_coordinates_params,
};
