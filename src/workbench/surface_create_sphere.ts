// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURFACE_CREATE_SPHERE_METADATA: Metadata = {
    id: "c18b118a2072dd39d41e5c3a49f7806fd4c7ac95.boutiques",
    name: "surface-create-sphere",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface SurfaceCreateSphereParameters {
    "__STYXTYPE__": "surface-create-sphere";
    "num_vertices": number;
    "sphere_out": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "surface-create-sphere": surface_create_sphere_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "surface-create-sphere": surface_create_sphere_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `surface_create_sphere(...)`.
 *
 * @interface
 */
interface SurfaceCreateSphereOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output sphere
     */
    sphere_out: OutputPathType;
}


function surface_create_sphere_params(
    num_vertices: number,
    sphere_out: string,
): SurfaceCreateSphereParameters {
    /**
     * Build parameters.
    
     * @param num_vertices desired number of vertices
     * @param sphere_out the output sphere
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "surface-create-sphere" as const,
        "num_vertices": num_vertices,
        "sphere_out": sphere_out,
    };
    return params;
}


function surface_create_sphere_cargs(
    params: SurfaceCreateSphereParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-surface-create-sphere");
    cargs.push(String((params["num_vertices"] ?? null)));
    cargs.push((params["sphere_out"] ?? null));
    return cargs;
}


function surface_create_sphere_outputs(
    params: SurfaceCreateSphereParameters,
    execution: Execution,
): SurfaceCreateSphereOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: SurfaceCreateSphereOutputs = {
        root: execution.outputFile("."),
        sphere_out: execution.outputFile([(params["sphere_out"] ?? null)].join('')),
    };
    return ret;
}


function surface_create_sphere_execute(
    params: SurfaceCreateSphereParameters,
    execution: Execution,
): SurfaceCreateSphereOutputs {
    /**
     * Generate a sphere with consistent vertex areas.
     * 
     * Generates a sphere by regularly dividing the triangles of an icosahedron, to come as close to the desired number of vertices as possible, and modifying it to have very similar vertex areas for all vertices.  To generate a pair of vertex-matched left and right spheres, use this command, then -surface-flip-lr to generate the other sphere, then -set-structure on each.  For example:
     * 
     * $ wb_command -surface-create-sphere 6000 Sphere.6k.R.surf.gii
     * $ wb_command -surface-flip-lr Sphere.6k.R.surf.gii Sphere.6k.L.surf.gii
     * $ wb_command -set-structure Sphere.6k.R.surf.gii CORTEX_RIGHT
     * $ wb_command -set-structure Sphere.6k.L.surf.gii CORTEX_LEFT.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `SurfaceCreateSphereOutputs`).
     */
    params = execution.params(params)
    const cargs = surface_create_sphere_cargs(params, execution)
    const ret = surface_create_sphere_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function surface_create_sphere(
    num_vertices: number,
    sphere_out: string,
    runner: Runner | null = null,
): SurfaceCreateSphereOutputs {
    /**
     * Generate a sphere with consistent vertex areas.
     * 
     * Generates a sphere by regularly dividing the triangles of an icosahedron, to come as close to the desired number of vertices as possible, and modifying it to have very similar vertex areas for all vertices.  To generate a pair of vertex-matched left and right spheres, use this command, then -surface-flip-lr to generate the other sphere, then -set-structure on each.  For example:
     * 
     * $ wb_command -surface-create-sphere 6000 Sphere.6k.R.surf.gii
     * $ wb_command -surface-flip-lr Sphere.6k.R.surf.gii Sphere.6k.L.surf.gii
     * $ wb_command -set-structure Sphere.6k.R.surf.gii CORTEX_RIGHT
     * $ wb_command -set-structure Sphere.6k.L.surf.gii CORTEX_LEFT.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param num_vertices desired number of vertices
     * @param sphere_out the output sphere
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `SurfaceCreateSphereOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURFACE_CREATE_SPHERE_METADATA);
    const params = surface_create_sphere_params(num_vertices, sphere_out)
    return surface_create_sphere_execute(params, execution);
}


export {
      SURFACE_CREATE_SPHERE_METADATA,
      SurfaceCreateSphereOutputs,
      SurfaceCreateSphereParameters,
      surface_create_sphere,
      surface_create_sphere_params,
};
