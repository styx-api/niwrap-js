// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__NP_METADATA: Metadata = {
    id: "eeda44fa5bee1551ed881a09b3fe0993544de8ca.boutiques",
    name: "@np",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VNpParameters {
    "__STYXTYPE__": "@np";
    "prefix": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "@np": v__np_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "@np": v__np_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__np(...)`.
 *
 * @interface
 */
interface VNpOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output text file with the appropriate new prefix.
     */
    outfile: OutputPathType;
}


function v__np_params(
    prefix: string,
): VNpParameters {
    /**
     * Build parameters.
    
     * @param prefix The prefix to be checked.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "@np" as const,
        "prefix": prefix,
    };
    return params;
}


function v__np_cargs(
    params: VNpParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("@np");
    cargs.push((params["prefix"] ?? null));
    return cargs;
}


function v__np_outputs(
    params: VNpParameters,
    execution: Execution,
): VNpOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: VNpOutputs = {
        root: execution.outputFile("."),
        outfile: execution.outputFile(["appropriate_prefix.txt"].join('')),
    };
    return ret;
}


function v__np_execute(
    params: VNpParameters,
    execution: Execution,
): VNpOutputs {
    /**
     * Finds an appropriate new prefix to use, given the files you already have in your directory. It automatically creates a valid prefix when you are repeatedly running similar commands but do not want to delete previous output.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `VNpOutputs`).
     */
    params = execution.params(params)
    const cargs = v__np_cargs(params, execution)
    const ret = v__np_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v__np(
    prefix: string,
    runner: Runner | null = null,
): VNpOutputs {
    /**
     * Finds an appropriate new prefix to use, given the files you already have in your directory. It automatically creates a valid prefix when you are repeatedly running similar commands but do not want to delete previous output.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param prefix The prefix to be checked.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `VNpOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__NP_METADATA);
    const params = v__np_params(prefix)
    return v__np_execute(params, execution);
}


export {
      VNpOutputs,
      VNpParameters,
      V__NP_METADATA,
      v__np,
      v__np_params,
};
