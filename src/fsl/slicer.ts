// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SLICER_METADATA: Metadata = {
    id: "2c353c43c88ab74b4b6869b7fe3454ebdb0d76f8.boutiques",
    name: "slicer",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface SlicerParameters {
    "@type"?: "fsl/slicer";
    "in_file": InputPathType;
    "overlay_file"?: InputPathType | null | undefined;
    "label_slices": boolean;
    "colour_map"?: InputPathType | null | undefined;
    "scaling"?: number | null | undefined;
    "intensity_range"?: Array<number> | null | undefined;
    "threshold_edges"?: number | null | undefined;
    "dither_edges": boolean;
    "nearest_neighbour": boolean;
    "show_orientation": boolean;
    "red_dot_marker": boolean;
    "output_single_image"?: string | null | undefined;
    "output_sagittal_slice": boolean;
    "output_sagittal_slice_fname"?: string | null | undefined;
    "output_axial_slice": boolean;
    "output_axial_slice_fname"?: string | null | undefined;
    "output_coronal_slice": boolean;
    "output_coronal_slice_fname"?: string | null | undefined;
    "output_all_axial_slices": boolean;
    "output_all_axial_slices_fname"?: string | null | undefined;
    "output_sample_axial_slices": boolean;
    "output_sample_axial_slices_width"?: string | null | undefined;
    "output_sample_axial_slices_fname"?: string | null | undefined;
}
type SlicerParametersTagged = Required<Pick<SlicerParameters, '@type'>> & SlicerParameters;


/**
 * Output object returned when calling `SlicerParameters(...)`.
 *
 * @interface
 */
interface SlicerOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output sagittal slice.
     */
    sagittal_slice_outfile: OutputPathType | null;
    /**
     * Output axial slice.
     */
    axial_slice_outfile: OutputPathType | null;
    /**
     * Output coronal slice.
     */
    coronal_slice_outfile: OutputPathType | null;
    /**
     * Output mid-sagittal, -coronal, and -axial slices into one image.
     */
    single_image_outfile: OutputPathType | null;
    /**
     * File name of every <sample'th> axial slice output image.
     */
    all_axial_slices_outfile: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param in_file Input volume.
 * @param overlay_file Overlay volume.
 * @param label_slices Label slices with slice number.
 * @param colour_map Use different colour map from that specified in the header.
 * @param scaling Image scale.
 * @param intensity_range Specify intensity min and max for display range.
 * @param threshold_edges Use specified threshold for edges (if >0 use this proportion of max-min, if <0, use the absolute value)
 * @param dither_edges Produce semi-transparent (dithered) edges.
 * @param nearest_neighbour Use nearest neighbor interpolation for output.
 * @param show_orientation Do not put left-right labels in output
 * @param red_dot_marker Add a red dot marker to topright of image.
 * @param output_single_image Output mid-sagittal, -coronal, and -axial slices into one image.
 * @param output_sagittal_slice Output sagittal slice (if slice >0, it is a fraction of image dimension, if <0, it is absolute slice number).
 * @param output_sagittal_slice_fname Output file name sagittal slice.
 * @param output_axial_slice Output axial slice (if slice >0, it is a fraction of image dimension, if <0, it is absolute slice number).
 * @param output_axial_slice_fname Output file name axial slice.
 * @param output_coronal_slice Output coronal slice (if slice >0, it is a fraction of image dimension, if <0, it is absolute slice number).
 * @param output_coronal_slice_fname Output file name coronal slice.
 * @param output_all_axial_slices Maximum width of image of all axial slices.
 * @param output_all_axial_slices_fname File name of all axial slice output image.
 * @param output_sample_axial_slices Ouput every <sample>'th axial slice.
 * @param output_sample_axial_slices_width Width of every <sample'th> axial slice output image.
 * @param output_sample_axial_slices_fname File name of every <sample'th> axial slice output image.
 *
 * @returns Parameter dictionary
 */
function slicer_params(
    in_file: InputPathType,
    overlay_file: InputPathType | null = null,
    label_slices: boolean = false,
    colour_map: InputPathType | null = null,
    scaling: number | null = null,
    intensity_range: Array<number> | null = null,
    threshold_edges: number | null = null,
    dither_edges: boolean = false,
    nearest_neighbour: boolean = false,
    show_orientation: boolean = false,
    red_dot_marker: boolean = false,
    output_single_image: string | null = null,
    output_sagittal_slice: boolean = false,
    output_sagittal_slice_fname: string | null = null,
    output_axial_slice: boolean = false,
    output_axial_slice_fname: string | null = null,
    output_coronal_slice: boolean = false,
    output_coronal_slice_fname: string | null = null,
    output_all_axial_slices: boolean = false,
    output_all_axial_slices_fname: string | null = null,
    output_sample_axial_slices: boolean = false,
    output_sample_axial_slices_width: string | null = null,
    output_sample_axial_slices_fname: string | null = null,
): SlicerParametersTagged {
    const params = {
        "@type": "fsl/slicer" as const,
        "in_file": in_file,
        "label_slices": label_slices,
        "dither_edges": dither_edges,
        "nearest_neighbour": nearest_neighbour,
        "show_orientation": show_orientation,
        "red_dot_marker": red_dot_marker,
        "output_sagittal_slice": output_sagittal_slice,
        "output_axial_slice": output_axial_slice,
        "output_coronal_slice": output_coronal_slice,
        "output_all_axial_slices": output_all_axial_slices,
        "output_sample_axial_slices": output_sample_axial_slices,
    };
    if (overlay_file !== null) {
        params["overlay_file"] = overlay_file;
    }
    if (colour_map !== null) {
        params["colour_map"] = colour_map;
    }
    if (scaling !== null) {
        params["scaling"] = scaling;
    }
    if (intensity_range !== null) {
        params["intensity_range"] = intensity_range;
    }
    if (threshold_edges !== null) {
        params["threshold_edges"] = threshold_edges;
    }
    if (output_single_image !== null) {
        params["output_single_image"] = output_single_image;
    }
    if (output_sagittal_slice_fname !== null) {
        params["output_sagittal_slice_fname"] = output_sagittal_slice_fname;
    }
    if (output_axial_slice_fname !== null) {
        params["output_axial_slice_fname"] = output_axial_slice_fname;
    }
    if (output_coronal_slice_fname !== null) {
        params["output_coronal_slice_fname"] = output_coronal_slice_fname;
    }
    if (output_all_axial_slices_fname !== null) {
        params["output_all_axial_slices_fname"] = output_all_axial_slices_fname;
    }
    if (output_sample_axial_slices_width !== null) {
        params["output_sample_axial_slices_width"] = output_sample_axial_slices_width;
    }
    if (output_sample_axial_slices_fname !== null) {
        params["output_sample_axial_slices_fname"] = output_sample_axial_slices_fname;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function slicer_cargs(
    params: SlicerParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("slicer");
    cargs.push(execution.inputFile((params["in_file"] ?? null)));
    if ((params["overlay_file"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["overlay_file"] ?? null)));
    }
    if ((params["label_slices"] ?? false)) {
        cargs.push("-L");
    }
    if ((params["colour_map"] ?? null) !== null) {
        cargs.push(
            "-l",
            execution.inputFile((params["colour_map"] ?? null))
        );
    }
    if ((params["scaling"] ?? null) !== null) {
        cargs.push(
            "-s",
            String((params["scaling"] ?? null))
        );
    }
    if ((params["intensity_range"] ?? null) !== null) {
        cargs.push(
            "-i",
            ...(params["intensity_range"] ?? null).map(String)
        );
    }
    if ((params["threshold_edges"] ?? null) !== null) {
        cargs.push(
            "-e",
            String((params["threshold_edges"] ?? null))
        );
    }
    if ((params["dither_edges"] ?? false)) {
        cargs.push("-t");
    }
    if ((params["nearest_neighbour"] ?? false)) {
        cargs.push("-n");
    }
    if ((params["show_orientation"] ?? false)) {
        cargs.push("-u");
    }
    if ((params["red_dot_marker"] ?? false)) {
        cargs.push("-c");
    }
    if ((params["output_single_image"] ?? null) !== null) {
        cargs.push(
            "-a",
            (params["output_single_image"] ?? null)
        );
    }
    if ((params["output_sagittal_slice"] ?? false)) {
        cargs.push("-x");
    }
    if ((params["output_sagittal_slice_fname"] ?? null) !== null) {
        cargs.push((params["output_sagittal_slice_fname"] ?? null));
    }
    if ((params["output_axial_slice"] ?? false)) {
        cargs.push("-y");
    }
    if ((params["output_axial_slice_fname"] ?? null) !== null) {
        cargs.push((params["output_axial_slice_fname"] ?? null));
    }
    if ((params["output_coronal_slice"] ?? false)) {
        cargs.push("-z");
    }
    if ((params["output_coronal_slice_fname"] ?? null) !== null) {
        cargs.push((params["output_coronal_slice_fname"] ?? null));
    }
    if ((params["output_all_axial_slices"] ?? false)) {
        cargs.push("-A");
    }
    if ((params["output_all_axial_slices_fname"] ?? null) !== null) {
        cargs.push((params["output_all_axial_slices_fname"] ?? null));
    }
    if ((params["output_sample_axial_slices"] ?? false)) {
        cargs.push("-S");
    }
    if ((params["output_sample_axial_slices_width"] ?? null) !== null) {
        cargs.push((params["output_sample_axial_slices_width"] ?? null));
    }
    if ((params["output_sample_axial_slices_fname"] ?? null) !== null) {
        cargs.push((params["output_sample_axial_slices_fname"] ?? null));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function slicer_outputs(
    params: SlicerParameters,
    execution: Execution,
): SlicerOutputs {
    const ret: SlicerOutputs = {
        root: execution.outputFile("."),
        sagittal_slice_outfile: ((params["output_sagittal_slice_fname"] ?? null) !== null) ? execution.outputFile([(params["output_sagittal_slice_fname"] ?? null)].join('')) : null,
        axial_slice_outfile: ((params["output_axial_slice_fname"] ?? null) !== null) ? execution.outputFile([(params["output_axial_slice_fname"] ?? null)].join('')) : null,
        coronal_slice_outfile: ((params["output_coronal_slice_fname"] ?? null) !== null) ? execution.outputFile([(params["output_coronal_slice_fname"] ?? null)].join('')) : null,
        single_image_outfile: ((params["output_single_image"] ?? null) !== null) ? execution.outputFile([(params["output_single_image"] ?? null)].join('')) : null,
        all_axial_slices_outfile: ((params["output_sample_axial_slices_fname"] ?? null) !== null) ? execution.outputFile([(params["output_sample_axial_slices_fname"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * slicer
 *
 * the main program which takes in one or two input images and produces as many separate output pictures of slices as are requested. The basic output options (-x, -y and -z) produce single slice pictures. The more advanced options (-a, -A and -S) produce montages of various slices. slicer outputs PPM format pictures.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SlicerOutputs`).
 */
function slicer_execute(
    params: SlicerParameters,
    runner: Runner | null = null,
): SlicerOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SLICER_METADATA);
    params = execution.params(params)
    const cargs = slicer_cargs(params, execution)
    const ret = slicer_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * slicer
 *
 * the main program which takes in one or two input images and produces as many separate output pictures of slices as are requested. The basic output options (-x, -y and -z) produce single slice pictures. The more advanced options (-a, -A and -S) produce montages of various slices. slicer outputs PPM format pictures.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param in_file Input volume.
 * @param overlay_file Overlay volume.
 * @param label_slices Label slices with slice number.
 * @param colour_map Use different colour map from that specified in the header.
 * @param scaling Image scale.
 * @param intensity_range Specify intensity min and max for display range.
 * @param threshold_edges Use specified threshold for edges (if >0 use this proportion of max-min, if <0, use the absolute value)
 * @param dither_edges Produce semi-transparent (dithered) edges.
 * @param nearest_neighbour Use nearest neighbor interpolation for output.
 * @param show_orientation Do not put left-right labels in output
 * @param red_dot_marker Add a red dot marker to topright of image.
 * @param output_single_image Output mid-sagittal, -coronal, and -axial slices into one image.
 * @param output_sagittal_slice Output sagittal slice (if slice >0, it is a fraction of image dimension, if <0, it is absolute slice number).
 * @param output_sagittal_slice_fname Output file name sagittal slice.
 * @param output_axial_slice Output axial slice (if slice >0, it is a fraction of image dimension, if <0, it is absolute slice number).
 * @param output_axial_slice_fname Output file name axial slice.
 * @param output_coronal_slice Output coronal slice (if slice >0, it is a fraction of image dimension, if <0, it is absolute slice number).
 * @param output_coronal_slice_fname Output file name coronal slice.
 * @param output_all_axial_slices Maximum width of image of all axial slices.
 * @param output_all_axial_slices_fname File name of all axial slice output image.
 * @param output_sample_axial_slices Ouput every <sample>'th axial slice.
 * @param output_sample_axial_slices_width Width of every <sample'th> axial slice output image.
 * @param output_sample_axial_slices_fname File name of every <sample'th> axial slice output image.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SlicerOutputs`).
 */
function slicer(
    in_file: InputPathType,
    overlay_file: InputPathType | null = null,
    label_slices: boolean = false,
    colour_map: InputPathType | null = null,
    scaling: number | null = null,
    intensity_range: Array<number> | null = null,
    threshold_edges: number | null = null,
    dither_edges: boolean = false,
    nearest_neighbour: boolean = false,
    show_orientation: boolean = false,
    red_dot_marker: boolean = false,
    output_single_image: string | null = null,
    output_sagittal_slice: boolean = false,
    output_sagittal_slice_fname: string | null = null,
    output_axial_slice: boolean = false,
    output_axial_slice_fname: string | null = null,
    output_coronal_slice: boolean = false,
    output_coronal_slice_fname: string | null = null,
    output_all_axial_slices: boolean = false,
    output_all_axial_slices_fname: string | null = null,
    output_sample_axial_slices: boolean = false,
    output_sample_axial_slices_width: string | null = null,
    output_sample_axial_slices_fname: string | null = null,
    runner: Runner | null = null,
): SlicerOutputs {
    const params = slicer_params(in_file, overlay_file, label_slices, colour_map, scaling, intensity_range, threshold_edges, dither_edges, nearest_neighbour, show_orientation, red_dot_marker, output_single_image, output_sagittal_slice, output_sagittal_slice_fname, output_axial_slice, output_axial_slice_fname, output_coronal_slice, output_coronal_slice_fname, output_all_axial_slices, output_all_axial_slices_fname, output_sample_axial_slices, output_sample_axial_slices_width, output_sample_axial_slices_fname)
    return slicer_execute(params, runner);
}


export {
      SLICER_METADATA,
      SlicerOutputs,
      slicer,
      slicer_execute,
      slicer_params,
};
