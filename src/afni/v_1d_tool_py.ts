// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_1D_TOOL_PY_METADATA: Metadata = {
    id: "518c0251ec5c51cc40ce28708b52c3282abb8107.boutiques",
    name: "1d_tool.py",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V1dToolPyParameters {
    "@type": "afni.1d_tool.py";
    "infile": InputPathType;
    "write"?: string | null | undefined;
    "select_cols"?: string | null | undefined;
    "select_rows"?: string | null | undefined;
    "select_groups"?: string | null | undefined;
    "censor_motion"?: number | null | undefined;
    "pad_into_many_runs"?: string | null | undefined;
    "set_nruns"?: number | null | undefined;
    "set_run_lengths"?: string | null | undefined;
    "show_rows_cols": boolean;
    "transpose": boolean;
    "reverse": boolean;
    "show_max_displace": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.1d_tool.py": v_1d_tool_py_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.1d_tool.py": v_1d_tool_py_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_1d_tool_py(...)`.
 *
 * @interface
 */
interface V1dToolPyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Resulting 1D file
     */
    outfile: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param infile Input 1D file
 * @param write Output file to write results
 * @param select_cols Select specific columns
 * @param select_rows Select specific rows
 * @param select_groups Select columns by group numbers
 * @param censor_motion Generate a boolean censor file
 * @param pad_into_many_runs Pad a 1D file into many runs
 * @param set_nruns Set number of runs
 * @param set_run_lengths Set run lengths
 * @param show_rows_cols Show the number of rows and columns
 * @param transpose Transpose the input matrix
 * @param reverse Reverse the data over time
 * @param show_max_displace Show the maximum pairwise displacement
 *
 * @returns Parameter dictionary
 */
function v_1d_tool_py_params(
    infile: InputPathType,
    write: string | null = null,
    select_cols: string | null = null,
    select_rows: string | null = null,
    select_groups: string | null = null,
    censor_motion: number | null = null,
    pad_into_many_runs: string | null = null,
    set_nruns: number | null = null,
    set_run_lengths: string | null = null,
    show_rows_cols: boolean = false,
    transpose: boolean = false,
    reverse: boolean = false,
    show_max_displace: boolean = false,
): V1dToolPyParameters {
    const params = {
        "@type": "afni.1d_tool.py" as const,
        "infile": infile,
        "show_rows_cols": show_rows_cols,
        "transpose": transpose,
        "reverse": reverse,
        "show_max_displace": show_max_displace,
    };
    if (write !== null) {
        params["write"] = write;
    }
    if (select_cols !== null) {
        params["select_cols"] = select_cols;
    }
    if (select_rows !== null) {
        params["select_rows"] = select_rows;
    }
    if (select_groups !== null) {
        params["select_groups"] = select_groups;
    }
    if (censor_motion !== null) {
        params["censor_motion"] = censor_motion;
    }
    if (pad_into_many_runs !== null) {
        params["pad_into_many_runs"] = pad_into_many_runs;
    }
    if (set_nruns !== null) {
        params["set_nruns"] = set_nruns;
    }
    if (set_run_lengths !== null) {
        params["set_run_lengths"] = set_run_lengths;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_1d_tool_py_cargs(
    params: V1dToolPyParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("1d_tool.py");
    cargs.push(
        "-infile",
        execution.inputFile((params["infile"] ?? null))
    );
    if ((params["write"] ?? null) !== null) {
        cargs.push(
            "-write",
            (params["write"] ?? null)
        );
    }
    if ((params["select_cols"] ?? null) !== null) {
        cargs.push(
            "-select_cols",
            (params["select_cols"] ?? null)
        );
    }
    if ((params["select_rows"] ?? null) !== null) {
        cargs.push(
            "-select_rows",
            (params["select_rows"] ?? null)
        );
    }
    if ((params["select_groups"] ?? null) !== null) {
        cargs.push(
            "-select_groups",
            (params["select_groups"] ?? null)
        );
    }
    if ((params["censor_motion"] ?? null) !== null) {
        cargs.push(
            "-censor_motion",
            String((params["censor_motion"] ?? null))
        );
    }
    if ((params["pad_into_many_runs"] ?? null) !== null) {
        cargs.push(
            "-pad_into_many_runs",
            (params["pad_into_many_runs"] ?? null)
        );
    }
    if ((params["set_nruns"] ?? null) !== null) {
        cargs.push(
            "-set_nruns",
            String((params["set_nruns"] ?? null))
        );
    }
    if ((params["set_run_lengths"] ?? null) !== null) {
        cargs.push(
            "-set_run_lengths",
            (params["set_run_lengths"] ?? null)
        );
    }
    if ((params["show_rows_cols"] ?? null)) {
        cargs.push("-show_rows_cols");
    }
    if ((params["transpose"] ?? null)) {
        cargs.push("-transpose");
    }
    if ((params["reverse"] ?? null)) {
        cargs.push("-reverse");
    }
    if ((params["show_max_displace"] ?? null)) {
        cargs.push("-show_max_displace");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_1d_tool_py_outputs(
    params: V1dToolPyParameters,
    execution: Execution,
): V1dToolPyOutputs {
    const ret: V1dToolPyOutputs = {
        root: execution.outputFile("."),
        outfile: ((params["write"] ?? null) !== null) ? execution.outputFile([(params["write"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * A tool for manipulating and evaluating 1D files.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V1dToolPyOutputs`).
 */
function v_1d_tool_py_execute(
    params: V1dToolPyParameters,
    runner: Runner | null = null,
): V1dToolPyOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_1D_TOOL_PY_METADATA);
    params = execution.params(params)
    const cargs = v_1d_tool_py_cargs(params, execution)
    const ret = v_1d_tool_py_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * A tool for manipulating and evaluating 1D files.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param infile Input 1D file
 * @param write Output file to write results
 * @param select_cols Select specific columns
 * @param select_rows Select specific rows
 * @param select_groups Select columns by group numbers
 * @param censor_motion Generate a boolean censor file
 * @param pad_into_many_runs Pad a 1D file into many runs
 * @param set_nruns Set number of runs
 * @param set_run_lengths Set run lengths
 * @param show_rows_cols Show the number of rows and columns
 * @param transpose Transpose the input matrix
 * @param reverse Reverse the data over time
 * @param show_max_displace Show the maximum pairwise displacement
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V1dToolPyOutputs`).
 */
function v_1d_tool_py(
    infile: InputPathType,
    write: string | null = null,
    select_cols: string | null = null,
    select_rows: string | null = null,
    select_groups: string | null = null,
    censor_motion: number | null = null,
    pad_into_many_runs: string | null = null,
    set_nruns: number | null = null,
    set_run_lengths: string | null = null,
    show_rows_cols: boolean = false,
    transpose: boolean = false,
    reverse: boolean = false,
    show_max_displace: boolean = false,
    runner: Runner | null = null,
): V1dToolPyOutputs {
    const params = v_1d_tool_py_params(infile, write, select_cols, select_rows, select_groups, censor_motion, pad_into_many_runs, set_nruns, set_run_lengths, show_rows_cols, transpose, reverse, show_max_displace)
    return v_1d_tool_py_execute(params, runner);
}


export {
      V1dToolPyOutputs,
      V1dToolPyParameters,
      V_1D_TOOL_PY_METADATA,
      v_1d_tool_py,
      v_1d_tool_py_execute,
      v_1d_tool_py_params,
};
