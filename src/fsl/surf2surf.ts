// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURF2SURF_METADATA: Metadata = {
    id: "d630f816081588c108600317905b3580896641e9.boutiques",
    name: "surf2surf",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface Surf2surfParameters {
    "@type"?: "fsl/surf2surf";
    "input_surface": InputPathType;
    "output_surface": InputPathType;
    "input_convention"?: string | null | undefined;
    "output_convention"?: string | null | undefined;
    "input_ref_volume"?: InputPathType | null | undefined;
    "output_ref_volume"?: InputPathType | null | undefined;
    "transform"?: InputPathType | null | undefined;
    "output_type"?: string | null | undefined;
    "output_values"?: string | null | undefined;
}
type Surf2surfParametersTagged = Required<Pick<Surf2surfParameters, '@type'>> & Surf2surfParameters;


/**
 * Output object returned when calling `Surf2surfParameters(...)`.
 *
 * @interface
 */
interface Surf2surfOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_surface Input surface
 * @param output_surface Output surface
 * @param input_convention Input convention [default=caret] - only used if output convention is different
 * @param output_convention Output convention [default=same as input]
 * @param input_ref_volume Input reference volume - Must set this if changing conventions
 * @param output_ref_volume Output reference volume [default=same as input]
 * @param transform In-to-out ASCII matrix or out-to-in warpfield [default=identity]
 * @param output_type Output type: ASCII, VTK, GIFTI_ASCII, GIFTI_BIN, GIFTI_BIN_GZ (default)
 * @param output_values Set output scalar values (e.g. --values=mysurface.func.gii or --values=1)
 *
 * @returns Parameter dictionary
 */
function surf2surf_params(
    input_surface: InputPathType,
    output_surface: InputPathType,
    input_convention: string | null = null,
    output_convention: string | null = null,
    input_ref_volume: InputPathType | null = null,
    output_ref_volume: InputPathType | null = null,
    transform: InputPathType | null = null,
    output_type: string | null = null,
    output_values: string | null = null,
): Surf2surfParametersTagged {
    const params = {
        "@type": "fsl/surf2surf" as const,
        "input_surface": input_surface,
        "output_surface": output_surface,
    };
    if (input_convention !== null) {
        params["input_convention"] = input_convention;
    }
    if (output_convention !== null) {
        params["output_convention"] = output_convention;
    }
    if (input_ref_volume !== null) {
        params["input_ref_volume"] = input_ref_volume;
    }
    if (output_ref_volume !== null) {
        params["output_ref_volume"] = output_ref_volume;
    }
    if (transform !== null) {
        params["transform"] = transform;
    }
    if (output_type !== null) {
        params["output_type"] = output_type;
    }
    if (output_values !== null) {
        params["output_values"] = output_values;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function surf2surf_cargs(
    params: Surf2surfParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("surf2surf");
    cargs.push(["--surfin=", execution.inputFile((params["input_surface"] ?? null))].join(''));
    cargs.push(["--surfout=", execution.inputFile((params["output_surface"] ?? null))].join(''));
    if ((params["input_convention"] ?? null) !== null) {
        cargs.push(
            "--convin",
            (params["input_convention"] ?? null)
        );
    }
    if ((params["output_convention"] ?? null) !== null) {
        cargs.push(
            "--convout",
            (params["output_convention"] ?? null)
        );
    }
    if ((params["input_ref_volume"] ?? null) !== null) {
        cargs.push(
            "--volin",
            execution.inputFile((params["input_ref_volume"] ?? null))
        );
    }
    if ((params["output_ref_volume"] ?? null) !== null) {
        cargs.push(
            "--volout",
            execution.inputFile((params["output_ref_volume"] ?? null))
        );
    }
    if ((params["transform"] ?? null) !== null) {
        cargs.push(
            "--xfm",
            execution.inputFile((params["transform"] ?? null))
        );
    }
    if ((params["output_type"] ?? null) !== null) {
        cargs.push(
            "--outputtype",
            (params["output_type"] ?? null)
        );
    }
    if ((params["output_values"] ?? null) !== null) {
        cargs.push(
            "--values",
            (params["output_values"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function surf2surf_outputs(
    params: Surf2surfParameters,
    execution: Execution,
): Surf2surfOutputs {
    const ret: Surf2surfOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * surf2surf
 *
 * Conversions between surface formats and/or conventions.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Surf2surfOutputs`).
 */
function surf2surf_execute(
    params: Surf2surfParameters,
    runner: Runner | null = null,
): Surf2surfOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURF2SURF_METADATA);
    params = execution.params(params)
    const cargs = surf2surf_cargs(params, execution)
    const ret = surf2surf_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * surf2surf
 *
 * Conversions between surface formats and/or conventions.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param input_surface Input surface
 * @param output_surface Output surface
 * @param input_convention Input convention [default=caret] - only used if output convention is different
 * @param output_convention Output convention [default=same as input]
 * @param input_ref_volume Input reference volume - Must set this if changing conventions
 * @param output_ref_volume Output reference volume [default=same as input]
 * @param transform In-to-out ASCII matrix or out-to-in warpfield [default=identity]
 * @param output_type Output type: ASCII, VTK, GIFTI_ASCII, GIFTI_BIN, GIFTI_BIN_GZ (default)
 * @param output_values Set output scalar values (e.g. --values=mysurface.func.gii or --values=1)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Surf2surfOutputs`).
 */
function surf2surf(
    input_surface: InputPathType,
    output_surface: InputPathType,
    input_convention: string | null = null,
    output_convention: string | null = null,
    input_ref_volume: InputPathType | null = null,
    output_ref_volume: InputPathType | null = null,
    transform: InputPathType | null = null,
    output_type: string | null = null,
    output_values: string | null = null,
    runner: Runner | null = null,
): Surf2surfOutputs {
    const params = surf2surf_params(input_surface, output_surface, input_convention, output_convention, input_ref_volume, output_ref_volume, transform, output_type, output_values)
    return surf2surf_execute(params, runner);
}


export {
      SURF2SURF_METADATA,
      Surf2surfOutputs,
      surf2surf,
      surf2surf_execute,
      surf2surf_params,
};
