// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_ANHIST_METADATA: Metadata = {
    id: "0c0bd91348202d1b0045fb9d1e10c4cafea33971.boutiques",
    name: "3dAnhist",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dAnhistParameters {
    "@type": "afni.3dAnhist";
    "dataset": InputPathType;
    "quiet": boolean;
    "dump_histogram": boolean;
    "no_scurve": boolean;
    "winsorize"?: string | null | undefined;
    "top_2peaks": boolean;
    "label"?: string | null | undefined;
    "filename"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dAnhist": v_3d_anhist_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dAnhist": v_3d_anhist_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_anhist(...)`.
 *
 * @interface
 */
interface V3dAnhistOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Dumped histogram data
     */
    output_1_d: OutputPathType;
    /**
     * Plot of histogram data
     */
    output_ps: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param dataset Input dataset, should be T1-weighted high-res brain image (shorts only).
 * @param quiet Suppress progress reports.
 * @param dump_histogram Dump histogram data to Anhist.1D and plot to Anhist.ps.
 * @param no_scurve Do not fit histogram with curves.
 * @param winsorize Apply Winsorizing filter prior to histogram scan. Can specify number of times (e.g., -w7).
 * @param top_2peaks Analyze top 2 peaks only, for overlap, etc.
 * @param label Use specified label for Anhist.ps plot file instead of the input dataset filename.
 * @param filename Use specified filename instead of 'Anhist'.
 *
 * @returns Parameter dictionary
 */
function v_3d_anhist_params(
    dataset: InputPathType,
    quiet: boolean = false,
    dump_histogram: boolean = false,
    no_scurve: boolean = false,
    winsorize: string | null = null,
    top_2peaks: boolean = false,
    label: string | null = null,
    filename: string | null = null,
): V3dAnhistParameters {
    const params = {
        "@type": "afni.3dAnhist" as const,
        "dataset": dataset,
        "quiet": quiet,
        "dump_histogram": dump_histogram,
        "no_scurve": no_scurve,
        "top_2peaks": top_2peaks,
    };
    if (winsorize !== null) {
        params["winsorize"] = winsorize;
    }
    if (label !== null) {
        params["label"] = label;
    }
    if (filename !== null) {
        params["filename"] = filename;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_anhist_cargs(
    params: V3dAnhistParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dAnhist");
    cargs.push(execution.inputFile((params["dataset"] ?? null)));
    if ((params["quiet"] ?? null)) {
        cargs.push("-q");
    }
    if ((params["dump_histogram"] ?? null)) {
        cargs.push("-h");
    }
    if ((params["no_scurve"] ?? null)) {
        cargs.push("-F");
    }
    if ((params["winsorize"] ?? null) !== null) {
        cargs.push(
            "-w",
            (params["winsorize"] ?? null)
        );
    }
    if ((params["top_2peaks"] ?? null)) {
        cargs.push("-2");
    }
    if ((params["label"] ?? null) !== null) {
        cargs.push(
            "-label",
            (params["label"] ?? null)
        );
    }
    if ((params["filename"] ?? null) !== null) {
        cargs.push(
            "-fname",
            (params["filename"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_anhist_outputs(
    params: V3dAnhistParameters,
    execution: Execution,
): V3dAnhistOutputs {
    const ret: V3dAnhistOutputs = {
        root: execution.outputFile("."),
        output_1_d: execution.outputFile(["Anhist.1D"].join('')),
        output_ps: execution.outputFile(["Anhist.ps"].join('')),
    };
    return ret;
}


/**
 * 3dAnhist
 *
 * Tool to analyze histogram peaks in a T1-weighted high-res brain image dataset.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dAnhistOutputs`).
 */
function v_3d_anhist_execute(
    params: V3dAnhistParameters,
    runner: Runner | null = null,
): V3dAnhistOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_ANHIST_METADATA);
    params = execution.params(params)
    const cargs = v_3d_anhist_cargs(params, execution)
    const ret = v_3d_anhist_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dAnhist
 *
 * Tool to analyze histogram peaks in a T1-weighted high-res brain image dataset.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param dataset Input dataset, should be T1-weighted high-res brain image (shorts only).
 * @param quiet Suppress progress reports.
 * @param dump_histogram Dump histogram data to Anhist.1D and plot to Anhist.ps.
 * @param no_scurve Do not fit histogram with curves.
 * @param winsorize Apply Winsorizing filter prior to histogram scan. Can specify number of times (e.g., -w7).
 * @param top_2peaks Analyze top 2 peaks only, for overlap, etc.
 * @param label Use specified label for Anhist.ps plot file instead of the input dataset filename.
 * @param filename Use specified filename instead of 'Anhist'.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dAnhistOutputs`).
 */
function v_3d_anhist(
    dataset: InputPathType,
    quiet: boolean = false,
    dump_histogram: boolean = false,
    no_scurve: boolean = false,
    winsorize: string | null = null,
    top_2peaks: boolean = false,
    label: string | null = null,
    filename: string | null = null,
    runner: Runner | null = null,
): V3dAnhistOutputs {
    const params = v_3d_anhist_params(dataset, quiet, dump_histogram, no_scurve, winsorize, top_2peaks, label, filename)
    return v_3d_anhist_execute(params, runner);
}


export {
      V3dAnhistOutputs,
      V3dAnhistParameters,
      V_3D_ANHIST_METADATA,
      v_3d_anhist,
      v_3d_anhist_execute,
      v_3d_anhist_params,
};
