// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const BASIL_VAR_METADATA: Metadata = {
    id: "af55fce1002b3f7888f0adf5f7437293bdd2293e.boutiques",
    name: "basil_var",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface BasilVarParameters {
    "@type": "fsl.basil_var";
    "results_dir": string;
    "mask_image": InputPathType;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.basil_var": basil_var_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `basil_var(...)`.
 *
 * @interface
 */
interface BasilVarOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param results_dir BASIL results directory
 * @param mask_image Mask image
 *
 * @returns Parameter dictionary
 */
function basil_var_params(
    results_dir: string,
    mask_image: InputPathType,
): BasilVarParameters {
    const params = {
        "@type": "fsl.basil_var" as const,
        "results_dir": results_dir,
        "mask_image": mask_image,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function basil_var_cargs(
    params: BasilVarParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("basil_var");
    cargs.push(
        "-d",
        (params["results_dir"] ?? null)
    );
    cargs.push(
        "-m",
        execution.inputFile((params["mask_image"] ?? null))
    );
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function basil_var_outputs(
    params: BasilVarParameters,
    execution: Execution,
): BasilVarOutputs {
    const ret: BasilVarOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * basil_var
 *
 * Variance calculator for BASIL.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `BasilVarOutputs`).
 */
function basil_var_execute(
    params: BasilVarParameters,
    runner: Runner | null = null,
): BasilVarOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(BASIL_VAR_METADATA);
    params = execution.params(params)
    const cargs = basil_var_cargs(params, execution)
    const ret = basil_var_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * basil_var
 *
 * Variance calculator for BASIL.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param results_dir BASIL results directory
 * @param mask_image Mask image
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `BasilVarOutputs`).
 */
function basil_var(
    results_dir: string,
    mask_image: InputPathType,
    runner: Runner | null = null,
): BasilVarOutputs {
    const params = basil_var_params(results_dir, mask_image)
    return basil_var_execute(params, runner);
}


export {
      BASIL_VAR_METADATA,
      BasilVarOutputs,
      BasilVarParameters,
      basil_var,
      basil_var_execute,
      basil_var_params,
};
