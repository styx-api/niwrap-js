// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_LINEAR_REGISTER_METADATA: Metadata = {
    id: "03a9fde6f0cc60af3c16aaa22653bbae420dc872.boutiques",
    name: "mri_linear_register",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriLinearRegisterParameters {
    "@type": "freesurfer.mri_linear_register";
    "input_brain": InputPathType;
    "template": InputPathType;
    "output_file": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_linear_register": mri_linear_register_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_linear_register": mri_linear_register_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_linear_register(...)`.
 *
 * @interface
 */
interface MriLinearRegisterOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The registered brain image
     */
    output_registered_image: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_brain Input brain image to be registered
 * @param template Template to which the brain image will be registered
 * @param output_file Output file name for the registered brain image
 *
 * @returns Parameter dictionary
 */
function mri_linear_register_params(
    input_brain: InputPathType,
    template: InputPathType,
    output_file: string,
): MriLinearRegisterParameters {
    const params = {
        "@type": "freesurfer.mri_linear_register" as const,
        "input_brain": input_brain,
        "template": template,
        "output_file": output_file,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_linear_register_cargs(
    params: MriLinearRegisterParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_linear_register");
    cargs.push(execution.inputFile((params["input_brain"] ?? null)));
    cargs.push(execution.inputFile((params["template"] ?? null)));
    cargs.push((params["output_file"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_linear_register_outputs(
    params: MriLinearRegisterParameters,
    execution: Execution,
): MriLinearRegisterOutputs {
    const ret: MriLinearRegisterOutputs = {
        root: execution.outputFile("."),
        output_registered_image: execution.outputFile([(params["output_file"] ?? null)].join('')),
    };
    return ret;
}


/**
 * A tool for linear registration of MRI brain images to a template.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriLinearRegisterOutputs`).
 */
function mri_linear_register_execute(
    params: MriLinearRegisterParameters,
    runner: Runner | null = null,
): MriLinearRegisterOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_LINEAR_REGISTER_METADATA);
    params = execution.params(params)
    const cargs = mri_linear_register_cargs(params, execution)
    const ret = mri_linear_register_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * A tool for linear registration of MRI brain images to a template.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_brain Input brain image to be registered
 * @param template Template to which the brain image will be registered
 * @param output_file Output file name for the registered brain image
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriLinearRegisterOutputs`).
 */
function mri_linear_register(
    input_brain: InputPathType,
    template: InputPathType,
    output_file: string,
    runner: Runner | null = null,
): MriLinearRegisterOutputs {
    const params = mri_linear_register_params(input_brain, template, output_file)
    return mri_linear_register_execute(params, runner);
}


export {
      MRI_LINEAR_REGISTER_METADATA,
      MriLinearRegisterOutputs,
      MriLinearRegisterParameters,
      mri_linear_register,
      mri_linear_register_execute,
      mri_linear_register_params,
};
