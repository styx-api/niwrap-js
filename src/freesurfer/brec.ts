// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const BREC_METADATA: Metadata = {
    id: "b85a2d15360507de8faa909c425df2fb82e4ca9d.boutiques",
    name: "brec",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface BrecParameters {
    "@type": "freesurfer.brec";
    "my_file": string;
    "depth_limit": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.brec": brec_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `brec(...)`.
 *
 * @interface
 */
interface BrecOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param my_file Input file with .rec extension
 * @param depth_limit Optional depth limit flag
 *
 * @returns Parameter dictionary
 */
function brec_params(
    my_file: string,
    depth_limit: boolean = false,
): BrecParameters {
    const params = {
        "@type": "freesurfer.brec" as const,
        "my_file": my_file,
        "depth_limit": depth_limit,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function brec_cargs(
    params: BrecParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("brec");
    cargs.push((params["my_file"] ?? null));
    if ((params["depth_limit"] ?? null)) {
        cargs.push("-depth_limit");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function brec_outputs(
    params: BrecParameters,
    execution: Execution,
): BrecOutputs {
    const ret: BrecOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * brec
 *
 * A description for brec tool could not be retrieved.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `BrecOutputs`).
 */
function brec_execute(
    params: BrecParameters,
    runner: Runner | null = null,
): BrecOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(BREC_METADATA);
    params = execution.params(params)
    const cargs = brec_cargs(params, execution)
    const ret = brec_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * brec
 *
 * A description for brec tool could not be retrieved.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param my_file Input file with .rec extension
 * @param depth_limit Optional depth limit flag
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `BrecOutputs`).
 */
function brec(
    my_file: string,
    depth_limit: boolean = false,
    runner: Runner | null = null,
): BrecOutputs {
    const params = brec_params(my_file, depth_limit)
    return brec_execute(params, runner);
}


export {
      BREC_METADATA,
      BrecOutputs,
      BrecParameters,
      brec,
      brec_execute,
      brec_params,
};
