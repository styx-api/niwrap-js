// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_REMOVE_INTERSECTION_METADATA: Metadata = {
    id: "1ca3bd6841297be89ed7859d4b42f39e0a47e3de.boutiques",
    name: "mris_remove_intersection",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisRemoveIntersectionParameters {
    "__STYXTYPE__": "mris_remove_intersection";
    "surface_in_file": InputPathType;
    "corrected_surface_out_file": string;
    "fill_holes": boolean;
    "map_option"?: InputPathType | null | undefined;
    "projdistmm"?: number | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mris_remove_intersection": mris_remove_intersection_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mris_remove_intersection": mris_remove_intersection_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_remove_intersection(...)`.
 *
 * @interface
 */
interface MrisRemoveIntersectionOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Corrected surface output file.
     */
    out_corrected_surface: OutputPathType;
    /**
     * Binary map of intersections.
     */
    out_map_file: OutputPathType | null;
}


function mris_remove_intersection_params(
    surface_in_file: InputPathType,
    corrected_surface_out_file: string,
    fill_holes: boolean = false,
    map_option: InputPathType | null = null,
    projdistmm: number | null = null,
): MrisRemoveIntersectionParameters {
    /**
     * Build parameters.
    
     * @param surface_in_file Input surface file.
     * @param corrected_surface_out_file Corrected output surface file.
     * @param fill_holes Fill any holes in the intersection mark map and include them in the fix.
     * @param map_option Create a binary map of intersections.
     * @param projdistmm Projection distance in mm when using -map option.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mris_remove_intersection" as const,
        "surface_in_file": surface_in_file,
        "corrected_surface_out_file": corrected_surface_out_file,
        "fill_holes": fill_holes,
    };
    if (map_option !== null) {
        params["map_option"] = map_option;
    }
    if (projdistmm !== null) {
        params["projdistmm"] = projdistmm;
    }
    return params;
}


function mris_remove_intersection_cargs(
    params: MrisRemoveIntersectionParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mris_remove_intersection");
    cargs.push(execution.inputFile((params["surface_in_file"] ?? null)));
    cargs.push((params["corrected_surface_out_file"] ?? null));
    if ((params["fill_holes"] ?? null)) {
        cargs.push("-fill-holes");
    }
    if ((params["map_option"] ?? null) !== null) {
        cargs.push(
            "-map",
            execution.inputFile((params["map_option"] ?? null))
        );
    }
    if ((params["projdistmm"] ?? null) !== null) {
        cargs.push(String((params["projdistmm"] ?? null)));
    }
    return cargs;
}


function mris_remove_intersection_outputs(
    params: MrisRemoveIntersectionParameters,
    execution: Execution,
): MrisRemoveIntersectionOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MrisRemoveIntersectionOutputs = {
        root: execution.outputFile("."),
        out_corrected_surface: execution.outputFile([(params["corrected_surface_out_file"] ?? null)].join('')),
        out_map_file: ((params["map_option"] ?? null) !== null) ? execution.outputFile([path.basename((params["map_option"] ?? null))].join('')) : null,
    };
    return ret;
}


function mris_remove_intersection_execute(
    params: MrisRemoveIntersectionParameters,
    execution: Execution,
): MrisRemoveIntersectionOutputs {
    /**
     * Tool to remove intersections in surface files.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MrisRemoveIntersectionOutputs`).
     */
    params = execution.params(params)
    const cargs = mris_remove_intersection_cargs(params, execution)
    const ret = mris_remove_intersection_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mris_remove_intersection(
    surface_in_file: InputPathType,
    corrected_surface_out_file: string,
    fill_holes: boolean = false,
    map_option: InputPathType | null = null,
    projdistmm: number | null = null,
    runner: Runner | null = null,
): MrisRemoveIntersectionOutputs {
    /**
     * Tool to remove intersections in surface files.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param surface_in_file Input surface file.
     * @param corrected_surface_out_file Corrected output surface file.
     * @param fill_holes Fill any holes in the intersection mark map and include them in the fix.
     * @param map_option Create a binary map of intersections.
     * @param projdistmm Projection distance in mm when using -map option.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MrisRemoveIntersectionOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_REMOVE_INTERSECTION_METADATA);
    const params = mris_remove_intersection_params(surface_in_file, corrected_surface_out_file, fill_holes, map_option, projdistmm)
    return mris_remove_intersection_execute(params, execution);
}


export {
      MRIS_REMOVE_INTERSECTION_METADATA,
      MrisRemoveIntersectionOutputs,
      MrisRemoveIntersectionParameters,
      mris_remove_intersection,
      mris_remove_intersection_params,
};
