// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const CREATE_SIGNED_DISTANCE_VOLUME_METADATA: Metadata = {
    id: "a3c155c43199f00044e684ccce6c00d843dcec5a.boutiques",
    name: "create-signed-distance-volume",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface CreateSignedDistanceVolumeParameters {
    "@type": "workbench.create-signed-distance-volume";
    "surface": InputPathType;
    "refspace": string;
    "outvol": string;
    "opt_roi_out_roi_vol"?: string | null | undefined;
    "opt_fill_value_value"?: number | null | undefined;
    "opt_exact_limit_dist"?: number | null | undefined;
    "opt_approx_limit_dist"?: number | null | undefined;
    "opt_approx_neighborhood_num"?: number | null | undefined;
    "opt_winding_method"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.create-signed-distance-volume": create_signed_distance_volume_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.create-signed-distance-volume": create_signed_distance_volume_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `create_signed_distance_volume(...)`.
 *
 * @interface
 */
interface CreateSignedDistanceVolumeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output volume
     */
    outvol: OutputPathType;
    /**
     * output an roi volume of where the output has a computed value: the output roi volume
     */
    opt_roi_out_roi_vol: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param surface the input surface
 * @param refspace a volume in the desired output space (dims, spacing, origin)
 * @param outvol the output volume
 * @param opt_roi_out_roi_vol output an roi volume of where the output has a computed value: the output roi volume
 * @param opt_fill_value_value specify a value to put in all voxels that don't get assigned a distance: value to fill with (default 0)
 * @param opt_exact_limit_dist specify distance for exact output: distance in mm (default 5)
 * @param opt_approx_limit_dist specify distance for approximate output: distance in mm (default 20)
 * @param opt_approx_neighborhood_num voxel neighborhood for approximate calculation: size of neighborhood cube measured from center to face, in voxels (default 2 = 5x5x5)
 * @param opt_winding_method winding method for point inside surface test: name of the method (default EVEN_ODD)
 *
 * @returns Parameter dictionary
 */
function create_signed_distance_volume_params(
    surface: InputPathType,
    refspace: string,
    outvol: string,
    opt_roi_out_roi_vol: string | null = null,
    opt_fill_value_value: number | null = null,
    opt_exact_limit_dist: number | null = null,
    opt_approx_limit_dist: number | null = null,
    opt_approx_neighborhood_num: number | null = null,
    opt_winding_method: string | null = null,
): CreateSignedDistanceVolumeParameters {
    const params = {
        "@type": "workbench.create-signed-distance-volume" as const,
        "surface": surface,
        "refspace": refspace,
        "outvol": outvol,
    };
    if (opt_roi_out_roi_vol !== null) {
        params["opt_roi_out_roi_vol"] = opt_roi_out_roi_vol;
    }
    if (opt_fill_value_value !== null) {
        params["opt_fill_value_value"] = opt_fill_value_value;
    }
    if (opt_exact_limit_dist !== null) {
        params["opt_exact_limit_dist"] = opt_exact_limit_dist;
    }
    if (opt_approx_limit_dist !== null) {
        params["opt_approx_limit_dist"] = opt_approx_limit_dist;
    }
    if (opt_approx_neighborhood_num !== null) {
        params["opt_approx_neighborhood_num"] = opt_approx_neighborhood_num;
    }
    if (opt_winding_method !== null) {
        params["opt_winding_method"] = opt_winding_method;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function create_signed_distance_volume_cargs(
    params: CreateSignedDistanceVolumeParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-create-signed-distance-volume");
    cargs.push(execution.inputFile((params["surface"] ?? null)));
    cargs.push((params["refspace"] ?? null));
    cargs.push((params["outvol"] ?? null));
    if ((params["opt_roi_out_roi_vol"] ?? null) !== null) {
        cargs.push(
            "-roi-out",
            (params["opt_roi_out_roi_vol"] ?? null)
        );
    }
    if ((params["opt_fill_value_value"] ?? null) !== null) {
        cargs.push(
            "-fill-value",
            String((params["opt_fill_value_value"] ?? null))
        );
    }
    if ((params["opt_exact_limit_dist"] ?? null) !== null) {
        cargs.push(
            "-exact-limit",
            String((params["opt_exact_limit_dist"] ?? null))
        );
    }
    if ((params["opt_approx_limit_dist"] ?? null) !== null) {
        cargs.push(
            "-approx-limit",
            String((params["opt_approx_limit_dist"] ?? null))
        );
    }
    if ((params["opt_approx_neighborhood_num"] ?? null) !== null) {
        cargs.push(
            "-approx-neighborhood",
            String((params["opt_approx_neighborhood_num"] ?? null))
        );
    }
    if ((params["opt_winding_method"] ?? null) !== null) {
        cargs.push(
            "-winding",
            (params["opt_winding_method"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function create_signed_distance_volume_outputs(
    params: CreateSignedDistanceVolumeParameters,
    execution: Execution,
): CreateSignedDistanceVolumeOutputs {
    const ret: CreateSignedDistanceVolumeOutputs = {
        root: execution.outputFile("."),
        outvol: execution.outputFile([(params["outvol"] ?? null)].join('')),
        opt_roi_out_roi_vol: ((params["opt_roi_out_roi_vol"] ?? null) !== null) ? execution.outputFile([(params["opt_roi_out_roi_vol"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * create-signed-distance-volume
 *
 * Create signed distance volume from surface.
 *
 * Computes the signed distance function of the surface.  Exact distance is calculated by finding the closest point on any surface triangle to the center of the voxel.  Approximate distance is calculated starting with these distances, using dijkstra's method with a neighborhood of voxels.  Specifying too small of an exact distance may produce unexpected results.  Valid specifiers for winding methods are as follows:
 *
 * EVEN_ODD (default)
 * NEGATIVE
 * NONZERO
 * NORMALS
 *
 * The NORMALS method uses the normals of triangles and edges, or the closest triangle hit by a ray from the point.  This method may be slightly faster, but is only reliable for a closed surface that does not cross through itself.  All other methods count entry (positive) and exit (negative) crossings of a vertical ray from the point, then counts as inside if the total is odd, negative, or nonzero, respectively.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CreateSignedDistanceVolumeOutputs`).
 */
function create_signed_distance_volume_execute(
    params: CreateSignedDistanceVolumeParameters,
    runner: Runner | null = null,
): CreateSignedDistanceVolumeOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(CREATE_SIGNED_DISTANCE_VOLUME_METADATA);
    params = execution.params(params)
    const cargs = create_signed_distance_volume_cargs(params, execution)
    const ret = create_signed_distance_volume_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * create-signed-distance-volume
 *
 * Create signed distance volume from surface.
 *
 * Computes the signed distance function of the surface.  Exact distance is calculated by finding the closest point on any surface triangle to the center of the voxel.  Approximate distance is calculated starting with these distances, using dijkstra's method with a neighborhood of voxels.  Specifying too small of an exact distance may produce unexpected results.  Valid specifiers for winding methods are as follows:
 *
 * EVEN_ODD (default)
 * NEGATIVE
 * NONZERO
 * NORMALS
 *
 * The NORMALS method uses the normals of triangles and edges, or the closest triangle hit by a ray from the point.  This method may be slightly faster, but is only reliable for a closed surface that does not cross through itself.  All other methods count entry (positive) and exit (negative) crossings of a vertical ray from the point, then counts as inside if the total is odd, negative, or nonzero, respectively.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param surface the input surface
 * @param refspace a volume in the desired output space (dims, spacing, origin)
 * @param outvol the output volume
 * @param opt_roi_out_roi_vol output an roi volume of where the output has a computed value: the output roi volume
 * @param opt_fill_value_value specify a value to put in all voxels that don't get assigned a distance: value to fill with (default 0)
 * @param opt_exact_limit_dist specify distance for exact output: distance in mm (default 5)
 * @param opt_approx_limit_dist specify distance for approximate output: distance in mm (default 20)
 * @param opt_approx_neighborhood_num voxel neighborhood for approximate calculation: size of neighborhood cube measured from center to face, in voxels (default 2 = 5x5x5)
 * @param opt_winding_method winding method for point inside surface test: name of the method (default EVEN_ODD)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `CreateSignedDistanceVolumeOutputs`).
 */
function create_signed_distance_volume(
    surface: InputPathType,
    refspace: string,
    outvol: string,
    opt_roi_out_roi_vol: string | null = null,
    opt_fill_value_value: number | null = null,
    opt_exact_limit_dist: number | null = null,
    opt_approx_limit_dist: number | null = null,
    opt_approx_neighborhood_num: number | null = null,
    opt_winding_method: string | null = null,
    runner: Runner | null = null,
): CreateSignedDistanceVolumeOutputs {
    const params = create_signed_distance_volume_params(surface, refspace, outvol, opt_roi_out_roi_vol, opt_fill_value_value, opt_exact_limit_dist, opt_approx_limit_dist, opt_approx_neighborhood_num, opt_winding_method)
    return create_signed_distance_volume_execute(params, runner);
}


export {
      CREATE_SIGNED_DISTANCE_VOLUME_METADATA,
      CreateSignedDistanceVolumeOutputs,
      CreateSignedDistanceVolumeParameters,
      create_signed_distance_volume,
      create_signed_distance_volume_execute,
      create_signed_distance_volume_params,
};
