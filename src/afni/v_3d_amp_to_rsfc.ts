// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_AMP_TO_RSFC_METADATA: Metadata = {
    id: "d93e2359a57d357c7b1980a76378dde19262abcb.boutiques",
    name: "3dAmpToRSFC",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dAmpToRsfcParameters {
    "@type": "afni.3dAmpToRSFC";
    "in_amp"?: InputPathType | null | undefined;
    "in_pow"?: InputPathType | null | undefined;
    "prefix": string;
    "band": Array<number>;
    "mask"?: InputPathType | null | undefined;
    "nifti": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dAmpToRSFC": v_3d_amp_to_rsfc_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dAmpToRSFC": v_3d_amp_to_rsfc_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_amp_to_rsfc(...)`.
 *
 * @interface
 */
interface V3dAmpToRsfcOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Amplitude of low frequency fluctuations (L1 sum).
     */
    output_alff: OutputPathType;
    /**
     * ALFF divided by the mean value within the input/estimated whole brain mask (mean-scaled ALFF).
     */
    output_malff: OutputPathType;
    /**
     * ALFF divided by sum of full amplitude spectrum (fractional ALFF).
     */
    output_falff: OutputPathType;
    /**
     * Square-root of summed square of low frequency fluctuations (L2 sum).
     */
    output_rsfa: OutputPathType;
    /**
     * RSFA divided by the mean value within the input/estimated whole brain mask (mean-scaled RSFA).
     */
    output_mrsfa: OutputPathType;
    /**
     * ALFF divided by sum of full amplitude spectrum (fractional RSFA).
     */
    output_frsfa: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param prefix Output file prefix; file names will be: PREFIX_ALFF, PREFIX_FALFF, etc.
 * @param band Lower and upper boundaries of the low frequency fluctuations (LFFs), within the interval [FBOT, FTOP].
 * @param in_amp Input file of one-sided spectral amplitudes, such as output by 3dLombScargle.
 * @param in_pow Input file of a one-sided power spectrum, such as output by 3dLombScargle.
 * @param mask Volume mask of voxels to include for calculations.
 * @param nifti Output files as *.nii.gz (default is BRIK/HEAD).
 *
 * @returns Parameter dictionary
 */
function v_3d_amp_to_rsfc_params(
    prefix: string,
    band: Array<number>,
    in_amp: InputPathType | null = null,
    in_pow: InputPathType | null = null,
    mask: InputPathType | null = null,
    nifti: boolean = false,
): V3dAmpToRsfcParameters {
    const params = {
        "@type": "afni.3dAmpToRSFC" as const,
        "prefix": prefix,
        "band": band,
        "nifti": nifti,
    };
    if (in_amp !== null) {
        params["in_amp"] = in_amp;
    }
    if (in_pow !== null) {
        params["in_pow"] = in_pow;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_amp_to_rsfc_cargs(
    params: V3dAmpToRsfcParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dAmpToRSFC");
    if ((params["in_amp"] ?? null) !== null) {
        cargs.push(
            "-in_amp",
            execution.inputFile((params["in_amp"] ?? null))
        );
    }
    if ((params["in_pow"] ?? null) !== null) {
        cargs.push(
            "-in_pow",
            execution.inputFile((params["in_pow"] ?? null))
        );
    }
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    cargs.push(
        "-band",
        ...(params["band"] ?? null).map(String)
    );
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["nifti"] ?? null)) {
        cargs.push("-nifti");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_amp_to_rsfc_outputs(
    params: V3dAmpToRsfcParameters,
    execution: Execution,
): V3dAmpToRsfcOutputs {
    const ret: V3dAmpToRsfcOutputs = {
        root: execution.outputFile("."),
        output_alff: execution.outputFile([(params["prefix"] ?? null), "_ALFF"].join('')),
        output_malff: execution.outputFile([(params["prefix"] ?? null), "_MALFF"].join('')),
        output_falff: execution.outputFile([(params["prefix"] ?? null), "_FALFF"].join('')),
        output_rsfa: execution.outputFile([(params["prefix"] ?? null), "_RSFA"].join('')),
        output_mrsfa: execution.outputFile([(params["prefix"] ?? null), "_MRSFA"].join('')),
        output_frsfa: execution.outputFile([(params["prefix"] ?? null), "_FRSFA"].join('')),
    };
    return ret;
}


/**
 * 3dAmpToRSFC
 *
 * Convert spectral amplitudes into standard RSFC parameters.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dAmpToRsfcOutputs`).
 */
function v_3d_amp_to_rsfc_execute(
    params: V3dAmpToRsfcParameters,
    runner: Runner | null = null,
): V3dAmpToRsfcOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_AMP_TO_RSFC_METADATA);
    params = execution.params(params)
    const cargs = v_3d_amp_to_rsfc_cargs(params, execution)
    const ret = v_3d_amp_to_rsfc_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * 3dAmpToRSFC
 *
 * Convert spectral amplitudes into standard RSFC parameters.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param prefix Output file prefix; file names will be: PREFIX_ALFF, PREFIX_FALFF, etc.
 * @param band Lower and upper boundaries of the low frequency fluctuations (LFFs), within the interval [FBOT, FTOP].
 * @param in_amp Input file of one-sided spectral amplitudes, such as output by 3dLombScargle.
 * @param in_pow Input file of a one-sided power spectrum, such as output by 3dLombScargle.
 * @param mask Volume mask of voxels to include for calculations.
 * @param nifti Output files as *.nii.gz (default is BRIK/HEAD).
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dAmpToRsfcOutputs`).
 */
function v_3d_amp_to_rsfc(
    prefix: string,
    band: Array<number>,
    in_amp: InputPathType | null = null,
    in_pow: InputPathType | null = null,
    mask: InputPathType | null = null,
    nifti: boolean = false,
    runner: Runner | null = null,
): V3dAmpToRsfcOutputs {
    const params = v_3d_amp_to_rsfc_params(prefix, band, in_amp, in_pow, mask, nifti)
    return v_3d_amp_to_rsfc_execute(params, runner);
}


export {
      V3dAmpToRsfcOutputs,
      V3dAmpToRsfcParameters,
      V_3D_AMP_TO_RSFC_METADATA,
      v_3d_amp_to_rsfc,
      v_3d_amp_to_rsfc_execute,
      v_3d_amp_to_rsfc_params,
};
