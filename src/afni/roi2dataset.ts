// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ROI2DATASET_METADATA: Metadata = {
    id: "5d5ce9ca7d281ca079da489d9aa946cea52cf676.boutiques",
    name: "ROI2dataset",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface Roi2datasetParameters {
    "@type": "afni.ROI2dataset";
    "prefix": string;
    "input_rois": Array<InputPathType>;
    "keep_separate": boolean;
    "nodelist"?: string | null | undefined;
    "nodelist_nodups"?: string | null | undefined;
    "nodelist_with_roival": boolean;
    "label_dset"?: string | null | undefined;
    "output_format"?: string | null | undefined;
    "domain_parent_id"?: string | null | undefined;
    "pad_to_node"?: number | null | undefined;
    "pad_label"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.ROI2dataset": roi2dataset_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `roi2dataset(...)`.
 *
 * @interface
 */
interface Roi2datasetOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param prefix Prefix of output dataset.
 * @param input_rois ROI files to turn into a data set (space-separated list). This parameter MUST be the last one on command line.
 * @param keep_separate Output one column (sub-brick) for each ROI value.
 * @param nodelist Prefix for a set of .1D files that contain a list of node indices in the order they appear in an ROI.
 * @param nodelist_nodups Prefix for a set of .1D files that contain a list of node indices in the order they appear in an ROI, with duplicate nodes removed.
 * @param nodelist_with_roival Also add the ROI value as a second column in .1D files output by -nodelist.
 * @param label_dset Write a label dataset instead of a simple dataset. Sets output format to NIML.
 * @param output_format Output format of dataset. One of: ni_bi, ni_as, 1D
 * @param domain_parent_id Idcode of domain parent. Only ROIs with the same domain parent are included in the output.
 * @param pad_to_node Output a full dataset from node 0 to node max_index (total of max_index + 1 nodes).
 * @param pad_label Use padding_label (an integer) to label nodes not part of any ROI. Default is 0.
 *
 * @returns Parameter dictionary
 */
function roi2dataset_params(
    prefix: string,
    input_rois: Array<InputPathType>,
    keep_separate: boolean = false,
    nodelist: string | null = null,
    nodelist_nodups: string | null = null,
    nodelist_with_roival: boolean = false,
    label_dset: string | null = null,
    output_format: string | null = null,
    domain_parent_id: string | null = null,
    pad_to_node: number | null = null,
    pad_label: number | null = null,
): Roi2datasetParameters {
    const params = {
        "@type": "afni.ROI2dataset" as const,
        "prefix": prefix,
        "input_rois": input_rois,
        "keep_separate": keep_separate,
        "nodelist_with_roival": nodelist_with_roival,
    };
    if (nodelist !== null) {
        params["nodelist"] = nodelist;
    }
    if (nodelist_nodups !== null) {
        params["nodelist_nodups"] = nodelist_nodups;
    }
    if (label_dset !== null) {
        params["label_dset"] = label_dset;
    }
    if (output_format !== null) {
        params["output_format"] = output_format;
    }
    if (domain_parent_id !== null) {
        params["domain_parent_id"] = domain_parent_id;
    }
    if (pad_to_node !== null) {
        params["pad_to_node"] = pad_to_node;
    }
    if (pad_label !== null) {
        params["pad_label"] = pad_label;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function roi2dataset_cargs(
    params: Roi2datasetParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("ROI2dataset");
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    cargs.push(...(params["input_rois"] ?? null).map(f => execution.inputFile(f)));
    if ((params["keep_separate"] ?? null)) {
        cargs.push("-keep_separate");
    }
    if ((params["nodelist"] ?? null) !== null) {
        cargs.push(
            "-nodelist",
            (params["nodelist"] ?? null)
        );
    }
    if ((params["nodelist_nodups"] ?? null) !== null) {
        cargs.push(
            "-nodelist.nodups",
            (params["nodelist_nodups"] ?? null)
        );
    }
    if ((params["nodelist_with_roival"] ?? null)) {
        cargs.push("-nodelist_with_ROIval");
    }
    if ((params["label_dset"] ?? null) !== null) {
        cargs.push(
            "-label_dset",
            (params["label_dset"] ?? null)
        );
    }
    if ((params["output_format"] ?? null) !== null) {
        cargs.push(
            "-of",
            (params["output_format"] ?? null)
        );
    }
    if ((params["domain_parent_id"] ?? null) !== null) {
        cargs.push(
            "-dom_par_id",
            (params["domain_parent_id"] ?? null)
        );
    }
    if ((params["pad_to_node"] ?? null) !== null) {
        cargs.push(
            "-pad_to_node",
            String((params["pad_to_node"] ?? null))
        );
    }
    if ((params["pad_label"] ?? null) !== null) {
        cargs.push(
            "-pad_label",
            String((params["pad_label"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function roi2dataset_outputs(
    params: Roi2datasetParameters,
    execution: Execution,
): Roi2datasetOutputs {
    const ret: Roi2datasetOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Transforms a series of ROI files to a node dataset.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `Roi2datasetOutputs`).
 */
function roi2dataset_execute(
    params: Roi2datasetParameters,
    execution: Execution,
): Roi2datasetOutputs {
    params = execution.params(params)
    const cargs = roi2dataset_cargs(params, execution)
    const ret = roi2dataset_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Transforms a series of ROI files to a node dataset.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param prefix Prefix of output dataset.
 * @param input_rois ROI files to turn into a data set (space-separated list). This parameter MUST be the last one on command line.
 * @param keep_separate Output one column (sub-brick) for each ROI value.
 * @param nodelist Prefix for a set of .1D files that contain a list of node indices in the order they appear in an ROI.
 * @param nodelist_nodups Prefix for a set of .1D files that contain a list of node indices in the order they appear in an ROI, with duplicate nodes removed.
 * @param nodelist_with_roival Also add the ROI value as a second column in .1D files output by -nodelist.
 * @param label_dset Write a label dataset instead of a simple dataset. Sets output format to NIML.
 * @param output_format Output format of dataset. One of: ni_bi, ni_as, 1D
 * @param domain_parent_id Idcode of domain parent. Only ROIs with the same domain parent are included in the output.
 * @param pad_to_node Output a full dataset from node 0 to node max_index (total of max_index + 1 nodes).
 * @param pad_label Use padding_label (an integer) to label nodes not part of any ROI. Default is 0.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Roi2datasetOutputs`).
 */
function roi2dataset(
    prefix: string,
    input_rois: Array<InputPathType>,
    keep_separate: boolean = false,
    nodelist: string | null = null,
    nodelist_nodups: string | null = null,
    nodelist_with_roival: boolean = false,
    label_dset: string | null = null,
    output_format: string | null = null,
    domain_parent_id: string | null = null,
    pad_to_node: number | null = null,
    pad_label: number | null = null,
    runner: Runner | null = null,
): Roi2datasetOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ROI2DATASET_METADATA);
    const params = roi2dataset_params(prefix, input_rois, keep_separate, nodelist, nodelist_nodups, nodelist_with_roival, label_dset, output_format, domain_parent_id, pad_to_node, pad_label)
    return roi2dataset_execute(params, execution);
}


export {
      ROI2DATASET_METADATA,
      Roi2datasetOutputs,
      Roi2datasetParameters,
      roi2dataset,
      roi2dataset_cargs,
      roi2dataset_execute,
      roi2dataset_outputs,
      roi2dataset_params,
};
