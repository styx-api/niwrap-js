// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const PLUGOUT_IJK_METADATA: Metadata = {
    id: "142a0fe0422ee837095616d6144d64f8af7e6fd0.boutiques",
    name: "plugout_ijk",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface PlugoutIjkParameters {
    "@type"?: "afni/plugout_ijk";
    "host"?: string | null | undefined;
    "verbose": boolean;
    "port"?: number | null | undefined;
    "name"?: string | null | undefined;
    "port_offset"?: number | null | undefined;
    "port_quiet"?: number | null | undefined;
    "port_bloc_offset"?: number | null | undefined;
    "max_bloc": boolean;
    "max_bloc_quiet": boolean;
    "num_assigned_ports": boolean;
    "num_assigned_ports_quiet": boolean;
}
type PlugoutIjkParametersTagged = Required<Pick<PlugoutIjkParameters, '@type'>> & PlugoutIjkParameters;


/**
 * Output object returned when calling `PlugoutIjkParameters(...)`.
 *
 * @interface
 */
interface PlugoutIjkOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param host Connect to AFNI running on the specified computer using TCP/IP.
 * @param verbose Verbose mode.
 * @param port Use TCP/IP port number 'pp'.
 * @param name Use the string 'sss' for the name that AFNI assigns to this plugout.
 * @param port_offset Provide a port offset to allow multiple instances of communicating programs to operate on the same machine.
 * @param port_quiet Provide a port offset like -np, but more quiet in the face of adversity.
 * @param port_bloc_offset Provide a port offset block for easier port management.
 * @param max_bloc Print the current value of MAX_BLOC and exit.
 * @param max_bloc_quiet Print MAX_BLOC value only and exit.
 * @param num_assigned_ports Print the number of assigned ports used by AFNI then quit.
 * @param num_assigned_ports_quiet Prints the number of assigned ports quietly.
 *
 * @returns Parameter dictionary
 */
function plugout_ijk_params(
    host: string | null = null,
    verbose: boolean = false,
    port: number | null = null,
    name: string | null = null,
    port_offset: number | null = null,
    port_quiet: number | null = null,
    port_bloc_offset: number | null = null,
    max_bloc: boolean = false,
    max_bloc_quiet: boolean = false,
    num_assigned_ports: boolean = false,
    num_assigned_ports_quiet: boolean = false,
): PlugoutIjkParametersTagged {
    const params = {
        "@type": "afni/plugout_ijk" as const,
        "verbose": verbose,
        "max_bloc": max_bloc,
        "max_bloc_quiet": max_bloc_quiet,
        "num_assigned_ports": num_assigned_ports,
        "num_assigned_ports_quiet": num_assigned_ports_quiet,
    };
    if (host !== null) {
        params["host"] = host;
    }
    if (port !== null) {
        params["port"] = port;
    }
    if (name !== null) {
        params["name"] = name;
    }
    if (port_offset !== null) {
        params["port_offset"] = port_offset;
    }
    if (port_quiet !== null) {
        params["port_quiet"] = port_quiet;
    }
    if (port_bloc_offset !== null) {
        params["port_bloc_offset"] = port_bloc_offset;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function plugout_ijk_cargs(
    params: PlugoutIjkParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("plugout_ijk");
    if ((params["host"] ?? null) !== null) {
        cargs.push(
            "-host",
            (params["host"] ?? null)
        );
    }
    if ((params["verbose"] ?? false)) {
        cargs.push("-v");
    }
    if ((params["port"] ?? null) !== null) {
        cargs.push(
            "-port",
            String((params["port"] ?? null))
        );
    }
    if ((params["name"] ?? null) !== null) {
        cargs.push(
            "-name",
            (params["name"] ?? null)
        );
    }
    if ((params["port_offset"] ?? null) !== null) {
        cargs.push(
            "-np",
            String((params["port_offset"] ?? null))
        );
    }
    if ((params["port_quiet"] ?? null) !== null) {
        cargs.push(
            "-npq",
            String((params["port_quiet"] ?? null))
        );
    }
    if ((params["port_bloc_offset"] ?? null) !== null) {
        cargs.push(
            "-npb",
            String((params["port_bloc_offset"] ?? null))
        );
    }
    if ((params["max_bloc"] ?? false)) {
        cargs.push("-max_port_bloc");
    }
    if ((params["max_bloc_quiet"] ?? false)) {
        cargs.push("-max_port_bloc_quiet");
    }
    if ((params["num_assigned_ports"] ?? false)) {
        cargs.push("-num_assigned_ports");
    }
    if ((params["num_assigned_ports_quiet"] ?? false)) {
        cargs.push("-num_assigned_ports_quiet");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function plugout_ijk_outputs(
    params: PlugoutIjkParameters,
    execution: Execution,
): PlugoutIjkOutputs {
    const ret: PlugoutIjkOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * plugout_ijk
 *
 * Connects to AFNI and sends (i,j,k) dataset indices to control the viewpoint.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `PlugoutIjkOutputs`).
 */
function plugout_ijk_execute(
    params: PlugoutIjkParameters,
    runner: Runner | null = null,
): PlugoutIjkOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(PLUGOUT_IJK_METADATA);
    params = execution.params(params)
    const cargs = plugout_ijk_cargs(params, execution)
    const ret = plugout_ijk_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * plugout_ijk
 *
 * Connects to AFNI and sends (i,j,k) dataset indices to control the viewpoint.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param host Connect to AFNI running on the specified computer using TCP/IP.
 * @param verbose Verbose mode.
 * @param port Use TCP/IP port number 'pp'.
 * @param name Use the string 'sss' for the name that AFNI assigns to this plugout.
 * @param port_offset Provide a port offset to allow multiple instances of communicating programs to operate on the same machine.
 * @param port_quiet Provide a port offset like -np, but more quiet in the face of adversity.
 * @param port_bloc_offset Provide a port offset block for easier port management.
 * @param max_bloc Print the current value of MAX_BLOC and exit.
 * @param max_bloc_quiet Print MAX_BLOC value only and exit.
 * @param num_assigned_ports Print the number of assigned ports used by AFNI then quit.
 * @param num_assigned_ports_quiet Prints the number of assigned ports quietly.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `PlugoutIjkOutputs`).
 */
function plugout_ijk(
    host: string | null = null,
    verbose: boolean = false,
    port: number | null = null,
    name: string | null = null,
    port_offset: number | null = null,
    port_quiet: number | null = null,
    port_bloc_offset: number | null = null,
    max_bloc: boolean = false,
    max_bloc_quiet: boolean = false,
    num_assigned_ports: boolean = false,
    num_assigned_ports_quiet: boolean = false,
    runner: Runner | null = null,
): PlugoutIjkOutputs {
    const params = plugout_ijk_params(host, verbose, port, name, port_offset, port_quiet, port_bloc_offset, max_bloc, max_bloc_quiet, num_assigned_ports, num_assigned_ports_quiet)
    return plugout_ijk_execute(params, runner);
}


export {
      PLUGOUT_IJK_METADATA,
      PlugoutIjkOutputs,
      plugout_ijk,
      plugout_ijk_execute,
      plugout_ijk_params,
};
