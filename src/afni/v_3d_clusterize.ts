// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_CLUSTERIZE_METADATA: Metadata = {
    id: "e4655542f19e9af1312825c39fb9645b11431092.boutiques",
    name: "3dClusterize",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dClusterizeParameters {
    "@type": "afni.3dClusterize";
    "inset": InputPathType;
    "mask"?: InputPathType | null | undefined;
    "mask_from_hdr": boolean;
    "out_mask"?: string | null | undefined;
    "ithr": string;
    "idat"?: string | null | undefined;
    "onesided"?: string | null | undefined;
    "twosided"?: string | null | undefined;
    "bisided"?: string | null | undefined;
    "within_range"?: string | null | undefined;
    "nn": number;
    "clust_nvox"?: number | null | undefined;
    "clust_vol"?: number | null | undefined;
    "pref_map"?: string | null | undefined;
    "pref_dat"?: string | null | undefined;
    "one_d_format": boolean;
    "no_one_d_format": boolean;
    "summarize": boolean;
    "nosum": boolean;
    "quiet": boolean;
    "outvol_if_no_clust": boolean;
    "orient"?: string | null | undefined;
    "abs_table_data": boolean;
    "binary": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dClusterize": v_3d_clusterize_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dClusterize": v_3d_clusterize_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_clusterize(...)`.
 *
 * @interface
 */
interface V3dClusterizeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output map of cluster ROIs
     */
    out_map_file: OutputPathType | null;
    /**
     * Cluster-masked version of the data volume
     */
    out_data_file: OutputPathType | null;
    /**
     * Utilized mask dataset
     */
    out_mask_file: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param inset Load in a dataset for thresholding and clusterizing
 * @param ithr Specify the sub-brick to use as the threshold source
 * @param nn Specify the number of voxel neighbors (1: 6, 2: 18, 3: 26)
 * @param mask Load in a dataset to use as a mask
 * @param mask_from_hdr Use internal mask from dataset header
 * @param out_mask Specify to dump the utilized mask as a dataset
 * @param idat Specify the sub-brick to use as the data source
 * @param onesided Perform one-sided testing
 * @param twosided Perform two-sided testing
 * @param bisided Perform bisided testing
 * @param within_range Keep values within the range [AA, BB]
 * @param clust_nvox Specify the minimum cluster size in terms of number of voxels
 * @param clust_vol Specify the minimum cluster size by volume in microliters
 * @param pref_map Prefix/filename of the output map of cluster ROIs
 * @param pref_dat Output a cluster-masked version of the data volume
 * @param one_d_format Write output in 1D format
 * @param no_one_d_format Do not write output in 1D format
 * @param summarize Write out only the total nonzero voxel count and volume for each dataset
 * @param nosum Suppress printout of the totals
 * @param quiet Suppress all non-essential output
 * @param outvol_if_no_clust Output an empty volume if no clusters are found
 * @param orient Coordinate order in the output report table (default: RAI)
 * @param abs_table_data Use absolute values for mean and SEM in report table
 * @param binary Turn output map of cluster ROIs into a binary mask
 *
 * @returns Parameter dictionary
 */
function v_3d_clusterize_params(
    inset: InputPathType,
    ithr: string,
    nn: number,
    mask: InputPathType | null = null,
    mask_from_hdr: boolean = false,
    out_mask: string | null = null,
    idat: string | null = null,
    onesided: string | null = null,
    twosided: string | null = null,
    bisided: string | null = null,
    within_range: string | null = null,
    clust_nvox: number | null = null,
    clust_vol: number | null = null,
    pref_map: string | null = null,
    pref_dat: string | null = null,
    one_d_format: boolean = false,
    no_one_d_format: boolean = false,
    summarize: boolean = false,
    nosum: boolean = false,
    quiet: boolean = false,
    outvol_if_no_clust: boolean = false,
    orient: string | null = null,
    abs_table_data: boolean = false,
    binary: boolean = false,
): V3dClusterizeParameters {
    const params = {
        "@type": "afni.3dClusterize" as const,
        "inset": inset,
        "mask_from_hdr": mask_from_hdr,
        "ithr": ithr,
        "nn": nn,
        "one_d_format": one_d_format,
        "no_one_d_format": no_one_d_format,
        "summarize": summarize,
        "nosum": nosum,
        "quiet": quiet,
        "outvol_if_no_clust": outvol_if_no_clust,
        "abs_table_data": abs_table_data,
        "binary": binary,
    };
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (out_mask !== null) {
        params["out_mask"] = out_mask;
    }
    if (idat !== null) {
        params["idat"] = idat;
    }
    if (onesided !== null) {
        params["onesided"] = onesided;
    }
    if (twosided !== null) {
        params["twosided"] = twosided;
    }
    if (bisided !== null) {
        params["bisided"] = bisided;
    }
    if (within_range !== null) {
        params["within_range"] = within_range;
    }
    if (clust_nvox !== null) {
        params["clust_nvox"] = clust_nvox;
    }
    if (clust_vol !== null) {
        params["clust_vol"] = clust_vol;
    }
    if (pref_map !== null) {
        params["pref_map"] = pref_map;
    }
    if (pref_dat !== null) {
        params["pref_dat"] = pref_dat;
    }
    if (orient !== null) {
        params["orient"] = orient;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_clusterize_cargs(
    params: V3dClusterizeParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dClusterize");
    cargs.push(
        "-inset",
        execution.inputFile((params["inset"] ?? null))
    );
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["mask_from_hdr"] ?? null)) {
        cargs.push("-mask_from_hdr");
    }
    if ((params["out_mask"] ?? null) !== null) {
        cargs.push(
            "-out_mask",
            (params["out_mask"] ?? null)
        );
    }
    cargs.push(
        "-ithr",
        (params["ithr"] ?? null)
    );
    if ((params["idat"] ?? null) !== null) {
        cargs.push(
            "-idat",
            (params["idat"] ?? null)
        );
    }
    if ((params["onesided"] ?? null) !== null) {
        cargs.push(
            "-1sided",
            (params["onesided"] ?? null)
        );
    }
    if ((params["twosided"] ?? null) !== null) {
        cargs.push(
            "-2sided",
            (params["twosided"] ?? null)
        );
    }
    if ((params["bisided"] ?? null) !== null) {
        cargs.push(
            "-bisided",
            (params["bisided"] ?? null)
        );
    }
    if ((params["within_range"] ?? null) !== null) {
        cargs.push(
            "-within_range",
            (params["within_range"] ?? null)
        );
    }
    cargs.push(
        "-NN",
        String((params["nn"] ?? null))
    );
    if ((params["clust_nvox"] ?? null) !== null) {
        cargs.push(
            "-clust_nvox",
            String((params["clust_nvox"] ?? null))
        );
    }
    if ((params["clust_vol"] ?? null) !== null) {
        cargs.push(
            "-clust_vol",
            String((params["clust_vol"] ?? null))
        );
    }
    if ((params["pref_map"] ?? null) !== null) {
        cargs.push(
            "-pref_map",
            (params["pref_map"] ?? null)
        );
    }
    if ((params["pref_dat"] ?? null) !== null) {
        cargs.push(
            "-pref_dat",
            (params["pref_dat"] ?? null)
        );
    }
    if ((params["one_d_format"] ?? null)) {
        cargs.push("-1Dformat");
    }
    if ((params["no_one_d_format"] ?? null)) {
        cargs.push("-no_1Dformat");
    }
    if ((params["summarize"] ?? null)) {
        cargs.push("-summarize");
    }
    if ((params["nosum"] ?? null)) {
        cargs.push("-nosum");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["outvol_if_no_clust"] ?? null)) {
        cargs.push("-outvol_if_no_clust");
    }
    if ((params["orient"] ?? null) !== null) {
        cargs.push(
            "-orient",
            (params["orient"] ?? null)
        );
    }
    if ((params["abs_table_data"] ?? null)) {
        cargs.push("-abs_table_data");
    }
    if ((params["binary"] ?? null)) {
        cargs.push("-binary");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_clusterize_outputs(
    params: V3dClusterizeParameters,
    execution: Execution,
): V3dClusterizeOutputs {
    const ret: V3dClusterizeOutputs = {
        root: execution.outputFile("."),
        out_map_file: ((params["pref_map"] ?? null) !== null) ? execution.outputFile([(params["pref_map"] ?? null), "+orig.HEAD"].join('')) : null,
        out_data_file: ((params["pref_dat"] ?? null) !== null) ? execution.outputFile([(params["pref_dat"] ?? null), "+orig.HEAD"].join('')) : null,
        out_mask_file: ((params["out_mask"] ?? null) !== null) ? execution.outputFile([(params["out_mask"] ?? null), "+orig.HEAD"].join('')) : null,
    };
    return ret;
}


/**
 * A tool for voxelwise thresholding and clusterizing of datasets.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `V3dClusterizeOutputs`).
 */
function v_3d_clusterize_execute(
    params: V3dClusterizeParameters,
    execution: Execution,
): V3dClusterizeOutputs {
    params = execution.params(params)
    const cargs = v_3d_clusterize_cargs(params, execution)
    const ret = v_3d_clusterize_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * A tool for voxelwise thresholding and clusterizing of datasets.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param inset Load in a dataset for thresholding and clusterizing
 * @param ithr Specify the sub-brick to use as the threshold source
 * @param nn Specify the number of voxel neighbors (1: 6, 2: 18, 3: 26)
 * @param mask Load in a dataset to use as a mask
 * @param mask_from_hdr Use internal mask from dataset header
 * @param out_mask Specify to dump the utilized mask as a dataset
 * @param idat Specify the sub-brick to use as the data source
 * @param onesided Perform one-sided testing
 * @param twosided Perform two-sided testing
 * @param bisided Perform bisided testing
 * @param within_range Keep values within the range [AA, BB]
 * @param clust_nvox Specify the minimum cluster size in terms of number of voxels
 * @param clust_vol Specify the minimum cluster size by volume in microliters
 * @param pref_map Prefix/filename of the output map of cluster ROIs
 * @param pref_dat Output a cluster-masked version of the data volume
 * @param one_d_format Write output in 1D format
 * @param no_one_d_format Do not write output in 1D format
 * @param summarize Write out only the total nonzero voxel count and volume for each dataset
 * @param nosum Suppress printout of the totals
 * @param quiet Suppress all non-essential output
 * @param outvol_if_no_clust Output an empty volume if no clusters are found
 * @param orient Coordinate order in the output report table (default: RAI)
 * @param abs_table_data Use absolute values for mean and SEM in report table
 * @param binary Turn output map of cluster ROIs into a binary mask
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dClusterizeOutputs`).
 */
function v_3d_clusterize(
    inset: InputPathType,
    ithr: string,
    nn: number,
    mask: InputPathType | null = null,
    mask_from_hdr: boolean = false,
    out_mask: string | null = null,
    idat: string | null = null,
    onesided: string | null = null,
    twosided: string | null = null,
    bisided: string | null = null,
    within_range: string | null = null,
    clust_nvox: number | null = null,
    clust_vol: number | null = null,
    pref_map: string | null = null,
    pref_dat: string | null = null,
    one_d_format: boolean = false,
    no_one_d_format: boolean = false,
    summarize: boolean = false,
    nosum: boolean = false,
    quiet: boolean = false,
    outvol_if_no_clust: boolean = false,
    orient: string | null = null,
    abs_table_data: boolean = false,
    binary: boolean = false,
    runner: Runner | null = null,
): V3dClusterizeOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_CLUSTERIZE_METADATA);
    const params = v_3d_clusterize_params(inset, ithr, nn, mask, mask_from_hdr, out_mask, idat, onesided, twosided, bisided, within_range, clust_nvox, clust_vol, pref_map, pref_dat, one_d_format, no_one_d_format, summarize, nosum, quiet, outvol_if_no_clust, orient, abs_table_data, binary)
    return v_3d_clusterize_execute(params, execution);
}


export {
      V3dClusterizeOutputs,
      V3dClusterizeParameters,
      V_3D_CLUSTERIZE_METADATA,
      v_3d_clusterize,
      v_3d_clusterize_cargs,
      v_3d_clusterize_execute,
      v_3d_clusterize_outputs,
      v_3d_clusterize_params,
};
