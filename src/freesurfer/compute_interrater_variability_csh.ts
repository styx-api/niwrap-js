// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const COMPUTE_INTERRATER_VARIABILITY_CSH_METADATA: Metadata = {
    id: "7363f7a4d7e7af9a9827c3ca57854bc1610a9623.boutiques",
    name: "compute_interrater_variability.csh",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface ComputeInterraterVariabilityCshParameters {
    "__STYXTYPE__": "compute_interrater_variability.csh";
    "label_vol1": InputPathType;
    "label_vol2": InputPathType;
    "output_prefix": string;
    "version": boolean;
    "help": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "compute_interrater_variability.csh": compute_interrater_variability_csh_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "compute_interrater_variability.csh": compute_interrater_variability_csh_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `compute_interrater_variability_csh(...)`.
 *
 * @interface
 */
interface ComputeInterraterVariabilityCshOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file containing mean Hausdorff distance.
     */
    output_file_1: OutputPathType;
    /**
     * Output file containing max Hausdorff distance.
     */
    output_file_2: OutputPathType;
    /**
     * Output file containing label volume difference, Dice, and Jaccard overlap measures.
     */
    output_file_3: OutputPathType;
}


function compute_interrater_variability_csh_params(
    label_vol1: InputPathType,
    label_vol2: InputPathType,
    output_prefix: string,
    version: boolean = false,
    help: boolean = false,
): ComputeInterraterVariabilityCshParameters {
    /**
     * Build parameters.
    
     * @param label_vol1 Label volume from rater 1.
     * @param label_vol2 Label volume from rater 2.
     * @param output_prefix Prefix for the output text files containing results. A total of three files will be produced.
     * @param version Print version information and exit.
     * @param help Print help information and exit.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "compute_interrater_variability.csh" as const,
        "label_vol1": label_vol1,
        "label_vol2": label_vol2,
        "output_prefix": output_prefix,
        "version": version,
        "help": help,
    };
    return params;
}


function compute_interrater_variability_csh_cargs(
    params: ComputeInterraterVariabilityCshParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("compute_interrater_variability.csh");
    cargs.push(
        "--vol1",
        execution.inputFile((params["label_vol1"] ?? null))
    );
    cargs.push(
        "--vol2",
        execution.inputFile((params["label_vol2"] ?? null))
    );
    cargs.push(
        "--out",
        (params["output_prefix"] ?? null)
    );
    if ((params["version"] ?? null)) {
        cargs.push("--version");
    }
    if ((params["help"] ?? null)) {
        cargs.push("--help");
    }
    return cargs;
}


function compute_interrater_variability_csh_outputs(
    params: ComputeInterraterVariabilityCshParameters,
    execution: Execution,
): ComputeInterraterVariabilityCshOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: ComputeInterraterVariabilityCshOutputs = {
        root: execution.outputFile("."),
        output_file_1: execution.outputFile([(params["output_prefix"] ?? null), "_file1.txt"].join('')),
        output_file_2: execution.outputFile([(params["output_prefix"] ?? null), "_file2.txt"].join('')),
        output_file_3: execution.outputFile([(params["output_prefix"] ?? null), "_file3.txt"].join('')),
    };
    return ret;
}


function compute_interrater_variability_csh_execute(
    params: ComputeInterraterVariabilityCshParameters,
    execution: Execution,
): ComputeInterraterVariabilityCshOutputs {
    /**
     * Computes the interrater variability between label volumes from different raters or time points using several metrics.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `ComputeInterraterVariabilityCshOutputs`).
     */
    params = execution.params(params)
    const cargs = compute_interrater_variability_csh_cargs(params, execution)
    const ret = compute_interrater_variability_csh_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function compute_interrater_variability_csh(
    label_vol1: InputPathType,
    label_vol2: InputPathType,
    output_prefix: string,
    version: boolean = false,
    help: boolean = false,
    runner: Runner | null = null,
): ComputeInterraterVariabilityCshOutputs {
    /**
     * Computes the interrater variability between label volumes from different raters or time points using several metrics.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param label_vol1 Label volume from rater 1.
     * @param label_vol2 Label volume from rater 2.
     * @param output_prefix Prefix for the output text files containing results. A total of three files will be produced.
     * @param version Print version information and exit.
     * @param help Print help information and exit.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `ComputeInterraterVariabilityCshOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(COMPUTE_INTERRATER_VARIABILITY_CSH_METADATA);
    const params = compute_interrater_variability_csh_params(label_vol1, label_vol2, output_prefix, version, help)
    return compute_interrater_variability_csh_execute(params, execution);
}


export {
      COMPUTE_INTERRATER_VARIABILITY_CSH_METADATA,
      ComputeInterraterVariabilityCshOutputs,
      ComputeInterraterVariabilityCshParameters,
      compute_interrater_variability_csh,
      compute_interrater_variability_csh_params,
};
