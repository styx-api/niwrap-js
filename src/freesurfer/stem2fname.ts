// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const STEM2FNAME_METADATA: Metadata = {
    id: "9cf1f5f7cd0129324c326a089231814995dc912b.boutiques",
    name: "stem2fname",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface Stem2fnameParameters {
    "@type"?: "freesurfer/stem2fname";
    "stem": string;
}
type Stem2fnameParametersTagged = Required<Pick<Stem2fnameParameters, '@type'>> & Stem2fnameParameters;


/**
 * Output object returned when calling `Stem2fnameParameters(...)`.
 *
 * @interface
 */
interface Stem2fnameOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Full filename with the detected format. Format could be one of mgh, mgz, nii, nii.gz, bhdr, img, or w.
     */
    output_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param stem The stem of the file (without extension).
 *
 * @returns Parameter dictionary
 */
function stem2fname_params(
    stem: string,
): Stem2fnameParametersTagged {
    const params = {
        "@type": "freesurfer/stem2fname" as const,
        "stem": stem,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function stem2fname_cargs(
    params: Stem2fnameParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("stem2fname");
    cargs.push((params["stem"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function stem2fname_outputs(
    params: Stem2fnameParameters,
    execution: Execution,
): Stem2fnameOutputs {
    const ret: Stem2fnameOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["stem"] ?? null), ".[FORMAT]"].join('')),
    };
    return ret;
}


/**
 * stem2fname
 *
 * Determines the full filename with extension for a given file stem by checking various formats.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Stem2fnameOutputs`).
 */
function stem2fname_execute(
    params: Stem2fnameParameters,
    runner: Runner | null = null,
): Stem2fnameOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(STEM2FNAME_METADATA);
    params = execution.params(params)
    const cargs = stem2fname_cargs(params, execution)
    const ret = stem2fname_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * stem2fname
 *
 * Determines the full filename with extension for a given file stem by checking various formats.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param stem The stem of the file (without extension).
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Stem2fnameOutputs`).
 */
function stem2fname(
    stem: string,
    runner: Runner | null = null,
): Stem2fnameOutputs {
    const params = stem2fname_params(stem)
    return stem2fname_execute(params, runner);
}


export {
      STEM2FNAME_METADATA,
      Stem2fnameOutputs,
      stem2fname,
      stem2fname_execute,
      stem2fname_params,
};
