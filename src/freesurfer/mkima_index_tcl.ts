// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MKIMA_INDEX_TCL_METADATA: Metadata = {
    id: "86be0aef995f956ba52b06d4b0b72917946939dd.boutiques",
    name: "mkima_index.tcl",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MkimaIndexTclParameters {
    "@type"?: "freesurfer/mkima_index.tcl";
    "input_file": InputPathType;
    "output_flag": boolean;
}
type MkimaIndexTclParametersTagged = Required<Pick<MkimaIndexTclParameters, '@type'>> & MkimaIndexTclParameters;


/**
 * Output object returned when calling `MkimaIndexTclParameters(...)`.
 *
 * @interface
 */
interface MkimaIndexTclOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file resulting from mkima index operations.
     */
    output_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_file Input file for mkima index operations.
 * @param output_flag Flag to specify output for mkima index operation.
 *
 * @returns Parameter dictionary
 */
function mkima_index_tcl_params(
    input_file: InputPathType,
    output_flag: boolean = false,
): MkimaIndexTclParametersTagged {
    const params = {
        "@type": "freesurfer/mkima_index.tcl" as const,
        "input_file": input_file,
        "output_flag": output_flag,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mkima_index_tcl_cargs(
    params: MkimaIndexTclParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mkima_index.tcl");
    cargs.push(execution.inputFile((params["input_file"] ?? null)));
    if ((params["output_flag"] ?? false)) {
        cargs.push("-o");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mkima_index_tcl_outputs(
    params: MkimaIndexTclParameters,
    execution: Execution,
): MkimaIndexTclOutputs {
    const ret: MkimaIndexTclOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([path.basename((params["input_file"] ?? null)), "_index_output"].join('')),
    };
    return ret;
}


/**
 * mkima_index.tcl
 *
 * A command-line tool for handling mkima index operations.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MkimaIndexTclOutputs`).
 */
function mkima_index_tcl_execute(
    params: MkimaIndexTclParameters,
    runner: Runner | null = null,
): MkimaIndexTclOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MKIMA_INDEX_TCL_METADATA);
    params = execution.params(params)
    const cargs = mkima_index_tcl_cargs(params, execution)
    const ret = mkima_index_tcl_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mkima_index.tcl
 *
 * A command-line tool for handling mkima index operations.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_file Input file for mkima index operations.
 * @param output_flag Flag to specify output for mkima index operation.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MkimaIndexTclOutputs`).
 */
function mkima_index_tcl(
    input_file: InputPathType,
    output_flag: boolean = false,
    runner: Runner | null = null,
): MkimaIndexTclOutputs {
    const params = mkima_index_tcl_params(input_file, output_flag)
    return mkima_index_tcl_execute(params, runner);
}


export {
      MKIMA_INDEX_TCL_METADATA,
      MkimaIndexTclOutputs,
      mkima_index_tcl,
      mkima_index_tcl_execute,
      mkima_index_tcl_params,
};
