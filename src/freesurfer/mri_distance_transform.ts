// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_DISTANCE_TRANSFORM_METADATA: Metadata = {
    id: "e70d33e3cab2523df541297c46b2cf585160584b.boutiques",
    name: "mri_distance_transform",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriDistanceTransformParameters {
    "__STYXTYPE__": "mri_distance_transform";
    "input_volume": InputPathType;
    "label": number;
    "max_distance": number;
    "mode"?: number | null | undefined;
    "output_volume": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mri_distance_transform": mri_distance_transform_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mri_distance_transform": mri_distance_transform_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_distance_transform(...)`.
 *
 * @interface
 */
interface MriDistanceTransformOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output volume file after distance transform
     */
    output_file: OutputPathType;
}


function mri_distance_transform_params(
    input_volume: InputPathType,
    label: number,
    max_distance: number,
    output_volume: string,
    mode: number | null = 1,
): MriDistanceTransformParameters {
    /**
     * Build parameters.
    
     * @param input_volume Input volume file
     * @param label Label value for distance transform calculation
     * @param max_distance Maximum distance for the transform
     * @param output_volume Output volume file
     * @param mode Mode of the distance transform: 1 = outside, 2 = inside, 3 = both, 4 = both unsigned
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mri_distance_transform" as const,
        "input_volume": input_volume,
        "label": label,
        "max_distance": max_distance,
        "output_volume": output_volume,
    };
    if (mode !== null) {
        params["mode"] = mode;
    }
    return params;
}


function mri_distance_transform_cargs(
    params: MriDistanceTransformParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mri_distance_transform");
    cargs.push(execution.inputFile((params["input_volume"] ?? null)));
    cargs.push(String((params["label"] ?? null)));
    cargs.push(String((params["max_distance"] ?? null)));
    if ((params["mode"] ?? null) !== null) {
        cargs.push(String((params["mode"] ?? null)));
    }
    cargs.push((params["output_volume"] ?? null));
    return cargs;
}


function mri_distance_transform_outputs(
    params: MriDistanceTransformParameters,
    execution: Execution,
): MriDistanceTransformOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MriDistanceTransformOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["output_volume"] ?? null)].join('')),
    };
    return ret;
}


function mri_distance_transform_execute(
    params: MriDistanceTransformParameters,
    execution: Execution,
): MriDistanceTransformOutputs {
    /**
     * Tool to compute distance transforms on MRI volumes.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MriDistanceTransformOutputs`).
     */
    params = execution.params(params)
    const cargs = mri_distance_transform_cargs(params, execution)
    const ret = mri_distance_transform_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mri_distance_transform(
    input_volume: InputPathType,
    label: number,
    max_distance: number,
    output_volume: string,
    mode: number | null = 1,
    runner: Runner | null = null,
): MriDistanceTransformOutputs {
    /**
     * Tool to compute distance transforms on MRI volumes.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param input_volume Input volume file
     * @param label Label value for distance transform calculation
     * @param max_distance Maximum distance for the transform
     * @param output_volume Output volume file
     * @param mode Mode of the distance transform: 1 = outside, 2 = inside, 3 = both, 4 = both unsigned
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MriDistanceTransformOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_DISTANCE_TRANSFORM_METADATA);
    const params = mri_distance_transform_params(input_volume, label, max_distance, output_volume, mode)
    return mri_distance_transform_execute(params, execution);
}


export {
      MRI_DISTANCE_TRANSFORM_METADATA,
      MriDistanceTransformOutputs,
      MriDistanceTransformParameters,
      mri_distance_transform,
      mri_distance_transform_params,
};
