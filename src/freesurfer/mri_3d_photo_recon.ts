// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_3D_PHOTO_RECON_METADATA: Metadata = {
    id: "1da2f095a43ac3c7dfc286883ae9220b1018660e.boutiques",
    name: "mri_3d_photo_recon",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface Mri3dPhotoReconParameters {
    "@type": "freesurfer.mri_3d_photo_recon";
    "input_photo_dir": Array<InputPathType>;
    "input_segmentation_dir": Array<InputPathType>;
    "slice_thickness": number;
    "photo_resolution": number;
    "output_directory": string;
    "ref_mask"?: InputPathType | null | undefined;
    "ref_surface"?: InputPathType | null | undefined;
    "ref_soft_mask"?: InputPathType | null | undefined;
    "mesh_reorient_with_indices"?: string | null | undefined;
    "photos_posterior_side": boolean;
    "order_posterior_to_anterior": boolean;
    "allow_z_stretch": boolean;
    "rigid_only_for_photos": boolean;
    "gpu_index"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_3d_photo_recon": mri_3d_photo_recon_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_3d_photo_recon": mri_3d_photo_recon_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_3d_photo_recon(...)`.
 *
 * @interface
 */
interface Mri3dPhotoReconOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Reconstructed photo volume output file
     */
    reconstructed_volume: OutputPathType;
    /**
     * Output reference data
     */
    reference_data: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_photo_dir Directory with input photos (required)
 * @param input_segmentation_dir Directory with input slab masks / segmentations (required)
 * @param slice_thickness Slice thickness in mm
 * @param photo_resolution Resolution of the photos in mm
 * @param output_directory Output directory with reconstructed photo volume and reference
 * @param ref_mask Reference binary mask
 * @param ref_surface Reference surface file
 * @param ref_soft_mask Reference soft mask
 * @param mesh_reorient_with_indices Vertex indices of frontal pole, occipital pole, and top of central sulcus, separated with commas, for mesh alignment
 * @param photos_posterior_side Use when photos are taken of posterior side of slabs (default is anterior side)
 * @param order_posterior_to_anterior Use when photos are ordered from posterior to anterior (default is anterior to posterior)
 * @param allow_z_stretch Use to adjust the slice thickness to best match the reference. You should probably *never* use this with soft references (ref_soft_mask)
 * @param rigid_only_for_photos Switch on if you want photos to deform only rigidly (not affine)
 * @param gpu_index Index of GPU to use
 *
 * @returns Parameter dictionary
 */
function mri_3d_photo_recon_params(
    input_photo_dir: Array<InputPathType>,
    input_segmentation_dir: Array<InputPathType>,
    slice_thickness: number,
    photo_resolution: number,
    output_directory: string,
    ref_mask: InputPathType | null = null,
    ref_surface: InputPathType | null = null,
    ref_soft_mask: InputPathType | null = null,
    mesh_reorient_with_indices: string | null = null,
    photos_posterior_side: boolean = false,
    order_posterior_to_anterior: boolean = false,
    allow_z_stretch: boolean = false,
    rigid_only_for_photos: boolean = false,
    gpu_index: number | null = null,
): Mri3dPhotoReconParameters {
    const params = {
        "@type": "freesurfer.mri_3d_photo_recon" as const,
        "input_photo_dir": input_photo_dir,
        "input_segmentation_dir": input_segmentation_dir,
        "slice_thickness": slice_thickness,
        "photo_resolution": photo_resolution,
        "output_directory": output_directory,
        "photos_posterior_side": photos_posterior_side,
        "order_posterior_to_anterior": order_posterior_to_anterior,
        "allow_z_stretch": allow_z_stretch,
        "rigid_only_for_photos": rigid_only_for_photos,
    };
    if (ref_mask !== null) {
        params["ref_mask"] = ref_mask;
    }
    if (ref_surface !== null) {
        params["ref_surface"] = ref_surface;
    }
    if (ref_soft_mask !== null) {
        params["ref_soft_mask"] = ref_soft_mask;
    }
    if (mesh_reorient_with_indices !== null) {
        params["mesh_reorient_with_indices"] = mesh_reorient_with_indices;
    }
    if (gpu_index !== null) {
        params["gpu_index"] = gpu_index;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_3d_photo_recon_cargs(
    params: Mri3dPhotoReconParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_3d_photo_recon");
    cargs.push(
        "--input_photo_dir",
        ...(params["input_photo_dir"] ?? null).map(f => execution.inputFile(f))
    );
    cargs.push(
        "--input_segmentation_dir",
        ...(params["input_segmentation_dir"] ?? null).map(f => execution.inputFile(f))
    );
    cargs.push(
        "--slice_thickness",
        String((params["slice_thickness"] ?? null))
    );
    cargs.push(
        "--photo_resolution",
        String((params["photo_resolution"] ?? null))
    );
    cargs.push(
        "--output_directory",
        (params["output_directory"] ?? null)
    );
    if ((params["ref_mask"] ?? null) !== null) {
        cargs.push(
            "--ref_mask",
            execution.inputFile((params["ref_mask"] ?? null))
        );
    }
    if ((params["ref_surface"] ?? null) !== null) {
        cargs.push(
            "--ref_surface",
            execution.inputFile((params["ref_surface"] ?? null))
        );
    }
    if ((params["ref_soft_mask"] ?? null) !== null) {
        cargs.push(
            "--ref_soft_mask",
            execution.inputFile((params["ref_soft_mask"] ?? null))
        );
    }
    if ((params["mesh_reorient_with_indices"] ?? null) !== null) {
        cargs.push(
            "--mesh_reorient_with_indices",
            (params["mesh_reorient_with_indices"] ?? null)
        );
    }
    if ((params["photos_posterior_side"] ?? null)) {
        cargs.push("--photos_of_posterior_side");
    }
    if ((params["order_posterior_to_anterior"] ?? null)) {
        cargs.push("--order_posterior_to_anterior");
    }
    if ((params["allow_z_stretch"] ?? null)) {
        cargs.push("--allow_z_stretch");
    }
    if ((params["rigid_only_for_photos"] ?? null)) {
        cargs.push("--rigid_only_for_photos");
    }
    if ((params["gpu_index"] ?? null) !== null) {
        cargs.push(
            "--gpu",
            String((params["gpu_index"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_3d_photo_recon_outputs(
    params: Mri3dPhotoReconParameters,
    execution: Execution,
): Mri3dPhotoReconOutputs {
    const ret: Mri3dPhotoReconOutputs = {
        root: execution.outputFile("."),
        reconstructed_volume: execution.outputFile([(params["output_directory"] ?? null), "/reconstructed_volume.nii.gz"].join('')),
        reference_data: execution.outputFile([(params["output_directory"] ?? null), "/reference_data.nii.gz"].join('')),
    };
    return ret;
}


/**
 * Code for 3D photo reconstruction (Tregidgo, et al., MICCAI 2020).
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `Mri3dPhotoReconOutputs`).
 */
function mri_3d_photo_recon_execute(
    params: Mri3dPhotoReconParameters,
    execution: Execution,
): Mri3dPhotoReconOutputs {
    params = execution.params(params)
    const cargs = mri_3d_photo_recon_cargs(params, execution)
    const ret = mri_3d_photo_recon_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Code for 3D photo reconstruction (Tregidgo, et al., MICCAI 2020).
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_photo_dir Directory with input photos (required)
 * @param input_segmentation_dir Directory with input slab masks / segmentations (required)
 * @param slice_thickness Slice thickness in mm
 * @param photo_resolution Resolution of the photos in mm
 * @param output_directory Output directory with reconstructed photo volume and reference
 * @param ref_mask Reference binary mask
 * @param ref_surface Reference surface file
 * @param ref_soft_mask Reference soft mask
 * @param mesh_reorient_with_indices Vertex indices of frontal pole, occipital pole, and top of central sulcus, separated with commas, for mesh alignment
 * @param photos_posterior_side Use when photos are taken of posterior side of slabs (default is anterior side)
 * @param order_posterior_to_anterior Use when photos are ordered from posterior to anterior (default is anterior to posterior)
 * @param allow_z_stretch Use to adjust the slice thickness to best match the reference. You should probably *never* use this with soft references (ref_soft_mask)
 * @param rigid_only_for_photos Switch on if you want photos to deform only rigidly (not affine)
 * @param gpu_index Index of GPU to use
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Mri3dPhotoReconOutputs`).
 */
function mri_3d_photo_recon(
    input_photo_dir: Array<InputPathType>,
    input_segmentation_dir: Array<InputPathType>,
    slice_thickness: number,
    photo_resolution: number,
    output_directory: string,
    ref_mask: InputPathType | null = null,
    ref_surface: InputPathType | null = null,
    ref_soft_mask: InputPathType | null = null,
    mesh_reorient_with_indices: string | null = null,
    photos_posterior_side: boolean = false,
    order_posterior_to_anterior: boolean = false,
    allow_z_stretch: boolean = false,
    rigid_only_for_photos: boolean = false,
    gpu_index: number | null = null,
    runner: Runner | null = null,
): Mri3dPhotoReconOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_3D_PHOTO_RECON_METADATA);
    const params = mri_3d_photo_recon_params(input_photo_dir, input_segmentation_dir, slice_thickness, photo_resolution, output_directory, ref_mask, ref_surface, ref_soft_mask, mesh_reorient_with_indices, photos_posterior_side, order_posterior_to_anterior, allow_z_stretch, rigid_only_for_photos, gpu_index)
    return mri_3d_photo_recon_execute(params, execution);
}


export {
      MRI_3D_PHOTO_RECON_METADATA,
      Mri3dPhotoReconOutputs,
      Mri3dPhotoReconParameters,
      mri_3d_photo_recon,
      mri_3d_photo_recon_cargs,
      mri_3d_photo_recon_execute,
      mri_3d_photo_recon_outputs,
      mri_3d_photo_recon_params,
};
