// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const VOLUME_REMOVE_ISLANDS_METADATA: Metadata = {
    id: "340ef0940c32fec80a5794a1b04f3d19beeb072d.boutiques",
    name: "volume-remove-islands",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface VolumeRemoveIslandsParameters {
    "__STYXTYPE__": "volume-remove-islands";
    "volume_in": InputPathType;
    "volume_out": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "volume-remove-islands": volume_remove_islands_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "volume-remove-islands": volume_remove_islands_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `volume_remove_islands(...)`.
 *
 * @interface
 */
interface VolumeRemoveIslandsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output ROI volume
     */
    volume_out: OutputPathType;
}


function volume_remove_islands_params(
    volume_in: InputPathType,
    volume_out: string,
): VolumeRemoveIslandsParameters {
    /**
     * Build parameters.
    
     * @param volume_in the input ROI volume
     * @param volume_out the output ROI volume
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "volume-remove-islands" as const,
        "volume_in": volume_in,
        "volume_out": volume_out,
    };
    return params;
}


function volume_remove_islands_cargs(
    params: VolumeRemoveIslandsParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-volume-remove-islands");
    cargs.push(execution.inputFile((params["volume_in"] ?? null)));
    cargs.push((params["volume_out"] ?? null));
    return cargs;
}


function volume_remove_islands_outputs(
    params: VolumeRemoveIslandsParameters,
    execution: Execution,
): VolumeRemoveIslandsOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: VolumeRemoveIslandsOutputs = {
        root: execution.outputFile("."),
        volume_out: execution.outputFile([(params["volume_out"] ?? null)].join('')),
    };
    return ret;
}


function volume_remove_islands_execute(
    params: VolumeRemoveIslandsParameters,
    execution: Execution,
): VolumeRemoveIslandsOutputs {
    /**
     * Remove islands from an roi volume.
     * 
     * Finds all face-connected parts of the ROI, and zeros out all but the largest one.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `VolumeRemoveIslandsOutputs`).
     */
    params = execution.params(params)
    const cargs = volume_remove_islands_cargs(params, execution)
    const ret = volume_remove_islands_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function volume_remove_islands(
    volume_in: InputPathType,
    volume_out: string,
    runner: Runner | null = null,
): VolumeRemoveIslandsOutputs {
    /**
     * Remove islands from an roi volume.
     * 
     * Finds all face-connected parts of the ROI, and zeros out all but the largest one.
     * 
     * Author: Connectome Workbench Developers
     * 
     * URL: https://github.com/Washington-University/workbench
    
     * @param volume_in the input ROI volume
     * @param volume_out the output ROI volume
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `VolumeRemoveIslandsOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(VOLUME_REMOVE_ISLANDS_METADATA);
    const params = volume_remove_islands_params(volume_in, volume_out)
    return volume_remove_islands_execute(params, execution);
}


export {
      VOLUME_REMOVE_ISLANDS_METADATA,
      VolumeRemoveIslandsOutputs,
      VolumeRemoveIslandsParameters,
      volume_remove_islands,
      volume_remove_islands_params,
};
