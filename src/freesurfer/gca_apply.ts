// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const GCA_APPLY_METADATA: Metadata = {
    id: "3eeb1cba1d7c8f0e6b004894e26c4716c5d93e5d.boutiques",
    name: "gca-apply",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface GcaApplyParameters {
    "@type": "freesurfer.gca-apply";
    "gcafile": InputPathType;
    "subject": string;
    "nthreads"?: number | null | undefined;
    "base"?: string | null | undefined;
    "no_segstats": boolean;
    "subjects_dir"?: string | null | undefined;
    "dice_seg"?: string | null | undefined;
    "dice_file"?: string | null | undefined;
    "lta"?: InputPathType | null | undefined;
    "norm"?: InputPathType | null | undefined;
    "input_mgz"?: InputPathType | null | undefined;
    "brainmask"?: InputPathType | null | undefined;
    "output_dir"?: string | null | undefined;
    "no_v6labopts": boolean;
    "m3z_file"?: InputPathType | null | undefined;
    "gca_rb_2016": boolean;
    "force_update": boolean;
    "gcareg_iters"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.gca-apply": gca_apply_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.gca-apply": gca_apply_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `gca_apply(...)`.
 *
 * @interface
 */
interface GcaApplyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output LTA file
     */
    output_lta: OutputPathType | null;
    /**
     * Output M3Z file
     */
    output_m3z: OutputPathType | null;
    /**
     * Normalized GCA base MGZ file
     */
    normalized_gca: OutputPathType | null;
    /**
     * Segmented GCA base MGZ file
     */
    segmented_gca: OutputPathType | null;
    /**
     * Statistical output file
     */
    stats_output: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param gcafile GCA file
 * @param subject Subject
 * @param nthreads Number of OMP threads
 * @param base Use gcabase for naming output files (default is basename gcafile)
 * @param no_segstats Do not compute segstats
 * @param subjects_dir Subjects directory
 * @param dice_seg Specify dice coefficient computation parameters
 * @param dice_file Specify dice coefficient computation file
 * @param lta Use SrcLTA instead of running mri_em_register
 * @param norm Use SrcNorm instead of running mri_ca_normalize
 * @param input_mgz Input file, default is nu.mgz
 * @param brainmask Brainmask file, default is brainmask.mgz
 * @param output_dir Output directory (default: SUBJECTS_DIR/subject)
 * @param no_v6labopts Do not include v6 command line options
 * @param m3z_file M3Z file
 * @param gca_rb_2016 Use RB_all_2016-05-10.vc700.gca
 * @param force_update Force recreation of a file even if it is younger than its parents
 * @param gcareg_iters Set to 1, only for testing
 *
 * @returns Parameter dictionary
 */
function gca_apply_params(
    gcafile: InputPathType,
    subject: string,
    nthreads: number | null = null,
    base: string | null = null,
    no_segstats: boolean = false,
    subjects_dir: string | null = null,
    dice_seg: string | null = null,
    dice_file: string | null = null,
    lta: InputPathType | null = null,
    norm: InputPathType | null = null,
    input_mgz: InputPathType | null = null,
    brainmask: InputPathType | null = null,
    output_dir: string | null = null,
    no_v6labopts: boolean = false,
    m3z_file: InputPathType | null = null,
    gca_rb_2016: boolean = false,
    force_update: boolean = false,
    gcareg_iters: number | null = null,
): GcaApplyParameters {
    const params = {
        "@type": "freesurfer.gca-apply" as const,
        "gcafile": gcafile,
        "subject": subject,
        "no_segstats": no_segstats,
        "no_v6labopts": no_v6labopts,
        "gca_rb_2016": gca_rb_2016,
        "force_update": force_update,
    };
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (base !== null) {
        params["base"] = base;
    }
    if (subjects_dir !== null) {
        params["subjects_dir"] = subjects_dir;
    }
    if (dice_seg !== null) {
        params["dice_seg"] = dice_seg;
    }
    if (dice_file !== null) {
        params["dice_file"] = dice_file;
    }
    if (lta !== null) {
        params["lta"] = lta;
    }
    if (norm !== null) {
        params["norm"] = norm;
    }
    if (input_mgz !== null) {
        params["input_mgz"] = input_mgz;
    }
    if (brainmask !== null) {
        params["brainmask"] = brainmask;
    }
    if (output_dir !== null) {
        params["output_dir"] = output_dir;
    }
    if (m3z_file !== null) {
        params["m3z_file"] = m3z_file;
    }
    if (gcareg_iters !== null) {
        params["gcareg_iters"] = gcareg_iters;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function gca_apply_cargs(
    params: GcaApplyParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("gca-apply");
    cargs.push(
        "-apply",
        execution.inputFile((params["gcafile"] ?? null))
    );
    cargs.push((params["subject"] ?? null));
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "--nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["base"] ?? null) !== null) {
        cargs.push(
            "--base",
            (params["base"] ?? null)
        );
    }
    if ((params["no_segstats"] ?? null)) {
        cargs.push("--no-segstats");
    }
    if ((params["subjects_dir"] ?? null) !== null) {
        cargs.push(
            "--sd",
            (params["subjects_dir"] ?? null)
        );
    }
    if ((params["dice_seg"] ?? null) !== null) {
        cargs.push(
            "--dice",
            (params["dice_seg"] ?? null)
        );
    }
    if ((params["dice_file"] ?? null) !== null) {
        cargs.push((params["dice_file"] ?? null));
    }
    if ((params["lta"] ?? null) !== null) {
        cargs.push(
            "--lta",
            execution.inputFile((params["lta"] ?? null))
        );
    }
    if ((params["norm"] ?? null) !== null) {
        cargs.push(
            "--norm",
            execution.inputFile((params["norm"] ?? null))
        );
    }
    if ((params["input_mgz"] ?? null) !== null) {
        cargs.push(
            "--input",
            execution.inputFile((params["input_mgz"] ?? null))
        );
    }
    if ((params["brainmask"] ?? null) !== null) {
        cargs.push(
            "--brainmask",
            execution.inputFile((params["brainmask"] ?? null))
        );
    }
    if ((params["output_dir"] ?? null) !== null) {
        cargs.push(
            "--o",
            (params["output_dir"] ?? null)
        );
    }
    if ((params["no_v6labopts"] ?? null)) {
        cargs.push("--no-v6labopts");
    }
    if ((params["m3z_file"] ?? null) !== null) {
        cargs.push(
            "--m3z",
            execution.inputFile((params["m3z_file"] ?? null))
        );
    }
    if ((params["gca_rb_2016"] ?? null)) {
        cargs.push("--gca-rb-2016");
    }
    if ((params["force_update"] ?? null)) {
        cargs.push("--force-update");
    }
    if ((params["gcareg_iters"] ?? null) !== null) {
        cargs.push(
            "--gcareg-iters",
            String((params["gcareg_iters"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function gca_apply_outputs(
    params: GcaApplyParameters,
    execution: Execution,
): GcaApplyOutputs {
    const ret: GcaApplyOutputs = {
        root: execution.outputFile("."),
        output_lta: ((params["base"] ?? null) !== null) ? execution.outputFile([(params["base"] ?? null), ".lta"].join('')) : null,
        output_m3z: ((params["base"] ?? null) !== null) ? execution.outputFile([(params["base"] ?? null), ".m3z"].join('')) : null,
        normalized_gca: ((params["base"] ?? null) !== null) ? execution.outputFile(["norm.", (params["base"] ?? null), ".mgz"].join('')) : null,
        segmented_gca: ((params["base"] ?? null) !== null) ? execution.outputFile([(params["base"] ?? null), ".aseg.mgz"].join('')) : null,
        stats_output: ((params["base"] ?? null) !== null) ? execution.outputFile([(params["base"] ?? null), ".stats"].join('')) : null,
    };
    return ret;
}


/**
 * gca-apply
 *
 * Applies a GCA, performing the steps of mri_em_register, mri_ca_normalize, mri_ca_register, and mri_ca_label. This script replicates the stages in recon-all without overwriting files.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `GcaApplyOutputs`).
 */
function gca_apply_execute(
    params: GcaApplyParameters,
    runner: Runner | null = null,
): GcaApplyOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(GCA_APPLY_METADATA);
    params = execution.params(params)
    const cargs = gca_apply_cargs(params, execution)
    const ret = gca_apply_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * gca-apply
 *
 * Applies a GCA, performing the steps of mri_em_register, mri_ca_normalize, mri_ca_register, and mri_ca_label. This script replicates the stages in recon-all without overwriting files.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param gcafile GCA file
 * @param subject Subject
 * @param nthreads Number of OMP threads
 * @param base Use gcabase for naming output files (default is basename gcafile)
 * @param no_segstats Do not compute segstats
 * @param subjects_dir Subjects directory
 * @param dice_seg Specify dice coefficient computation parameters
 * @param dice_file Specify dice coefficient computation file
 * @param lta Use SrcLTA instead of running mri_em_register
 * @param norm Use SrcNorm instead of running mri_ca_normalize
 * @param input_mgz Input file, default is nu.mgz
 * @param brainmask Brainmask file, default is brainmask.mgz
 * @param output_dir Output directory (default: SUBJECTS_DIR/subject)
 * @param no_v6labopts Do not include v6 command line options
 * @param m3z_file M3Z file
 * @param gca_rb_2016 Use RB_all_2016-05-10.vc700.gca
 * @param force_update Force recreation of a file even if it is younger than its parents
 * @param gcareg_iters Set to 1, only for testing
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `GcaApplyOutputs`).
 */
function gca_apply(
    gcafile: InputPathType,
    subject: string,
    nthreads: number | null = null,
    base: string | null = null,
    no_segstats: boolean = false,
    subjects_dir: string | null = null,
    dice_seg: string | null = null,
    dice_file: string | null = null,
    lta: InputPathType | null = null,
    norm: InputPathType | null = null,
    input_mgz: InputPathType | null = null,
    brainmask: InputPathType | null = null,
    output_dir: string | null = null,
    no_v6labopts: boolean = false,
    m3z_file: InputPathType | null = null,
    gca_rb_2016: boolean = false,
    force_update: boolean = false,
    gcareg_iters: number | null = null,
    runner: Runner | null = null,
): GcaApplyOutputs {
    const params = gca_apply_params(gcafile, subject, nthreads, base, no_segstats, subjects_dir, dice_seg, dice_file, lta, norm, input_mgz, brainmask, output_dir, no_v6labopts, m3z_file, gca_rb_2016, force_update, gcareg_iters)
    return gca_apply_execute(params, runner);
}


export {
      GCA_APPLY_METADATA,
      GcaApplyOutputs,
      GcaApplyParameters,
      gca_apply,
      gca_apply_execute,
      gca_apply_params,
};
