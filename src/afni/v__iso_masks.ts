// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__ISO_MASKS_METADATA: Metadata = {
    id: "efb13b19016645aff7a7273058c6f68edcfc682d.boutiques",
    name: "@IsoMasks",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VIsoMasksParameters {
    "__STYXTYPE__": "@IsoMasks";
    "input_dataset": InputPathType;
    "isovals"?: Array<number> | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "@IsoMasks": v__iso_masks_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__iso_masks(...)`.
 *
 * @interface
 */
interface VIsoMasksOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function v__iso_masks_params(
    input_dataset: InputPathType,
    isovals: Array<number> | null = null,
): VIsoMasksParameters {
    /**
     * Build parameters.
    
     * @param input_dataset Input dataset for creating isosurfaces
     * @param isovals Isovalue thresholds for creating isosurfaces
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "@IsoMasks" as const,
        "input_dataset": input_dataset,
    };
    if (isovals !== null) {
        params["isovals"] = isovals;
    }
    return params;
}


function v__iso_masks_cargs(
    params: VIsoMasksParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("@IsoMasks");
    cargs.push(
        "-mask",
        execution.inputFile((params["input_dataset"] ?? null))
    );
    if ((params["isovals"] ?? null) !== null) {
        cargs.push(...(params["isovals"] ?? null).map(String));
    }
    return cargs;
}


function v__iso_masks_outputs(
    params: VIsoMasksParameters,
    execution: Execution,
): VIsoMasksOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: VIsoMasksOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function v__iso_masks_execute(
    params: VIsoMasksParameters,
    execution: Execution,
): VIsoMasksOutputs {
    /**
     * Creates isosurfaces from isovolume envelopes.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `VIsoMasksOutputs`).
     */
    params = execution.params(params)
    const cargs = v__iso_masks_cargs(params, execution)
    const ret = v__iso_masks_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v__iso_masks(
    input_dataset: InputPathType,
    isovals: Array<number> | null = null,
    runner: Runner | null = null,
): VIsoMasksOutputs {
    /**
     * Creates isosurfaces from isovolume envelopes.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param input_dataset Input dataset for creating isosurfaces
     * @param isovals Isovalue thresholds for creating isosurfaces
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `VIsoMasksOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__ISO_MASKS_METADATA);
    const params = v__iso_masks_params(input_dataset, isovals)
    return v__iso_masks_execute(params, execution);
}


export {
      VIsoMasksOutputs,
      VIsoMasksParameters,
      V__ISO_MASKS_METADATA,
      v__iso_masks,
      v__iso_masks_params,
};
