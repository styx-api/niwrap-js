// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const PREDICT_V1_SH_METADATA: Metadata = {
    id: "a2a49b8ffc476b3fa2e75490295c5f01b94168c0.boutiques",
    name: "predict_v1.sh",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface PredictV1ShParameters {
    "@type": "freesurfer.predict_v1.sh";
    "template"?: string | null | undefined;
    "inflated_surface_flag": boolean;
    "hemisphere"?: string | null | undefined;
    "print_mode_flag": boolean;
    "subjects": Array<string>;
    "usage_flag": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.predict_v1.sh": predict_v1_sh_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `predict_v1_sh(...)`.
 *
 * @interface
 */
interface PredictV1ShOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subjects Subjects for prediction
 * @param template Target image for registration (exvivo or invivo [default])
 * @param inflated_surface_flag Don't use inflated surface as initial registration (backward compatibility)
 * @param hemisphere Hemisphere (rh or lh) default is both hemispheres
 * @param print_mode_flag Print mode (do not run commands, just print them)
 * @param usage_flag Print usage
 *
 * @returns Parameter dictionary
 */
function predict_v1_sh_params(
    subjects: Array<string>,
    template: string | null = null,
    inflated_surface_flag: boolean = false,
    hemisphere: string | null = null,
    print_mode_flag: boolean = false,
    usage_flag: boolean = false,
): PredictV1ShParameters {
    const params = {
        "@type": "freesurfer.predict_v1.sh" as const,
        "inflated_surface_flag": inflated_surface_flag,
        "print_mode_flag": print_mode_flag,
        "subjects": subjects,
        "usage_flag": usage_flag,
    };
    if (template !== null) {
        params["template"] = template;
    }
    if (hemisphere !== null) {
        params["hemisphere"] = hemisphere;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function predict_v1_sh_cargs(
    params: PredictV1ShParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("predict_v1.sh");
    if ((params["template"] ?? null) !== null) {
        cargs.push(
            "-t",
            (params["template"] ?? null)
        );
    }
    if ((params["inflated_surface_flag"] ?? null)) {
        cargs.push("-i");
    }
    if ((params["hemisphere"] ?? null) !== null) {
        cargs.push(
            "-h",
            (params["hemisphere"] ?? null)
        );
    }
    if ((params["print_mode_flag"] ?? null)) {
        cargs.push("-p");
    }
    cargs.push(...(params["subjects"] ?? null));
    if ((params["usage_flag"] ?? null)) {
        cargs.push("-u");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function predict_v1_sh_outputs(
    params: PredictV1ShParameters,
    execution: Execution,
): PredictV1ShOutputs {
    const ret: PredictV1ShOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * predict_v1.sh
 *
 * A script for predicting brain images using registration.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `PredictV1ShOutputs`).
 */
function predict_v1_sh_execute(
    params: PredictV1ShParameters,
    runner: Runner | null = null,
): PredictV1ShOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(PREDICT_V1_SH_METADATA);
    params = execution.params(params)
    const cargs = predict_v1_sh_cargs(params, execution)
    const ret = predict_v1_sh_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * predict_v1.sh
 *
 * A script for predicting brain images using registration.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subjects Subjects for prediction
 * @param template Target image for registration (exvivo or invivo [default])
 * @param inflated_surface_flag Don't use inflated surface as initial registration (backward compatibility)
 * @param hemisphere Hemisphere (rh or lh) default is both hemispheres
 * @param print_mode_flag Print mode (do not run commands, just print them)
 * @param usage_flag Print usage
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `PredictV1ShOutputs`).
 */
function predict_v1_sh(
    subjects: Array<string>,
    template: string | null = null,
    inflated_surface_flag: boolean = false,
    hemisphere: string | null = null,
    print_mode_flag: boolean = false,
    usage_flag: boolean = false,
    runner: Runner | null = null,
): PredictV1ShOutputs {
    const params = predict_v1_sh_params(subjects, template, inflated_surface_flag, hemisphere, print_mode_flag, usage_flag)
    return predict_v1_sh_execute(params, runner);
}


export {
      PREDICT_V1_SH_METADATA,
      PredictV1ShOutputs,
      PredictV1ShParameters,
      predict_v1_sh,
      predict_v1_sh_execute,
      predict_v1_sh_params,
};
