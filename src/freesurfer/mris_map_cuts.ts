// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_MAP_CUTS_METADATA: Metadata = {
    id: "c694d790811be0a427c0f191c8203d1e2914b980.boutiques",
    name: "mris_map_cuts",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisMapCutsParameters {
    "__STYXTYPE__": "mris_map_cuts";
    "input_patch": InputPathType;
    "output_patch": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mris_map_cuts": mris_map_cuts_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_map_cuts(...)`.
 *
 * @interface
 */
interface MrisMapCutsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function mris_map_cuts_params(
    input_patch: InputPathType,
    output_patch: string,
): MrisMapCutsParameters {
    /**
     * Build parameters.
    
     * @param input_patch Input patch file
     * @param output_patch Output patch file
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mris_map_cuts" as const,
        "input_patch": input_patch,
        "output_patch": output_patch,
    };
    return params;
}


function mris_map_cuts_cargs(
    params: MrisMapCutsParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mris_map_cuts");
    cargs.push(execution.inputFile((params["input_patch"] ?? null)));
    cargs.push((params["output_patch"] ?? null));
    return cargs;
}


function mris_map_cuts_outputs(
    params: MrisMapCutsParameters,
    execution: Execution,
): MrisMapCutsOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MrisMapCutsOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function mris_map_cuts_execute(
    params: MrisMapCutsParameters,
    execution: Execution,
): MrisMapCutsOutputs {
    /**
     * Tool for mapping cortical surface data onto cuts.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MrisMapCutsOutputs`).
     */
    params = execution.params(params)
    const cargs = mris_map_cuts_cargs(params, execution)
    const ret = mris_map_cuts_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mris_map_cuts(
    input_patch: InputPathType,
    output_patch: string,
    runner: Runner | null = null,
): MrisMapCutsOutputs {
    /**
     * Tool for mapping cortical surface data onto cuts.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param input_patch Input patch file
     * @param output_patch Output patch file
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MrisMapCutsOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_MAP_CUTS_METADATA);
    const params = mris_map_cuts_params(input_patch, output_patch)
    return mris_map_cuts_execute(params, execution);
}


export {
      MRIS_MAP_CUTS_METADATA,
      MrisMapCutsOutputs,
      MrisMapCutsParameters,
      mris_map_cuts,
      mris_map_cuts_params,
};
