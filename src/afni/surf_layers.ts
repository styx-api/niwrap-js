// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SURF_LAYERS_METADATA: Metadata = {
    id: "e966c2d7b51c012df1e75b107d18f44f83eac9a4.boutiques",
    name: "SurfLayers",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface SurfLayersParameters {
    "__STYXTYPE__": "SurfLayers";
    "spec_dset"?: InputPathType | null | undefined;
    "outdir"?: string | null | undefined;
    "states"?: string | null | undefined;
    "hemi"?: string | null | undefined;
    "n_intermed_surfs"?: number | null | undefined;
    "surf_a"?: InputPathType | null | undefined;
    "surf_b"?: InputPathType | null | undefined;
    "surf_intermed_pref"?: string | null | undefined;
    "echo": boolean;
    "no_clean": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "SurfLayers": surf_layers_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "SurfLayers": surf_layers_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `surf_layers(...)`.
 *
 * @interface
 */
interface SurfLayersOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Interpolated surfaces files
     */
    interpolated_surfaces: OutputPathType | null;
    /**
     * Additional files if -spec option was used
     */
    additional_spec_files: OutputPathType | null;
    /**
     * Run script to view output directly
     */
    run_view_script: OutputPathType | null;
}


function surf_layers_params(
    spec_dset: InputPathType | null = null,
    outdir: string | null = null,
    states: string | null = null,
    hemi: string | null = null,
    n_intermed_surfs: number | null = null,
    surf_a: InputPathType | null = null,
    surf_b: InputPathType | null = null,
    surf_intermed_pref: string | null = null,
    echo: boolean = false,
    no_clean: boolean = false,
): SurfLayersParameters {
    /**
     * Build parameters.
    
     * @param spec_dset Dataset that is the SUMA specification file describing input surfaces
     * @param outdir New directory for output (default: surflayers)
     * @param states Typically smoothwm, pial states to describe inner and outer surfaces (default: 'smoothwm pial')
     * @param hemi Choose hemisphere: 'lh', 'rh', or 'lh rh' (for both)
     * @param n_intermed_surfs Total number of intermediate surfaces to create
     * @param surf_a Inner boundary surface by filename (e.g., smoothwm.gii)
     * @param surf_b Outer boundary surface by filename (e.g., pial.gii)
     * @param surf_intermed_pref Name for interpolated surfaces (default: isurf)
     * @param echo Run script with 'set echo' (i.e., verbosely)
     * @param no_clean Do not remove temp files (probably just for testing)
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "SurfLayers" as const,
        "echo": echo,
        "no_clean": no_clean,
    };
    if (spec_dset !== null) {
        params["spec_dset"] = spec_dset;
    }
    if (outdir !== null) {
        params["outdir"] = outdir;
    }
    if (states !== null) {
        params["states"] = states;
    }
    if (hemi !== null) {
        params["hemi"] = hemi;
    }
    if (n_intermed_surfs !== null) {
        params["n_intermed_surfs"] = n_intermed_surfs;
    }
    if (surf_a !== null) {
        params["surf_a"] = surf_a;
    }
    if (surf_b !== null) {
        params["surf_b"] = surf_b;
    }
    if (surf_intermed_pref !== null) {
        params["surf_intermed_pref"] = surf_intermed_pref;
    }
    return params;
}


function surf_layers_cargs(
    params: SurfLayersParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("SurfLayers");
    if ((params["spec_dset"] ?? null) !== null) {
        cargs.push(
            "-spec",
            execution.inputFile((params["spec_dset"] ?? null))
        );
    }
    if ((params["outdir"] ?? null) !== null) {
        cargs.push(
            "-outdir",
            (params["outdir"] ?? null)
        );
    }
    if ((params["states"] ?? null) !== null) {
        cargs.push(
            "-states",
            (params["states"] ?? null)
        );
    }
    if ((params["hemi"] ?? null) !== null) {
        cargs.push(
            "-hemi",
            (params["hemi"] ?? null)
        );
    }
    if ((params["n_intermed_surfs"] ?? null) !== null) {
        cargs.push(
            "-n_intermed_surfs",
            String((params["n_intermed_surfs"] ?? null))
        );
    }
    if ((params["surf_a"] ?? null) !== null) {
        cargs.push(
            "-surf_A",
            execution.inputFile((params["surf_a"] ?? null))
        );
    }
    if ((params["surf_b"] ?? null) !== null) {
        cargs.push(
            "-surf_B",
            execution.inputFile((params["surf_b"] ?? null))
        );
    }
    if ((params["surf_intermed_pref"] ?? null) !== null) {
        cargs.push(
            "-surf_intermed_pref",
            (params["surf_intermed_pref"] ?? null)
        );
    }
    if ((params["echo"] ?? null)) {
        cargs.push("-echo");
    }
    if ((params["no_clean"] ?? null)) {
        cargs.push("-no_clean");
    }
    return cargs;
}


function surf_layers_outputs(
    params: SurfLayersParameters,
    execution: Execution,
): SurfLayersOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: SurfLayersOutputs = {
        root: execution.outputFile("."),
        interpolated_surfaces: ((params["outdir"] ?? null) !== null && (params["hemi"] ?? null) !== null) ? execution.outputFile([(params["outdir"] ?? null), "/isurf.", (params["hemi"] ?? null), ".*.gii"].join('')) : null,
        additional_spec_files: ((params["outdir"] ?? null) !== null) ? execution.outputFile([(params["outdir"] ?? null), "/*"].join('')) : null,
        run_view_script: ((params["outdir"] ?? null) !== null) ? execution.outputFile([(params["outdir"] ?? null), "/run*tcsh"].join('')) : null,
    };
    return ret;
}


function surf_layers_execute(
    params: SurfLayersParameters,
    execution: Execution,
): SurfLayersOutputs {
    /**
     * Compute intermediate equi-distant surfaces between two boundary surfaces.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `SurfLayersOutputs`).
     */
    params = execution.params(params)
    const cargs = surf_layers_cargs(params, execution)
    const ret = surf_layers_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function surf_layers(
    spec_dset: InputPathType | null = null,
    outdir: string | null = null,
    states: string | null = null,
    hemi: string | null = null,
    n_intermed_surfs: number | null = null,
    surf_a: InputPathType | null = null,
    surf_b: InputPathType | null = null,
    surf_intermed_pref: string | null = null,
    echo: boolean = false,
    no_clean: boolean = false,
    runner: Runner | null = null,
): SurfLayersOutputs {
    /**
     * Compute intermediate equi-distant surfaces between two boundary surfaces.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param spec_dset Dataset that is the SUMA specification file describing input surfaces
     * @param outdir New directory for output (default: surflayers)
     * @param states Typically smoothwm, pial states to describe inner and outer surfaces (default: 'smoothwm pial')
     * @param hemi Choose hemisphere: 'lh', 'rh', or 'lh rh' (for both)
     * @param n_intermed_surfs Total number of intermediate surfaces to create
     * @param surf_a Inner boundary surface by filename (e.g., smoothwm.gii)
     * @param surf_b Outer boundary surface by filename (e.g., pial.gii)
     * @param surf_intermed_pref Name for interpolated surfaces (default: isurf)
     * @param echo Run script with 'set echo' (i.e., verbosely)
     * @param no_clean Do not remove temp files (probably just for testing)
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `SurfLayersOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SURF_LAYERS_METADATA);
    const params = surf_layers_params(spec_dset, outdir, states, hemi, n_intermed_surfs, surf_a, surf_b, surf_intermed_pref, echo, no_clean)
    return surf_layers_execute(params, execution);
}


export {
      SURF_LAYERS_METADATA,
      SurfLayersOutputs,
      SurfLayersParameters,
      surf_layers,
      surf_layers_params,
};
