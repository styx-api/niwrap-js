// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TAL_QC_AZS_METADATA: Metadata = {
    id: "886563f0c6afbd7ecc04616fab1fcccc741bff0c.boutiques",
    name: "tal_QC_AZS",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface TalQcAzsParameters {
    "@type": "freesurfer.tal_QC_AZS";
    "logfile": InputPathType;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.tal_QC_AZS": tal_qc_azs_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `tal_qc_azs(...)`.
 *
 * @interface
 */
interface TalQcAzsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param logfile Input logfile for processing.
 *
 * @returns Parameter dictionary
 */
function tal_qc_azs_params(
    logfile: InputPathType,
): TalQcAzsParameters {
    const params = {
        "@type": "freesurfer.tal_QC_AZS" as const,
        "logfile": logfile,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function tal_qc_azs_cargs(
    params: TalQcAzsParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("tal_QC_AZS");
    cargs.push(execution.inputFile((params["logfile"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function tal_qc_azs_outputs(
    params: TalQcAzsParameters,
    execution: Execution,
): TalQcAzsOutputs {
    const ret: TalQcAzsOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * tal_QC_AZS
 *
 * A tool that processes a logfile.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TalQcAzsOutputs`).
 */
function tal_qc_azs_execute(
    params: TalQcAzsParameters,
    runner: Runner | null = null,
): TalQcAzsOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TAL_QC_AZS_METADATA);
    params = execution.params(params)
    const cargs = tal_qc_azs_cargs(params, execution)
    const ret = tal_qc_azs_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * tal_QC_AZS
 *
 * A tool that processes a logfile.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param logfile Input logfile for processing.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TalQcAzsOutputs`).
 */
function tal_qc_azs(
    logfile: InputPathType,
    runner: Runner | null = null,
): TalQcAzsOutputs {
    const params = tal_qc_azs_params(logfile)
    return tal_qc_azs_execute(params, runner);
}


export {
      TAL_QC_AZS_METADATA,
      TalQcAzsOutputs,
      TalQcAzsParameters,
      tal_qc_azs,
      tal_qc_azs_execute,
      tal_qc_azs_params,
};
