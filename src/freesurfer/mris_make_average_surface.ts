// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_MAKE_AVERAGE_SURFACE_METADATA: Metadata = {
    id: "5ca60dd661acd09992cf09d60028e85c12fb8055.boutiques",
    name: "mris_make_average_surface",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisMakeAverageSurfaceParameters {
    "__STYXTYPE__": "mris_make_average_surface";
    "hemi": string;
    "outsurfname": string;
    "cansurfname": string;
    "outsubject": string;
    "subjects": Array<string>;
    "sdir"?: string | null | undefined;
    "sdir_out"?: string | null | undefined;
    "nonorm_flag": boolean;
    "icoorder"?: number | null | undefined;
    "xfmname"?: string | null | undefined;
    "templatename"?: string | null | undefined;
    "surfname"?: string | null | undefined;
    "surf2surf_flag": boolean;
    "simple"?: Array<string> | null | undefined;
    "diagno"?: number | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "mris_make_average_surface": mris_make_average_surface_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "mris_make_average_surface": mris_make_average_surface_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_make_average_surface(...)`.
 *
 * @interface
 */
interface MrisMakeAverageSurfaceOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output averaged surface
     */
    output_surface: OutputPathType | null;
}


function mris_make_average_surface_params(
    hemi: string,
    outsurfname: string,
    cansurfname: string,
    outsubject: string,
    subjects: Array<string>,
    sdir: string | null = null,
    sdir_out: string | null = null,
    nonorm_flag: boolean = false,
    icoorder: number | null = null,
    xfmname: string | null = null,
    templatename: string | null = null,
    surfname: string | null = null,
    surf2surf_flag: boolean = false,
    simple: Array<string> | null = null,
    diagno: number | null = null,
): MrisMakeAverageSurfaceParameters {
    /**
     * Build parameters.
    
     * @param hemi Hemisphere, lh or rh
     * @param outsurfname Output surface name (e.g., avg_orig)
     * @param cansurfname Registration surface (e.g., sphere.reg)
     * @param outsubject Name of subject to store the results in
     * @param subjects List of subjects to average
     * @param sdir Use sdir instead of SUBJECTS_DIR
     * @param sdir_out Save results in sdirout/outsubject instead of SUBJECTS_DIR/outsubject
     * @param nonorm_flag Do not normalize area
     * @param icoorder Use given icosahedron order (default is 7)
     * @param xfmname Use transforms/xfmname instead of talairach.xfm
     * @param templatename Volume to use as geometry template for output surfaces
     * @param surfname Use surfname instead of orig
     * @param surf2surf_flag Use surf2surf transform instead of parametric surface
     * @param simple Compute an average surface from the list of surfaces. All surfaces must have same number of vertices.
     * @param diagno Set Gdiag_no to diagno
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "mris_make_average_surface" as const,
        "hemi": hemi,
        "outsurfname": outsurfname,
        "cansurfname": cansurfname,
        "outsubject": outsubject,
        "subjects": subjects,
        "nonorm_flag": nonorm_flag,
        "surf2surf_flag": surf2surf_flag,
    };
    if (sdir !== null) {
        params["sdir"] = sdir;
    }
    if (sdir_out !== null) {
        params["sdir_out"] = sdir_out;
    }
    if (icoorder !== null) {
        params["icoorder"] = icoorder;
    }
    if (xfmname !== null) {
        params["xfmname"] = xfmname;
    }
    if (templatename !== null) {
        params["templatename"] = templatename;
    }
    if (surfname !== null) {
        params["surfname"] = surfname;
    }
    if (simple !== null) {
        params["simple"] = simple;
    }
    if (diagno !== null) {
        params["diagno"] = diagno;
    }
    return params;
}


function mris_make_average_surface_cargs(
    params: MrisMakeAverageSurfaceParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("mris_make_average_surface");
    cargs.push((params["hemi"] ?? null));
    cargs.push((params["outsurfname"] ?? null));
    cargs.push((params["cansurfname"] ?? null));
    cargs.push((params["outsubject"] ?? null));
    cargs.push(...(params["subjects"] ?? null));
    if ((params["sdir"] ?? null) !== null) {
        cargs.push(
            "-sdir",
            (params["sdir"] ?? null)
        );
    }
    if ((params["sdir_out"] ?? null) !== null) {
        cargs.push(
            "-sdir-out",
            (params["sdir_out"] ?? null)
        );
    }
    if ((params["nonorm_flag"] ?? null)) {
        cargs.push("-nonorm");
    }
    if ((params["icoorder"] ?? null) !== null) {
        cargs.push(
            "-i",
            String((params["icoorder"] ?? null))
        );
    }
    if ((params["xfmname"] ?? null) !== null) {
        cargs.push(
            "-x",
            (params["xfmname"] ?? null)
        );
    }
    if ((params["templatename"] ?? null) !== null) {
        cargs.push(
            "-t",
            (params["templatename"] ?? null)
        );
    }
    if ((params["surfname"] ?? null) !== null) {
        cargs.push(
            "-s",
            (params["surfname"] ?? null)
        );
    }
    if ((params["surf2surf_flag"] ?? null)) {
        cargs.push("-surf2surf");
    }
    if ((params["simple"] ?? null) !== null) {
        cargs.push(
            "-simple",
            ...(params["simple"] ?? null)
        );
    }
    if ((params["diagno"] ?? null) !== null) {
        cargs.push(
            "-v",
            String((params["diagno"] ?? null))
        );
    }
    return cargs;
}


function mris_make_average_surface_outputs(
    params: MrisMakeAverageSurfaceParameters,
    execution: Execution,
): MrisMakeAverageSurfaceOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: MrisMakeAverageSurfaceOutputs = {
        root: execution.outputFile("."),
        output_surface: ((params["sdir_out"] ?? null) !== null) ? execution.outputFile([(params["sdir_out"] ?? null), "/", (params["outsubject"] ?? null), "/", (params["outsurfname"] ?? null)].join('')) : null,
    };
    return ret;
}


function mris_make_average_surface_execute(
    params: MrisMakeAverageSurfaceParameters,
    execution: Execution,
): MrisMakeAverageSurfaceOutputs {
    /**
     * A program to average the orig surfaces from the given subject list into a single surface using Talairach coords and the spherical transform.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `MrisMakeAverageSurfaceOutputs`).
     */
    params = execution.params(params)
    const cargs = mris_make_average_surface_cargs(params, execution)
    const ret = mris_make_average_surface_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function mris_make_average_surface(
    hemi: string,
    outsurfname: string,
    cansurfname: string,
    outsubject: string,
    subjects: Array<string>,
    sdir: string | null = null,
    sdir_out: string | null = null,
    nonorm_flag: boolean = false,
    icoorder: number | null = null,
    xfmname: string | null = null,
    templatename: string | null = null,
    surfname: string | null = null,
    surf2surf_flag: boolean = false,
    simple: Array<string> | null = null,
    diagno: number | null = null,
    runner: Runner | null = null,
): MrisMakeAverageSurfaceOutputs {
    /**
     * A program to average the orig surfaces from the given subject list into a single surface using Talairach coords and the spherical transform.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param hemi Hemisphere, lh or rh
     * @param outsurfname Output surface name (e.g., avg_orig)
     * @param cansurfname Registration surface (e.g., sphere.reg)
     * @param outsubject Name of subject to store the results in
     * @param subjects List of subjects to average
     * @param sdir Use sdir instead of SUBJECTS_DIR
     * @param sdir_out Save results in sdirout/outsubject instead of SUBJECTS_DIR/outsubject
     * @param nonorm_flag Do not normalize area
     * @param icoorder Use given icosahedron order (default is 7)
     * @param xfmname Use transforms/xfmname instead of talairach.xfm
     * @param templatename Volume to use as geometry template for output surfaces
     * @param surfname Use surfname instead of orig
     * @param surf2surf_flag Use surf2surf transform instead of parametric surface
     * @param simple Compute an average surface from the list of surfaces. All surfaces must have same number of vertices.
     * @param diagno Set Gdiag_no to diagno
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `MrisMakeAverageSurfaceOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_MAKE_AVERAGE_SURFACE_METADATA);
    const params = mris_make_average_surface_params(hemi, outsurfname, cansurfname, outsubject, subjects, sdir, sdir_out, nonorm_flag, icoorder, xfmname, templatename, surfname, surf2surf_flag, simple, diagno)
    return mris_make_average_surface_execute(params, execution);
}


export {
      MRIS_MAKE_AVERAGE_SURFACE_METADATA,
      MrisMakeAverageSurfaceOutputs,
      MrisMakeAverageSurfaceParameters,
      mris_make_average_surface,
      mris_make_average_surface_params,
};
