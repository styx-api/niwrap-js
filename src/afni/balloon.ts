// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const BALLOON_METADATA: Metadata = {
    id: "d38a0b74f4c93d5365bdded27c362f4ddc6e6b5f.boutiques",
    name: "balloon",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface BalloonParameters {
    "__STYXTYPE__": "balloon";
    "tr": number;
    "num_scans": number;
    "event_times": InputPathType;
    "t_fall"?: Array<number> | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "balloon": balloon_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `balloon(...)`.
 *
 * @interface
 */
interface BalloonOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function balloon_params(
    tr: number,
    num_scans: number,
    event_times: InputPathType,
    t_fall: Array<number> | null = null,
): BalloonParameters {
    /**
     * Build parameters.
    
     * @param tr Scan repetition time in seconds (TR), the interval at which the output curve will be sampled.
     * @param num_scans Number of scans (N), the output curve will comprise this number of samples.
     * @param event_times The name of a file containing the event timings, in seconds, as ASCII strings separated by white space, with time 0 being the time at which the initial scan occurred.
     * @param t_fall Haemodynamic fall time in seconds (typically between 4s and 6s).
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "balloon" as const,
        "tr": tr,
        "num_scans": num_scans,
        "event_times": event_times,
    };
    if (t_fall !== null) {
        params["t_fall"] = t_fall;
    }
    return params;
}


function balloon_cargs(
    params: BalloonParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("balloon");
    cargs.push(String((params["tr"] ?? null)));
    cargs.push(String((params["num_scans"] ?? null)));
    cargs.push(execution.inputFile((params["event_times"] ?? null)));
    if ((params["t_fall"] ?? null) !== null) {
        cargs.push(...(params["t_fall"] ?? null).map(String));
    }
    return cargs;
}


function balloon_outputs(
    params: BalloonParameters,
    execution: Execution,
): BalloonOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: BalloonOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function balloon_execute(
    params: BalloonParameters,
    execution: Execution,
): BalloonOutputs {
    /**
     * Simulation of haemodynamic response using the balloon model. Based on the theoretical model proposed by Buxton et al. (1998).
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `BalloonOutputs`).
     */
    params = execution.params(params)
    const cargs = balloon_cargs(params, execution)
    const ret = balloon_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function balloon(
    tr: number,
    num_scans: number,
    event_times: InputPathType,
    t_fall: Array<number> | null = null,
    runner: Runner | null = null,
): BalloonOutputs {
    /**
     * Simulation of haemodynamic response using the balloon model. Based on the theoretical model proposed by Buxton et al. (1998).
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param tr Scan repetition time in seconds (TR), the interval at which the output curve will be sampled.
     * @param num_scans Number of scans (N), the output curve will comprise this number of samples.
     * @param event_times The name of a file containing the event timings, in seconds, as ASCII strings separated by white space, with time 0 being the time at which the initial scan occurred.
     * @param t_fall Haemodynamic fall time in seconds (typically between 4s and 6s).
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `BalloonOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(BALLOON_METADATA);
    const params = balloon_params(tr, num_scans, event_times, t_fall)
    return balloon_execute(params, execution);
}


export {
      BALLOON_METADATA,
      BalloonOutputs,
      BalloonParameters,
      balloon,
      balloon_params,
};
