// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3DINFILL_METADATA: Metadata = {
    id: "e192d1724307f82f868e42a5d697adf2714da949.boutiques",
    name: "3dinfill",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dinfillParameters {
    "@type": "afni.3dinfill";
    "input": InputPathType;
    "prefix"?: string | null | undefined;
    "niter"?: number | null | undefined;
    "blend"?: "MODE" | "AVG" | "AUTO" | "SOLID" | "SOLID_CLEAN" | null | undefined;
    "minhits"?: number | null | undefined;
    "ed"?: Array<number> | null | undefined;
    "mask"?: InputPathType | null | undefined;
    "mask_range"?: Array<number> | null | undefined;
    "mrange"?: Array<number> | null | undefined;
    "cmask"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dinfill": v_3dinfill_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dinfill": v_3dinfill_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3dinfill(...)`.
 *
 * @interface
 */
interface V3dinfillOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Filled volume output
     */
    output_filled: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param input Fill volume dataset
 * @param prefix Use PREF for output prefix.
 * @param niter Do not allow the fill function to do more than NITER passes.
 * @param blend Method for assigning a value to a hole.
 * @param minhits Criterion for considering a zero voxel to be a hole. Can only be used with -blend SOLID.
 * @param ed Erode N times then dilate N times to get rid of hanging chunks. Values filled in by this process get value V.
 * @param mask Provide mask dataset to select subset of input.
 * @param mask_range Specify the range of values to consider from mask dataset.
 * @param mrange Alias for -mask_range option.
 * @param cmask Provide cmask expression. Voxels where expression is 0 are excluded from computations.
 *
 * @returns Parameter dictionary
 */
function v_3dinfill_params(
    input: InputPathType,
    prefix: string | null = null,
    niter: number | null = null,
    blend: "MODE" | "AVG" | "AUTO" | "SOLID" | "SOLID_CLEAN" | null = null,
    minhits: number | null = null,
    ed: Array<number> | null = null,
    mask: InputPathType | null = null,
    mask_range: Array<number> | null = null,
    mrange: Array<number> | null = null,
    cmask: string | null = null,
): V3dinfillParameters {
    const params = {
        "@type": "afni.3dinfill" as const,
        "input": input,
    };
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (niter !== null) {
        params["niter"] = niter;
    }
    if (blend !== null) {
        params["blend"] = blend;
    }
    if (minhits !== null) {
        params["minhits"] = minhits;
    }
    if (ed !== null) {
        params["ed"] = ed;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (mask_range !== null) {
        params["mask_range"] = mask_range;
    }
    if (mrange !== null) {
        params["mrange"] = mrange;
    }
    if (cmask !== null) {
        params["cmask"] = cmask;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3dinfill_cargs(
    params: V3dinfillParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dinfill");
    cargs.push(
        "-input",
        execution.inputFile((params["input"] ?? null))
    );
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["niter"] ?? null) !== null) {
        cargs.push(
            "-Niter",
            String((params["niter"] ?? null))
        );
    }
    if ((params["blend"] ?? null) !== null) {
        cargs.push(
            "-blend",
            (params["blend"] ?? null)
        );
    }
    if ((params["minhits"] ?? null) !== null) {
        cargs.push(
            "-minhits",
            String((params["minhits"] ?? null))
        );
    }
    if ((params["ed"] ?? null) !== null) {
        cargs.push(
            "-ed",
            ...(params["ed"] ?? null).map(String)
        );
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["mask_range"] ?? null) !== null) {
        cargs.push(
            "-mask_range",
            ...(params["mask_range"] ?? null).map(String)
        );
    }
    if ((params["mrange"] ?? null) !== null) {
        cargs.push(
            "-mrange",
            ...(params["mrange"] ?? null).map(String)
        );
    }
    if ((params["cmask"] ?? null) !== null) {
        cargs.push(
            "-cmask",
            (params["cmask"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3dinfill_outputs(
    params: V3dinfillParameters,
    execution: Execution,
): V3dinfillOutputs {
    const ret: V3dinfillOutputs = {
        root: execution.outputFile("."),
        output_filled: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), "_filled.nii.gz"].join('')) : null,
    };
    return ret;
}


/**
 * A program to fill holes in volumes.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dinfillOutputs`).
 */
function v_3dinfill_execute(
    params: V3dinfillParameters,
    runner: Runner | null = null,
): V3dinfillOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3DINFILL_METADATA);
    params = execution.params(params)
    const cargs = v_3dinfill_cargs(params, execution)
    const ret = v_3dinfill_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * A program to fill holes in volumes.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input Fill volume dataset
 * @param prefix Use PREF for output prefix.
 * @param niter Do not allow the fill function to do more than NITER passes.
 * @param blend Method for assigning a value to a hole.
 * @param minhits Criterion for considering a zero voxel to be a hole. Can only be used with -blend SOLID.
 * @param ed Erode N times then dilate N times to get rid of hanging chunks. Values filled in by this process get value V.
 * @param mask Provide mask dataset to select subset of input.
 * @param mask_range Specify the range of values to consider from mask dataset.
 * @param mrange Alias for -mask_range option.
 * @param cmask Provide cmask expression. Voxels where expression is 0 are excluded from computations.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dinfillOutputs`).
 */
function v_3dinfill(
    input: InputPathType,
    prefix: string | null = null,
    niter: number | null = null,
    blend: "MODE" | "AVG" | "AUTO" | "SOLID" | "SOLID_CLEAN" | null = null,
    minhits: number | null = null,
    ed: Array<number> | null = null,
    mask: InputPathType | null = null,
    mask_range: Array<number> | null = null,
    mrange: Array<number> | null = null,
    cmask: string | null = null,
    runner: Runner | null = null,
): V3dinfillOutputs {
    const params = v_3dinfill_params(input, prefix, niter, blend, minhits, ed, mask, mask_range, mrange, cmask)
    return v_3dinfill_execute(params, runner);
}


export {
      V3dinfillOutputs,
      V3dinfillParameters,
      V_3DINFILL_METADATA,
      v_3dinfill,
      v_3dinfill_execute,
      v_3dinfill_params,
};
