// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const SIENA_METADATA: Metadata = {
    id: "77e8f26dada103be35ec1ae0902457b8294c27b2.boutiques",
    name: "siena",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface SienaParameters {
    "@type"?: "fsl/siena";
    "input1": InputPathType;
    "input2": InputPathType;
    "output_dir"?: string | null | undefined;
    "debug_flag": boolean;
    "bet_options"?: string | null | undefined;
    "two_class_seg_flag": boolean;
    "t2_weighted_flag": boolean;
    "standard_space_mask_flag": boolean;
    "upper_ignore"?: number | null | undefined;
    "lower_ignore"?: number | null | undefined;
    "sienadiff_options"?: string | null | undefined;
    "ventricle_analysis_flag": boolean;
    "ventricle_mask"?: InputPathType | null | undefined;
}
type SienaParametersTagged = Required<Pick<SienaParameters, '@type'>> & SienaParameters;


/**
 * Output object returned when calling `SienaParameters(...)`.
 *
 * @interface
 */
interface SienaOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Siena analysis report
     */
    output_report: OutputPathType | null;
    /**
     * Siena ventricle analysis report
     */
    ventricle_analysis_report: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param input1 First input image (e.g. timepoint 1 image, img1.nii.gz)
 * @param input2 Second input image (e.g. timepoint 2 image, img2.nii.gz)
 * @param output_dir Set output directory (default output is <input1>_to_<input2>_siena)
 * @param debug_flag Debug (don't delete intermediate files)
 * @param bet_options Options to pass to BET brain extraction (inside double-quotes), e.g. -B "-f 0.3"
 * @param two_class_seg_flag Two-class segmentation (don't segment grey and white matter separately)
 * @param t2_weighted_flag T2-weighted input image (default T1-weighted)
 * @param standard_space_mask_flag Use standard-space masking as well as BET
 * @param upper_ignore Ignore from t (mm) upwards in MNI152/Talairach space
 * @param lower_ignore Ignore from b (mm) downwards in MNI152/Talairach space (b should probably be negative)
 * @param sienadiff_options Options to pass to siena_diff timepoint differencing (inside double-quotes), e.g. -S "-s -i 20"
 * @param ventricle_analysis_flag Run ventricle analysis (VIENA)
 * @param ventricle_mask Optional user-supplied ventricle mask (default is /usr/local/fsl/data/standard/MNI152_T1_2mm_VentricleMask)
 *
 * @returns Parameter dictionary
 */
function siena_params(
    input1: InputPathType,
    input2: InputPathType,
    output_dir: string | null = null,
    debug_flag: boolean = false,
    bet_options: string | null = null,
    two_class_seg_flag: boolean = false,
    t2_weighted_flag: boolean = false,
    standard_space_mask_flag: boolean = false,
    upper_ignore: number | null = null,
    lower_ignore: number | null = null,
    sienadiff_options: string | null = null,
    ventricle_analysis_flag: boolean = false,
    ventricle_mask: InputPathType | null = null,
): SienaParametersTagged {
    const params = {
        "@type": "fsl/siena" as const,
        "input1": input1,
        "input2": input2,
        "debug_flag": debug_flag,
        "two_class_seg_flag": two_class_seg_flag,
        "t2_weighted_flag": t2_weighted_flag,
        "standard_space_mask_flag": standard_space_mask_flag,
        "ventricle_analysis_flag": ventricle_analysis_flag,
    };
    if (output_dir !== null) {
        params["output_dir"] = output_dir;
    }
    if (bet_options !== null) {
        params["bet_options"] = bet_options;
    }
    if (upper_ignore !== null) {
        params["upper_ignore"] = upper_ignore;
    }
    if (lower_ignore !== null) {
        params["lower_ignore"] = lower_ignore;
    }
    if (sienadiff_options !== null) {
        params["sienadiff_options"] = sienadiff_options;
    }
    if (ventricle_mask !== null) {
        params["ventricle_mask"] = ventricle_mask;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function siena_cargs(
    params: SienaParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("siena");
    cargs.push(execution.inputFile((params["input1"] ?? null)));
    cargs.push(execution.inputFile((params["input2"] ?? null)));
    if ((params["output_dir"] ?? null) !== null) {
        cargs.push(
            "-o",
            (params["output_dir"] ?? null)
        );
    }
    if ((params["debug_flag"] ?? false)) {
        cargs.push("-d");
    }
    if ((params["bet_options"] ?? null) !== null) {
        cargs.push(
            "-B",
            (params["bet_options"] ?? null)
        );
    }
    if ((params["two_class_seg_flag"] ?? false)) {
        cargs.push("-2");
    }
    if ((params["t2_weighted_flag"] ?? false)) {
        cargs.push("-t2");
    }
    if ((params["standard_space_mask_flag"] ?? false)) {
        cargs.push("-m");
    }
    if ((params["upper_ignore"] ?? null) !== null) {
        cargs.push(
            "-t",
            String((params["upper_ignore"] ?? null))
        );
    }
    if ((params["lower_ignore"] ?? null) !== null) {
        cargs.push(
            "-b",
            String((params["lower_ignore"] ?? null))
        );
    }
    if ((params["sienadiff_options"] ?? null) !== null) {
        cargs.push(
            "-S",
            (params["sienadiff_options"] ?? null)
        );
    }
    if ((params["ventricle_analysis_flag"] ?? false)) {
        cargs.push("-V");
    }
    if ((params["ventricle_mask"] ?? null) !== null) {
        cargs.push(
            "-v",
            execution.inputFile((params["ventricle_mask"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function siena_outputs(
    params: SienaParameters,
    execution: Execution,
): SienaOutputs {
    const ret: SienaOutputs = {
        root: execution.outputFile("."),
        output_report: ((params["output_dir"] ?? null) !== null) ? execution.outputFile([(params["output_dir"] ?? null), "/report.html"].join('')) : null,
        ventricle_analysis_report: ((params["output_dir"] ?? null) !== null) ? execution.outputFile([(params["output_dir"] ?? null), "/report_vent.html"].join('')) : null,
    };
    return ret;
}


/**
 * siena
 *
 * Structural Image Evaluation, using Normalization, of Atrophy tool for evaluating brain atrophy between two timepoints.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SienaOutputs`).
 */
function siena_execute(
    params: SienaParameters,
    runner: Runner | null = null,
): SienaOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(SIENA_METADATA);
    params = execution.params(params)
    const cargs = siena_cargs(params, execution)
    const ret = siena_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * siena
 *
 * Structural Image Evaluation, using Normalization, of Atrophy tool for evaluating brain atrophy between two timepoints.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param input1 First input image (e.g. timepoint 1 image, img1.nii.gz)
 * @param input2 Second input image (e.g. timepoint 2 image, img2.nii.gz)
 * @param output_dir Set output directory (default output is <input1>_to_<input2>_siena)
 * @param debug_flag Debug (don't delete intermediate files)
 * @param bet_options Options to pass to BET brain extraction (inside double-quotes), e.g. -B "-f 0.3"
 * @param two_class_seg_flag Two-class segmentation (don't segment grey and white matter separately)
 * @param t2_weighted_flag T2-weighted input image (default T1-weighted)
 * @param standard_space_mask_flag Use standard-space masking as well as BET
 * @param upper_ignore Ignore from t (mm) upwards in MNI152/Talairach space
 * @param lower_ignore Ignore from b (mm) downwards in MNI152/Talairach space (b should probably be negative)
 * @param sienadiff_options Options to pass to siena_diff timepoint differencing (inside double-quotes), e.g. -S "-s -i 20"
 * @param ventricle_analysis_flag Run ventricle analysis (VIENA)
 * @param ventricle_mask Optional user-supplied ventricle mask (default is /usr/local/fsl/data/standard/MNI152_T1_2mm_VentricleMask)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `SienaOutputs`).
 */
function siena(
    input1: InputPathType,
    input2: InputPathType,
    output_dir: string | null = null,
    debug_flag: boolean = false,
    bet_options: string | null = null,
    two_class_seg_flag: boolean = false,
    t2_weighted_flag: boolean = false,
    standard_space_mask_flag: boolean = false,
    upper_ignore: number | null = null,
    lower_ignore: number | null = null,
    sienadiff_options: string | null = null,
    ventricle_analysis_flag: boolean = false,
    ventricle_mask: InputPathType | null = null,
    runner: Runner | null = null,
): SienaOutputs {
    const params = siena_params(input1, input2, output_dir, debug_flag, bet_options, two_class_seg_flag, t2_weighted_flag, standard_space_mask_flag, upper_ignore, lower_ignore, sienadiff_options, ventricle_analysis_flag, ventricle_mask)
    return siena_execute(params, runner);
}


export {
      SIENA_METADATA,
      SienaOutputs,
      siena,
      siena_execute,
      siena_params,
};
