// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const POLYORDER_METADATA: Metadata = {
    id: "e6d4be8d2371cbb8cd8b9c4ced96e4b035574b00.boutiques",
    name: "polyorder",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface PolyorderParameters {
    "@type": "freesurfer.polyorder";
    "ntp": number;
    "tr": number;
    "cutoff": number;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.polyorder": polyorder_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `polyorder(...)`.
 *
 * @interface
 */
interface PolyorderOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param ntp Number of time points (i.e., number of TRs).
 * @param tr TR in seconds.
 * @param cutoff Cutoff frequency in Hz.
 *
 * @returns Parameter dictionary
 */
function polyorder_params(
    ntp: number,
    tr: number,
    cutoff: number,
): PolyorderParameters {
    const params = {
        "@type": "freesurfer.polyorder" as const,
        "ntp": ntp,
        "tr": tr,
        "cutoff": cutoff,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function polyorder_cargs(
    params: PolyorderParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("polyorder");
    cargs.push(
        "--ntp",
        String((params["ntp"] ?? null))
    );
    cargs.push(
        "--TR",
        String((params["tr"] ?? null))
    );
    cargs.push(
        "--cutoff",
        String((params["cutoff"] ?? null))
    );
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function polyorder_outputs(
    params: PolyorderParameters,
    execution: Execution,
): PolyorderOutputs {
    const ret: PolyorderOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Computes the order of polynomial regressors needed to achieve a highpass filter with the given cutoff frequency.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `PolyorderOutputs`).
 */
function polyorder_execute(
    params: PolyorderParameters,
    runner: Runner | null = null,
): PolyorderOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(POLYORDER_METADATA);
    params = execution.params(params)
    const cargs = polyorder_cargs(params, execution)
    const ret = polyorder_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Computes the order of polynomial regressors needed to achieve a highpass filter with the given cutoff frequency.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param ntp Number of time points (i.e., number of TRs).
 * @param tr TR in seconds.
 * @param cutoff Cutoff frequency in Hz.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `PolyorderOutputs`).
 */
function polyorder(
    ntp: number,
    tr: number,
    cutoff: number,
    runner: Runner | null = null,
): PolyorderOutputs {
    const params = polyorder_params(ntp, tr, cutoff)
    return polyorder_execute(params, runner);
}


export {
      POLYORDER_METADATA,
      PolyorderOutputs,
      PolyorderParameters,
      polyorder,
      polyorder_execute,
      polyorder_params,
};
