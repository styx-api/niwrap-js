// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DMRI_FORREST_METADATA: Metadata = {
    id: "dd4542253804128ad899a822733de446938568c4.boutiques",
    name: "dmri_forrest",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface DmriForrestParameters {
    "__STYXTYPE__": "dmri_forrest";
    "test_dir": string;
    "train_file": InputPathType;
    "mask_file": InputPathType;
    "tract_files": Array<InputPathType>;
    "seg_file"?: InputPathType | null | undefined;
    "diff_file"?: InputPathType | null | undefined;
    "debug": boolean;
    "checkopts": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "dmri_forrest": dmri_forrest_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `dmri_forrest(...)`.
 *
 * @interface
 */
interface DmriForrestOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function dmri_forrest_params(
    test_dir: string,
    train_file: InputPathType,
    mask_file: InputPathType,
    tract_files: Array<InputPathType>,
    seg_file: InputPathType | null = null,
    diff_file: InputPathType | null = null,
    debug: boolean = false,
    checkopts: boolean = false,
): DmriForrestParameters {
    /**
     * Build parameters.
    
     * @param test_dir Directory containing the test subject data
     * @param train_file File listing training subject directories, one per line
     * @param mask_file Input brain mask volume name, relative to subject directory
     * @param tract_files Input tract label volume(s), relative to subject directory
     * @param seg_file Input aparc+aseg volume name, relative to subject directory
     * @param diff_file Input diffusion orientation volume name, relative to subject directory
     * @param debug Turn on debugging mode
     * @param checkopts Only check options and exit
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "dmri_forrest" as const,
        "test_dir": test_dir,
        "train_file": train_file,
        "mask_file": mask_file,
        "tract_files": tract_files,
        "debug": debug,
        "checkopts": checkopts,
    };
    if (seg_file !== null) {
        params["seg_file"] = seg_file;
    }
    if (diff_file !== null) {
        params["diff_file"] = diff_file;
    }
    return params;
}


function dmri_forrest_cargs(
    params: DmriForrestParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("dmri_forrest");
    cargs.push(
        "--test",
        (params["test_dir"] ?? null)
    );
    cargs.push(
        "--train",
        execution.inputFile((params["train_file"] ?? null))
    );
    cargs.push(
        "--mask",
        execution.inputFile((params["mask_file"] ?? null))
    );
    cargs.push(
        "--tract",
        ...(params["tract_files"] ?? null).map(f => execution.inputFile(f))
    );
    if ((params["seg_file"] ?? null) !== null) {
        cargs.push(
            "--seg",
            execution.inputFile((params["seg_file"] ?? null))
        );
    }
    if ((params["diff_file"] ?? null) !== null) {
        cargs.push(
            "--diff",
            execution.inputFile((params["diff_file"] ?? null))
        );
    }
    if ((params["debug"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["checkopts"] ?? null)) {
        cargs.push("--checkopts");
    }
    return cargs;
}


function dmri_forrest_outputs(
    params: DmriForrestParameters,
    execution: Execution,
): DmriForrestOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: DmriForrestOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function dmri_forrest_execute(
    params: DmriForrestParameters,
    execution: Execution,
): DmriForrestOutputs {
    /**
     * dmri_forrest is a tool for processing diffusion MRI data using a random forest-based method.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `DmriForrestOutputs`).
     */
    params = execution.params(params)
    const cargs = dmri_forrest_cargs(params, execution)
    const ret = dmri_forrest_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function dmri_forrest(
    test_dir: string,
    train_file: InputPathType,
    mask_file: InputPathType,
    tract_files: Array<InputPathType>,
    seg_file: InputPathType | null = null,
    diff_file: InputPathType | null = null,
    debug: boolean = false,
    checkopts: boolean = false,
    runner: Runner | null = null,
): DmriForrestOutputs {
    /**
     * dmri_forrest is a tool for processing diffusion MRI data using a random forest-based method.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param test_dir Directory containing the test subject data
     * @param train_file File listing training subject directories, one per line
     * @param mask_file Input brain mask volume name, relative to subject directory
     * @param tract_files Input tract label volume(s), relative to subject directory
     * @param seg_file Input aparc+aseg volume name, relative to subject directory
     * @param diff_file Input diffusion orientation volume name, relative to subject directory
     * @param debug Turn on debugging mode
     * @param checkopts Only check options and exit
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `DmriForrestOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DMRI_FORREST_METADATA);
    const params = dmri_forrest_params(test_dir, train_file, mask_file, tract_files, seg_file, diff_file, debug, checkopts)
    return dmri_forrest_execute(params, execution);
}


export {
      DMRI_FORREST_METADATA,
      DmriForrestOutputs,
      DmriForrestParameters,
      dmri_forrest,
      dmri_forrest_params,
};
