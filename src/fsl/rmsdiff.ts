// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const RMSDIFF_METADATA: Metadata = {
    id: "721e867f6f94c898ce8453a6c1d46d329b31f94e.boutiques",
    name: "rmsdiff",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface RmsdiffParameters {
    "@type": "fsl.rmsdiff";
    "matrixfile1": InputPathType;
    "matrixfile2": InputPathType;
    "refvol": InputPathType;
    "mask"?: InputPathType | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.rmsdiff": rmsdiff_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `rmsdiff(...)`.
 *
 * @interface
 */
interface RmsdiffOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param matrixfile1 First matrix file
 * @param matrixfile2 Second matrix file
 * @param refvol Reference volume
 * @param mask Optional mask
 *
 * @returns Parameter dictionary
 */
function rmsdiff_params(
    matrixfile1: InputPathType,
    matrixfile2: InputPathType,
    refvol: InputPathType,
    mask: InputPathType | null = null,
): RmsdiffParameters {
    const params = {
        "@type": "fsl.rmsdiff" as const,
        "matrixfile1": matrixfile1,
        "matrixfile2": matrixfile2,
        "refvol": refvol,
    };
    if (mask !== null) {
        params["mask"] = mask;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function rmsdiff_cargs(
    params: RmsdiffParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("rmsdiff");
    cargs.push(execution.inputFile((params["matrixfile1"] ?? null)));
    cargs.push(execution.inputFile((params["matrixfile2"] ?? null)));
    cargs.push(execution.inputFile((params["refvol"] ?? null)));
    if ((params["mask"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["mask"] ?? null)));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function rmsdiff_outputs(
    params: RmsdiffParameters,
    execution: Execution,
): RmsdiffOutputs {
    const ret: RmsdiffOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Outputs RMS deviation between matrices (in mm).
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `RmsdiffOutputs`).
 */
function rmsdiff_execute(
    params: RmsdiffParameters,
    runner: Runner | null = null,
): RmsdiffOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(RMSDIFF_METADATA);
    params = execution.params(params)
    const cargs = rmsdiff_cargs(params, execution)
    const ret = rmsdiff_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Outputs RMS deviation between matrices (in mm).
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param matrixfile1 First matrix file
 * @param matrixfile2 Second matrix file
 * @param refvol Reference volume
 * @param mask Optional mask
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `RmsdiffOutputs`).
 */
function rmsdiff(
    matrixfile1: InputPathType,
    matrixfile2: InputPathType,
    refvol: InputPathType,
    mask: InputPathType | null = null,
    runner: Runner | null = null,
): RmsdiffOutputs {
    const params = rmsdiff_params(matrixfile1, matrixfile2, refvol, mask)
    return rmsdiff_execute(params, runner);
}


export {
      RMSDIFF_METADATA,
      RmsdiffOutputs,
      RmsdiffParameters,
      rmsdiff,
      rmsdiff_execute,
      rmsdiff_params,
};
