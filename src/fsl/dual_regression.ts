// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DUAL_REGRESSION_METADATA: Metadata = {
    id: "95761355642a344c37dee8f8760f8d9218f994e1.boutiques",
    name: "dual_regression",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface DualRegressionParameters {
    "@type": "fsl.dual_regression";
    "group_ic_maps": InputPathType;
    "des_norm": number;
    "design_mat": InputPathType;
    "design_con": InputPathType;
    "n_perm": number;
    "thr_flag": boolean;
    "output_directory": string;
    "input_files": Array<InputPathType>;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.dual_regression": dual_regression_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.dual_regression": dual_regression_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `dual_regression(...)`.
 *
 * @interface
 */
interface DualRegressionOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output from stage 1 for each subject
     */
    stage1_output: OutputPathType;
    /**
     * Output from stage 2 for each subject
     */
    stage2_output: OutputPathType;
    /**
     * Output from stage 3 for each subject
     */
    stage3_output: OutputPathType;
    /**
     * Output of randomise
     */
    randomise_output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param group_ic_maps 4D image containing spatial IC maps (melodic_IC) from the whole-group ICA analysis
 * @param des_norm 0 or 1 (1 is recommended). Whether to variance-normalise the timecourses used as the stage-2 regressors
 * @param design_mat Design matrix for final cross-subject modelling with randomise
 * @param design_con Design contrasts for final cross-subject modelling with randomise
 * @param n_perm Number of permutations for randomise; set to 1 for just raw tstat output, set to 0 to not run randomise at all.
 * @param output_directory This directory will be created to hold all output and logfiles
 * @param input_files List of all subjects' preprocessed, standard-space 4D datasets
 * @param thr_flag Perform thresholded dual regression to obtain unbiased timeseries for connectomics analyses (e.g., with FSLnets)
 *
 * @returns Parameter dictionary
 */
function dual_regression_params(
    group_ic_maps: InputPathType,
    des_norm: number,
    design_mat: InputPathType,
    design_con: InputPathType,
    n_perm: number,
    output_directory: string,
    input_files: Array<InputPathType>,
    thr_flag: boolean = false,
): DualRegressionParameters {
    const params = {
        "@type": "fsl.dual_regression" as const,
        "group_ic_maps": group_ic_maps,
        "des_norm": des_norm,
        "design_mat": design_mat,
        "design_con": design_con,
        "n_perm": n_perm,
        "thr_flag": thr_flag,
        "output_directory": output_directory,
        "input_files": input_files,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function dual_regression_cargs(
    params: DualRegressionParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("dual_regression");
    cargs.push(execution.inputFile((params["group_ic_maps"] ?? null)));
    cargs.push(String((params["des_norm"] ?? null)));
    cargs.push(execution.inputFile((params["design_mat"] ?? null)));
    cargs.push(execution.inputFile((params["design_con"] ?? null)));
    cargs.push(String((params["n_perm"] ?? null)));
    if ((params["thr_flag"] ?? null)) {
        cargs.push("--thr");
    }
    cargs.push((params["output_directory"] ?? null));
    cargs.push(...(params["input_files"] ?? null).map(f => execution.inputFile(f)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function dual_regression_outputs(
    params: DualRegressionParameters,
    execution: Execution,
): DualRegressionOutputs {
    const ret: DualRegressionOutputs = {
        root: execution.outputFile("."),
        stage1_output: execution.outputFile([(params["output_directory"] ?? null), "/dr_stage1_subject[SUBJECT_INDEX].nii.gz"].join('')),
        stage2_output: execution.outputFile([(params["output_directory"] ?? null), "/dr_stage2_subject[SUBJECT_INDEX].nii.gz"].join('')),
        stage3_output: execution.outputFile([(params["output_directory"] ?? null), "/dr_stage3_subject[SUBJECT_INDEX].nii.gz"].join('')),
        randomise_output: execution.outputFile([(params["output_directory"] ?? null), "/dr_randomise"].join('')),
    };
    return ret;
}


/**
 * dual_regression
 *
 * Dual regression algorithm to investigate group-ICA results.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DualRegressionOutputs`).
 */
function dual_regression_execute(
    params: DualRegressionParameters,
    runner: Runner | null = null,
): DualRegressionOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DUAL_REGRESSION_METADATA);
    params = execution.params(params)
    const cargs = dual_regression_cargs(params, execution)
    const ret = dual_regression_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * dual_regression
 *
 * Dual regression algorithm to investigate group-ICA results.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param group_ic_maps 4D image containing spatial IC maps (melodic_IC) from the whole-group ICA analysis
 * @param des_norm 0 or 1 (1 is recommended). Whether to variance-normalise the timecourses used as the stage-2 regressors
 * @param design_mat Design matrix for final cross-subject modelling with randomise
 * @param design_con Design contrasts for final cross-subject modelling with randomise
 * @param n_perm Number of permutations for randomise; set to 1 for just raw tstat output, set to 0 to not run randomise at all.
 * @param output_directory This directory will be created to hold all output and logfiles
 * @param input_files List of all subjects' preprocessed, standard-space 4D datasets
 * @param thr_flag Perform thresholded dual regression to obtain unbiased timeseries for connectomics analyses (e.g., with FSLnets)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `DualRegressionOutputs`).
 */
function dual_regression(
    group_ic_maps: InputPathType,
    des_norm: number,
    design_mat: InputPathType,
    design_con: InputPathType,
    n_perm: number,
    output_directory: string,
    input_files: Array<InputPathType>,
    thr_flag: boolean = false,
    runner: Runner | null = null,
): DualRegressionOutputs {
    const params = dual_regression_params(group_ic_maps, des_norm, design_mat, design_con, n_perm, output_directory, input_files, thr_flag)
    return dual_regression_execute(params, runner);
}


export {
      DUAL_REGRESSION_METADATA,
      DualRegressionOutputs,
      DualRegressionParameters,
      dual_regression,
      dual_regression_execute,
      dual_regression_params,
};
