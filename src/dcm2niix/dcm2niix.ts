// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const DCM2NIIX_METADATA: Metadata = {
    id: "15ccd57203c6c358b266b58ae05fde04fa3d5414.boutiques",
    name: "dcm2niix",
    package: "dcm2niix",
    container_image_tag: "vnmd/dcm2niix_v1.0.20240202:20241125",
};


interface Dcm2niixParameters {
    "__STYXTYPE__": "dcm2niix";
    "compression_level"?: number | null | undefined;
    "adjacent"?: "y" | "n" | null | undefined;
    "bids"?: "y" | "n" | "o" | null | undefined;
    "bids_anon"?: "y" | "n" | null | undefined;
    "comment"?: string | null | undefined;
    "depth"?: number | null | undefined;
    "export_format"?: "y" | "n" | "o" | "j" | "b" | null | undefined;
    "filename"?: string | null | undefined;
    "defaults"?: "y" | "n" | "o" | "i" | null | undefined;
    "ignore_derived"?: "y" | "n" | null | undefined;
    "scaling"?: "y" | "n" | "o" | null | undefined;
    "merge_2d"?: "n" | "y" | "0" | "1" | "2" | null | undefined;
    "series_number"?: string | null | undefined;
    "output_dir"?: string | null | undefined;
    "philips_scaling"?: "y" | "n" | null | undefined;
    "search_mode"?: "y" | "l" | "n" | null | undefined;
    "rename"?: "y" | "n" | null | undefined;
    "single_file"?: "y" | "n" | null | undefined;
    "update_check": boolean;
    "verbose"?: "0" | "1" | "2" | null | undefined;
    "conflict_behavior"?: number | null | undefined;
    "crop_3d"?: "y" | "n" | "i" | null | undefined;
    "compression"?: "y" | "o" | "i" | "n" | "3" | null | undefined;
    "endian"?: "y" | "n" | "o" | null | undefined;
    "progress"?: "y" | "n" | null | undefined;
    "ignore_trigger": boolean;
    "terse": boolean;
    "xml": boolean;
    "input_dir": InputPathType;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "dcm2niix": dcm2niix_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `dcm2niix_(...)`.
 *
 * @interface
 */
interface Dcm2niixOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


function dcm2niix_params(
    input_dir: InputPathType,
    compression_level: number | null = null,
    adjacent: "y" | "n" | null = null,
    bids: "y" | "n" | "o" | null = null,
    bids_anon: "y" | "n" | null = null,
    comment: string | null = null,
    depth: number | null = null,
    export_format: "y" | "n" | "o" | "j" | "b" | null = null,
    filename: string | null = null,
    defaults: "y" | "n" | "o" | "i" | null = null,
    ignore_derived: "y" | "n" | null = null,
    scaling: "y" | "n" | "o" | null = null,
    merge_2d: "n" | "y" | "0" | "1" | "2" | null = null,
    series_number: string | null = null,
    output_dir: string | null = ".",
    philips_scaling: "y" | "n" | null = null,
    search_mode: "y" | "l" | "n" | null = null,
    rename: "y" | "n" | null = null,
    single_file: "y" | "n" | null = null,
    update_check: boolean = false,
    verbose: "0" | "1" | "2" | null = null,
    conflict_behavior: number | null = null,
    crop_3d: "y" | "n" | "i" | null = null,
    compression: "y" | "o" | "i" | "n" | "3" | null = null,
    endian: "y" | "n" | "o" | null = null,
    progress: "y" | "n" | null = null,
    ignore_trigger: boolean = false,
    terse: boolean = false,
    xml: boolean = false,
): Dcm2niixParameters {
    /**
     * Build parameters.
    
     * @param input_dir Input folder containing DICOM files. Will be searched recursively based on depth parameter.
     * @param compression_level gz compression level (1=fastest..9=smallest)
     * @param adjacent Adjacent DICOMs (images from same series always in same folder) for faster conversion
     * @param bids Generate BIDS sidecar JSON files (o=only: no NIfTI)
     * @param bids_anon Anonymize BIDS sidecar files by removing personal information
     * @param comment Comment stored in NIfTI aux_file (up to 24 characters)
     * @param depth Directory search depth for DICOM files in sub-folders
     * @param export_format Export format: NRRD (y), MGH (o), JSON/JNIfTI (j), or BJNIfTI (b)
     * @param filename Output filename template (%a=antenna, %b=basename, %c=comments, %d=description, %e=echo number, %f=folder name, %g=accession number, %i=ID of patient, %j=seriesInstanceUID, %k=studyInstanceUID, %m=manufacturer, %n=name of patient, %o=mediaObjectInstanceUID, %p=protocol, %r=instance number, %s=series number, %t=time, %u=acquisition number, %v=vendor, %x=study ID; %z=sequence name)
     * @param defaults Generate defaults file (o=only: reset and write defaults; i=ignore: reset defaults)
     * @param ignore_derived Ignore derived, localizer and 2D images
     * @param scaling Losslessly scale 16-bit integers (y=scale, n=no but uint16->int16, o=original)
     * @param merge_2d Merge 2D slices from same series regardless of echo, exposure, etc. (0=no, 1=yes, 2=auto)
     * @param series_number Only convert specified series CRC number (can be used up to 16 times)
     * @param output_dir Output directory (omit to save to input folder)
     * @param philips_scaling Use Philips precise float (not display) scaling
     * @param search_mode Search mode (y=show number of DICOMs, l=list DICOMs, n=no)
     * @param rename Rename instead of convert DICOMs
     * @param single_file Single file mode, do not convert other images in folder
     * @param update_check Check for newer versions
     * @param verbose Verbose output (0=no, 1=yes, 2=logorrheic)
     * @param conflict_behavior Write behavior for name conflicts (0=skip, 1=overwrite, 2=add suffix)
     * @param crop_3d Crop 3D acquisitions (i=ignore: neither crop nor rotate)
     * @param compression gz compress images (y=pigz, o=optimal pigz, i=internal:zlib, n=no, 3=no,3D)
     * @param endian Byte order (y=big-end, n=little-end, o=optimal/native)
     * @param progress Slicer format progress information
     * @param ignore_trigger Disregard values in 0018,1060 and 0020,9153
     * @param terse Omit filename post-fixes (can cause overwrites)
     * @param xml Output Slicer format features
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "dcm2niix" as const,
        "update_check": update_check,
        "ignore_trigger": ignore_trigger,
        "terse": terse,
        "xml": xml,
        "input_dir": input_dir,
    };
    if (compression_level !== null) {
        params["compression_level"] = compression_level;
    }
    if (adjacent !== null) {
        params["adjacent"] = adjacent;
    }
    if (bids !== null) {
        params["bids"] = bids;
    }
    if (bids_anon !== null) {
        params["bids_anon"] = bids_anon;
    }
    if (comment !== null) {
        params["comment"] = comment;
    }
    if (depth !== null) {
        params["depth"] = depth;
    }
    if (export_format !== null) {
        params["export_format"] = export_format;
    }
    if (filename !== null) {
        params["filename"] = filename;
    }
    if (defaults !== null) {
        params["defaults"] = defaults;
    }
    if (ignore_derived !== null) {
        params["ignore_derived"] = ignore_derived;
    }
    if (scaling !== null) {
        params["scaling"] = scaling;
    }
    if (merge_2d !== null) {
        params["merge_2d"] = merge_2d;
    }
    if (series_number !== null) {
        params["series_number"] = series_number;
    }
    if (output_dir !== null) {
        params["output_dir"] = output_dir;
    }
    if (philips_scaling !== null) {
        params["philips_scaling"] = philips_scaling;
    }
    if (search_mode !== null) {
        params["search_mode"] = search_mode;
    }
    if (rename !== null) {
        params["rename"] = rename;
    }
    if (single_file !== null) {
        params["single_file"] = single_file;
    }
    if (verbose !== null) {
        params["verbose"] = verbose;
    }
    if (conflict_behavior !== null) {
        params["conflict_behavior"] = conflict_behavior;
    }
    if (crop_3d !== null) {
        params["crop_3d"] = crop_3d;
    }
    if (compression !== null) {
        params["compression"] = compression;
    }
    if (endian !== null) {
        params["endian"] = endian;
    }
    if (progress !== null) {
        params["progress"] = progress;
    }
    return params;
}


function dcm2niix_cargs(
    params: Dcm2niixParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("dcm2niix");
    if ((params["compression_level"] ?? null) !== null) {
        cargs.push(["-", String((params["compression_level"] ?? null))].join(''));
    }
    if ((params["adjacent"] ?? null) !== null) {
        cargs.push(
            "-a",
            (params["adjacent"] ?? null)
        );
    }
    if ((params["bids"] ?? null) !== null) {
        cargs.push(
            "-b",
            (params["bids"] ?? null)
        );
    }
    if ((params["bids_anon"] ?? null) !== null) {
        cargs.push(
            "-ba",
            (params["bids_anon"] ?? null)
        );
    }
    if ((params["comment"] ?? null) !== null) {
        cargs.push(
            "-c",
            (params["comment"] ?? null)
        );
    }
    if ((params["depth"] ?? null) !== null) {
        cargs.push(
            "-d",
            String((params["depth"] ?? null))
        );
    }
    if ((params["export_format"] ?? null) !== null) {
        cargs.push(
            "-e",
            (params["export_format"] ?? null)
        );
    }
    if ((params["filename"] ?? null) !== null) {
        cargs.push(
            "-f",
            (params["filename"] ?? null)
        );
    }
    if ((params["defaults"] ?? null) !== null) {
        cargs.push(
            "-g",
            (params["defaults"] ?? null)
        );
    }
    if ((params["ignore_derived"] ?? null) !== null) {
        cargs.push(
            "-i",
            (params["ignore_derived"] ?? null)
        );
    }
    if ((params["scaling"] ?? null) !== null) {
        cargs.push(
            "-l",
            (params["scaling"] ?? null)
        );
    }
    if ((params["merge_2d"] ?? null) !== null) {
        cargs.push(
            "-m",
            (params["merge_2d"] ?? null)
        );
    }
    if ((params["series_number"] ?? null) !== null) {
        cargs.push(
            "-n",
            (params["series_number"] ?? null)
        );
    }
    if ((params["output_dir"] ?? null) !== null) {
        cargs.push(
            "-o",
            (params["output_dir"] ?? null)
        );
    }
    if ((params["philips_scaling"] ?? null) !== null) {
        cargs.push(
            "-p",
            (params["philips_scaling"] ?? null)
        );
    }
    if ((params["search_mode"] ?? null) !== null) {
        cargs.push(
            "-q",
            (params["search_mode"] ?? null)
        );
    }
    if ((params["rename"] ?? null) !== null) {
        cargs.push(
            "-r",
            (params["rename"] ?? null)
        );
    }
    if ((params["single_file"] ?? null) !== null) {
        cargs.push(
            "-s",
            (params["single_file"] ?? null)
        );
    }
    if ((params["update_check"] ?? null)) {
        cargs.push("-u");
    }
    if ((params["verbose"] ?? null) !== null) {
        cargs.push(
            "-v",
            (params["verbose"] ?? null)
        );
    }
    if ((params["conflict_behavior"] ?? null) !== null) {
        cargs.push(
            "-w",
            String((params["conflict_behavior"] ?? null))
        );
    }
    if ((params["crop_3d"] ?? null) !== null) {
        cargs.push(
            "-x",
            (params["crop_3d"] ?? null)
        );
    }
    if ((params["compression"] ?? null) !== null) {
        cargs.push(
            "-z",
            (params["compression"] ?? null)
        );
    }
    if ((params["endian"] ?? null) !== null) {
        cargs.push(
            "--big-endian",
            (params["endian"] ?? null)
        );
    }
    if ((params["progress"] ?? null) !== null) {
        cargs.push(
            "--progress",
            (params["progress"] ?? null)
        );
    }
    if ((params["ignore_trigger"] ?? null)) {
        cargs.push("--ignore_trigger_times");
    }
    if ((params["terse"] ?? null)) {
        cargs.push("--terse");
    }
    if ((params["xml"] ?? null)) {
        cargs.push("--xml");
    }
    cargs.push(execution.inputFile((params["input_dir"] ?? null)));
    return cargs;
}


function dcm2niix_outputs(
    params: Dcm2niixParameters,
    execution: Execution,
): Dcm2niixOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: Dcm2niixOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


function dcm2niix_execute(
    params: Dcm2niixParameters,
    execution: Execution,
): Dcm2niixOutputs {
    /**
     * Chris Rorden's dcm2niiX - DICOM to NIfTI converter. Converts DICOM files to NIfTI format with optional BIDS sidecar generation.
     * 
     * Author: Chris Rorden
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `Dcm2niixOutputs`).
     */
    params = execution.params(params)
    const cargs = dcm2niix_cargs(params, execution)
    const ret = dcm2niix_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function dcm2niix_(
    input_dir: InputPathType,
    compression_level: number | null = null,
    adjacent: "y" | "n" | null = null,
    bids: "y" | "n" | "o" | null = null,
    bids_anon: "y" | "n" | null = null,
    comment: string | null = null,
    depth: number | null = null,
    export_format: "y" | "n" | "o" | "j" | "b" | null = null,
    filename: string | null = null,
    defaults: "y" | "n" | "o" | "i" | null = null,
    ignore_derived: "y" | "n" | null = null,
    scaling: "y" | "n" | "o" | null = null,
    merge_2d: "n" | "y" | "0" | "1" | "2" | null = null,
    series_number: string | null = null,
    output_dir: string | null = ".",
    philips_scaling: "y" | "n" | null = null,
    search_mode: "y" | "l" | "n" | null = null,
    rename: "y" | "n" | null = null,
    single_file: "y" | "n" | null = null,
    update_check: boolean = false,
    verbose: "0" | "1" | "2" | null = null,
    conflict_behavior: number | null = null,
    crop_3d: "y" | "n" | "i" | null = null,
    compression: "y" | "o" | "i" | "n" | "3" | null = null,
    endian: "y" | "n" | "o" | null = null,
    progress: "y" | "n" | null = null,
    ignore_trigger: boolean = false,
    terse: boolean = false,
    xml: boolean = false,
    runner: Runner | null = null,
): Dcm2niixOutputs {
    /**
     * Chris Rorden's dcm2niiX - DICOM to NIfTI converter. Converts DICOM files to NIfTI format with optional BIDS sidecar generation.
     * 
     * Author: Chris Rorden
    
     * @param input_dir Input folder containing DICOM files. Will be searched recursively based on depth parameter.
     * @param compression_level gz compression level (1=fastest..9=smallest)
     * @param adjacent Adjacent DICOMs (images from same series always in same folder) for faster conversion
     * @param bids Generate BIDS sidecar JSON files (o=only: no NIfTI)
     * @param bids_anon Anonymize BIDS sidecar files by removing personal information
     * @param comment Comment stored in NIfTI aux_file (up to 24 characters)
     * @param depth Directory search depth for DICOM files in sub-folders
     * @param export_format Export format: NRRD (y), MGH (o), JSON/JNIfTI (j), or BJNIfTI (b)
     * @param filename Output filename template (%a=antenna, %b=basename, %c=comments, %d=description, %e=echo number, %f=folder name, %g=accession number, %i=ID of patient, %j=seriesInstanceUID, %k=studyInstanceUID, %m=manufacturer, %n=name of patient, %o=mediaObjectInstanceUID, %p=protocol, %r=instance number, %s=series number, %t=time, %u=acquisition number, %v=vendor, %x=study ID; %z=sequence name)
     * @param defaults Generate defaults file (o=only: reset and write defaults; i=ignore: reset defaults)
     * @param ignore_derived Ignore derived, localizer and 2D images
     * @param scaling Losslessly scale 16-bit integers (y=scale, n=no but uint16->int16, o=original)
     * @param merge_2d Merge 2D slices from same series regardless of echo, exposure, etc. (0=no, 1=yes, 2=auto)
     * @param series_number Only convert specified series CRC number (can be used up to 16 times)
     * @param output_dir Output directory (omit to save to input folder)
     * @param philips_scaling Use Philips precise float (not display) scaling
     * @param search_mode Search mode (y=show number of DICOMs, l=list DICOMs, n=no)
     * @param rename Rename instead of convert DICOMs
     * @param single_file Single file mode, do not convert other images in folder
     * @param update_check Check for newer versions
     * @param verbose Verbose output (0=no, 1=yes, 2=logorrheic)
     * @param conflict_behavior Write behavior for name conflicts (0=skip, 1=overwrite, 2=add suffix)
     * @param crop_3d Crop 3D acquisitions (i=ignore: neither crop nor rotate)
     * @param compression gz compress images (y=pigz, o=optimal pigz, i=internal:zlib, n=no, 3=no,3D)
     * @param endian Byte order (y=big-end, n=little-end, o=optimal/native)
     * @param progress Slicer format progress information
     * @param ignore_trigger Disregard values in 0018,1060 and 0020,9153
     * @param terse Omit filename post-fixes (can cause overwrites)
     * @param xml Output Slicer format features
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `Dcm2niixOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(DCM2NIIX_METADATA);
    const params = dcm2niix_params(input_dir, compression_level, adjacent, bids, bids_anon, comment, depth, export_format, filename, defaults, ignore_derived, scaling, merge_2d, series_number, output_dir, philips_scaling, search_mode, rename, single_file, update_check, verbose, conflict_behavior, crop_3d, compression, endian, progress, ignore_trigger, terse, xml)
    return dcm2niix_execute(params, execution);
}


export {
      DCM2NIIX_METADATA,
      Dcm2niixOutputs,
      Dcm2niixParameters,
      dcm2niix_,
      dcm2niix_params,
};
