// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_COMPUTE_OVERLAP_METADATA: Metadata = {
    id: "096c1bc6d75f5b86bf00d48b1b16b7c7e55a5520.boutiques",
    name: "mris_compute_overlap",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisComputeOverlapParameters {
    "@type": "freesurfer.mris_compute_overlap";
    "subject": string;
    "hemi": string;
    "surface": string;
    "annotation": string;
    "labels": Array<string>;
    "percentage": boolean;
    "log_file"?: string | null | undefined;
    "brain_volume"?: InputPathType | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mris_compute_overlap": mris_compute_overlap_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_compute_overlap(...)`.
 *
 * @interface
 */
interface MrisComputeOverlapOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subject Subject name
 * @param hemi Hemisphere (e.g. lh or rh)
 * @param surface Surface name
 * @param annotation Annotation name
 * @param labels Labels to compute overlap for
 * @param percentage Compute brain area as a percentage of all brain labels
 * @param log_file Log results to file, where %d will include label number
 * @param brain_volume Load brain volume and use it to normalize areas
 *
 * @returns Parameter dictionary
 */
function mris_compute_overlap_params(
    subject: string,
    hemi: string,
    surface: string,
    annotation: string,
    labels: Array<string>,
    percentage: boolean = false,
    log_file: string | null = null,
    brain_volume: InputPathType | null = null,
): MrisComputeOverlapParameters {
    const params = {
        "@type": "freesurfer.mris_compute_overlap" as const,
        "subject": subject,
        "hemi": hemi,
        "surface": surface,
        "annotation": annotation,
        "labels": labels,
        "percentage": percentage,
    };
    if (log_file !== null) {
        params["log_file"] = log_file;
    }
    if (brain_volume !== null) {
        params["brain_volume"] = brain_volume;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_compute_overlap_cargs(
    params: MrisComputeOverlapParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_compute_overlap");
    cargs.push((params["subject"] ?? null));
    cargs.push((params["hemi"] ?? null));
    cargs.push((params["surface"] ?? null));
    cargs.push((params["annotation"] ?? null));
    cargs.push(...(params["labels"] ?? null));
    if ((params["percentage"] ?? null)) {
        cargs.push("-p");
    }
    if ((params["log_file"] ?? null) !== null) {
        cargs.push(
            "-l",
            (params["log_file"] ?? null)
        );
    }
    if ((params["brain_volume"] ?? null) !== null) {
        cargs.push(
            "-b",
            execution.inputFile((params["brain_volume"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_compute_overlap_outputs(
    params: MrisComputeOverlapParameters,
    execution: Execution,
): MrisComputeOverlapOutputs {
    const ret: MrisComputeOverlapOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Tool to compute the overlap between two or more labels on a cortical surface.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `MrisComputeOverlapOutputs`).
 */
function mris_compute_overlap_execute(
    params: MrisComputeOverlapParameters,
    execution: Execution,
): MrisComputeOverlapOutputs {
    params = execution.params(params)
    const cargs = mris_compute_overlap_cargs(params, execution)
    const ret = mris_compute_overlap_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Tool to compute the overlap between two or more labels on a cortical surface.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subject Subject name
 * @param hemi Hemisphere (e.g. lh or rh)
 * @param surface Surface name
 * @param annotation Annotation name
 * @param labels Labels to compute overlap for
 * @param percentage Compute brain area as a percentage of all brain labels
 * @param log_file Log results to file, where %d will include label number
 * @param brain_volume Load brain volume and use it to normalize areas
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisComputeOverlapOutputs`).
 */
function mris_compute_overlap(
    subject: string,
    hemi: string,
    surface: string,
    annotation: string,
    labels: Array<string>,
    percentage: boolean = false,
    log_file: string | null = null,
    brain_volume: InputPathType | null = null,
    runner: Runner | null = null,
): MrisComputeOverlapOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_COMPUTE_OVERLAP_METADATA);
    const params = mris_compute_overlap_params(subject, hemi, surface, annotation, labels, percentage, log_file, brain_volume)
    return mris_compute_overlap_execute(params, execution);
}


export {
      MRIS_COMPUTE_OVERLAP_METADATA,
      MrisComputeOverlapOutputs,
      MrisComputeOverlapParameters,
      mris_compute_overlap,
      mris_compute_overlap_cargs,
      mris_compute_overlap_execute,
      mris_compute_overlap_outputs,
      mris_compute_overlap_params,
};
