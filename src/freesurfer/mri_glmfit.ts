// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_GLMFIT_METADATA: Metadata = {
    id: "e58e49e39c8f756f6ea924bf51ff894384fe5aff.boutiques",
    name: "mri_glmfit",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriGlmfitParameters {
    "@type": "freesurfer.mri_glmfit";
    "glmdir"?: string | null | undefined;
    "y_input": InputPathType;
    "table_input"?: InputPathType | null | undefined;
    "fsgd"?: InputPathType | null | undefined;
    "design_matrix"?: InputPathType | null | undefined;
    "contrast_matrix"?: Array<InputPathType> | null | undefined;
    "osgm_flag": boolean;
    "no_contrasts_ok_flag": boolean;
    "dti_params"?: Array<string> | null | undefined;
    "dti_matrix"?: InputPathType | null | undefined;
    "pvr"?: Array<InputPathType> | null | undefined;
    "selfreg"?: Array<number> | null | undefined;
    "wls"?: string | null | undefined;
    "yffxvar"?: InputPathType | null | undefined;
    "ffxdof"?: number | null | undefined;
    "ffxdofdat"?: InputPathType | null | undefined;
    "weight"?: InputPathType | null | undefined;
    "weight_inv_flag": boolean;
    "weight_sqrt_flag": boolean;
    "fwhm"?: number | null | undefined;
    "var_fwhm"?: number | null | undefined;
    "no_mask_smooth_flag": boolean;
    "no_est_fwhm_flag": boolean;
    "mask"?: InputPathType | null | undefined;
    "label"?: InputPathType | null | undefined;
    "no_mask_flag": boolean;
    "no_cortex_flag": boolean;
    "mask_inv_flag": boolean;
    "prune_flag": boolean;
    "no_prune_flag": boolean;
    "logy_flag": boolean;
    "no_logy_flag": boolean;
    "rm_spatial_mean_flag": boolean;
    "yhat_save_flag": boolean;
    "eres_save_flag": boolean;
    "eres_scm_flag": boolean;
    "save_fwhm_map_flag": boolean;
    "y_out"?: InputPathType | null | undefined;
    "surface"?: string | null | undefined;
    "skew_flag": boolean;
    "kurtosis_flag": boolean;
    "sim_params"?: Array<string> | null | undefined;
    "sim_sign"?: string | null | undefined;
    "uniform_params"?: Array<string> | null | undefined;
    "permute_input_flag": boolean;
    "pca_flag": boolean;
    "tar1_flag": boolean;
    "save_yhat_flag": boolean;
    "save_cond_flag": boolean;
    "voxdump"?: Array<number> | null | undefined;
    "seed"?: number | null | undefined;
    "synth_flag": boolean;
    "resynthtest_it"?: number | null | undefined;
    "profile_it"?: number | null | undefined;
    "mrtm1_params"?: Array<string> | null | undefined;
    "mrtm2_params"?: Array<string> | null | undefined;
    "logan_params"?: Array<string> | null | undefined;
    "bp_clip_neg_flag": boolean;
    "bp_clip_max"?: number | null | undefined;
    "perm_force_flag": boolean;
    "diag_level"?: number | null | undefined;
    "diag_cluster_flag": boolean;
    "debug_flag": boolean;
    "checkopts_flag": boolean;
    "help_flag": boolean;
    "version_flag": boolean;
    "no_fix_vertex_area_flag": boolean;
    "allowsubjrep_flag": boolean;
    "allow_zero_dof_flag": boolean;
    "illcond_flag": boolean;
    "sim_done_file"?: InputPathType | null | undefined;
    "no_sig_double_flag": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_glmfit": mri_glmfit_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_glmfit": mri_glmfit_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_glmfit(...)`.
 *
 * @interface
 */
interface MriGlmfitOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * All regression coefficients (B).
     */
    regression_coefs: OutputPathType;
    /**
     * Residual error.
     */
    residual_error: OutputPathType;
    /**
     * Residual error variance.
     */
    residual_variance: OutputPathType;
    /**
     * Residual error standard deviation.
     */
    residual_stddev: OutputPathType;
    /**
     * FSGD file if one was input.
     */
    fsgd_output: OutputPathType;
    /**
     * Normalized weights with --w or --wls.
     */
    normalized_weights: OutputPathType;
    /**
     * Signal estimate with --save-yhat.
     */
    signal_estimate: OutputPathType;
    /**
     * Final mask when a mask is used.
     */
    final_mask: OutputPathType;
    /**
     * Design matrix condition at each voxel with --save-cond.
     */
    design_condition: OutputPathType;
    /**
     * Directory for each contrast output files.
     */
    contrast_output_dir: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param y_input Path to input file where each frame is a separate input. Accepts volume or surface-based formats.
 * @param glmdir Directory where output will be saved.
 * @param table_input Use text table as input instead of --y. Table should be of form produced by asegstats2table or aparcstats2table.
 * @param fsgd Specify the global design matrix with a FreeSurfer Group Descriptor File (FSGDF).
 * @param design_matrix Explicitly specify the design matrix. Can be in simple text or in matlab4 format.
 * @param contrast_matrix Specify one or more contrasts to test. File should be ASCII text with the contrast matrix.
 * @param osgm_flag Construct X and C as a one-sample group mean.
 * @param no_contrasts_ok_flag Do not fail if no contrasts are specified.
 * @param dti_params Do DTI analysis using bvals and bvecs.
 * @param dti_matrix Do DTI analysis using provided matrix.
 * @param pvr Per-voxel (or vertex) regressors.
 * @param selfreg Create a 'self-regressor' from the input data based on the waveform at index col row slice.
 * @param wls Perform weighted least squares (WLS) random effects analysis instead of ordinary least squares (OLS) using yffxvar.
 * @param yffxvar For fixed effects analysis.
 * @param ffxdof Degrees of Freedom (DOF) for fixed effects analysis.
 * @param ffxdofdat Text file with DOF for fixed effects analysis.
 * @param weight Perform weighted LMS using per-voxel weights from the weightfile.
 * @param weight_inv_flag Invert weights.
 * @param weight_sqrt_flag Square root of (inverted) weights.
 * @param fwhm Smooth input with a Gaussian kernel, specified in mm.
 * @param var_fwhm Smooth residual variance map with a Gaussian kernel, specified in mm.
 * @param no_mask_smooth_flag Do not mask when smoothing.
 * @param no_est_fwhm_flag Turn off FWHM output estimation.
 * @param mask Binary mask file for analysis.
 * @param label Use label as mask for surface data.
 * @param no_mask_flag Do NOT use a mask, same as --no-cortex.
 * @param no_cortex_flag Do NOT use subjects ?h.cortex.label as --label.
 * @param mask_inv_flag Invert mask for analysis.
 * @param prune_flag Remove voxels that do not have a non-zero value at each frame.
 * @param no_prune_flag Do not prune zero-value voxels.
 * @param logy_flag Compute natural log of y prior to analysis.
 * @param no_logy_flag Do not compute natural log of y prior to analysis.
 * @param rm_spatial_mean_flag Subtract the (masked) mean from each frame.
 * @param yhat_save_flag Save signal estimate (yhat).
 * @param eres_save_flag Save residual error (eres).
 * @param eres_scm_flag Save residual error spatial correlation matrix (eres.scm).
 * @param save_fwhm_map_flag Save voxel-wise map of FWHM estimates.
 * @param y_out Save input after any pre-processing.
 * @param surface Specify that the input has a surface geometry from the hemisphere of the given FreeSurfer subject. Required for surface data operations.
 * @param skew_flag Compute skew and p-value for skew.
 * @param kurtosis_flag Compute kurtosis and p-value for kurtosis.
 * @param sim_params Simulate data for statistical testing. Specify nulltype, number of simulations, threshold and csd basename.
 * @param sim_sign Specify sign for simulation: abs, pos, or neg.
 * @param uniform_params Use uniform distribution for mc-full, specify min and max.
 * @param permute_input_flag Permute input for testing purposes (not related to simulation).
 * @param pca_flag Perform PCA/SVD analysis on the residual.
 * @param tar1_flag Compute and save temporal AR1 of residual.
 * @param save_yhat_flag Flag to save the signal estimate.
 * @param save_cond_flag Flag to save design matrix condition at each voxel.
 * @param voxdump Save GLM data for a single voxel at the specified col, row, slice.
 * @param seed Use seed for random number generation.
 * @param synth_flag Replace input data with Gaussian noise for testing.
 * @param resynthtest_it Test GLM by resynthsis with the number of iterations specified.
 * @param profile_it Test speed with specified number of iterations.
 * @param mrtm1_params Perform MRTM1 kinetic modeling with specified reference tissue activity and time in seconds.
 * @param mrtm2_params Perform MRTM2 kinetic modeling with specified parameters.
 * @param logan_params Perform Logan kinetic modeling with specified parameters.
 * @param bp_clip_neg_flag Set negative BP voxels to 0.
 * @param bp_clip_max Set BP voxels above max to max.
 * @param perm_force_flag Force permutation test, even when design matrix is not orthogonal.
 * @param diag_level Set diagnostic level.
 * @param diag_cluster_flag Save significant volume and exit from first simulation loop.
 * @param debug_flag Turn on debugging mode.
 * @param checkopts_flag Check options and exit without executing.
 * @param help_flag Display help information.
 * @param version_flag Print out version and exit.
 * @param no_fix_vertex_area_flag Turn off fixing of vertex area (backward compatibility).
 * @param allowsubjrep_flag Allow subject names to repeat in the fsgd file.
 * @param allow_zero_dof_flag Allow analyses with zero degrees of freedom.
 * @param illcond_flag Allow ill-conditioned design matrices.
 * @param sim_done_file Create done file when simulation finishes.
 * @param no_sig_double_flag Compute sig = -log10(p) from float p value, not double.
 *
 * @returns Parameter dictionary
 */
function mri_glmfit_params(
    y_input: InputPathType,
    glmdir: string | null = null,
    table_input: InputPathType | null = null,
    fsgd: InputPathType | null = null,
    design_matrix: InputPathType | null = null,
    contrast_matrix: Array<InputPathType> | null = null,
    osgm_flag: boolean = false,
    no_contrasts_ok_flag: boolean = false,
    dti_params: Array<string> | null = null,
    dti_matrix: InputPathType | null = null,
    pvr: Array<InputPathType> | null = null,
    selfreg: Array<number> | null = null,
    wls: string | null = null,
    yffxvar: InputPathType | null = null,
    ffxdof: number | null = null,
    ffxdofdat: InputPathType | null = null,
    weight: InputPathType | null = null,
    weight_inv_flag: boolean = false,
    weight_sqrt_flag: boolean = false,
    fwhm: number | null = null,
    var_fwhm: number | null = null,
    no_mask_smooth_flag: boolean = false,
    no_est_fwhm_flag: boolean = false,
    mask: InputPathType | null = null,
    label: InputPathType | null = null,
    no_mask_flag: boolean = false,
    no_cortex_flag: boolean = false,
    mask_inv_flag: boolean = false,
    prune_flag: boolean = false,
    no_prune_flag: boolean = false,
    logy_flag: boolean = false,
    no_logy_flag: boolean = false,
    rm_spatial_mean_flag: boolean = false,
    yhat_save_flag: boolean = false,
    eres_save_flag: boolean = false,
    eres_scm_flag: boolean = false,
    save_fwhm_map_flag: boolean = false,
    y_out: InputPathType | null = null,
    surface: string | null = null,
    skew_flag: boolean = false,
    kurtosis_flag: boolean = false,
    sim_params: Array<string> | null = null,
    sim_sign: string | null = null,
    uniform_params: Array<string> | null = null,
    permute_input_flag: boolean = false,
    pca_flag: boolean = false,
    tar1_flag: boolean = false,
    save_yhat_flag: boolean = false,
    save_cond_flag: boolean = false,
    voxdump: Array<number> | null = null,
    seed: number | null = null,
    synth_flag: boolean = false,
    resynthtest_it: number | null = null,
    profile_it: number | null = null,
    mrtm1_params: Array<string> | null = null,
    mrtm2_params: Array<string> | null = null,
    logan_params: Array<string> | null = null,
    bp_clip_neg_flag: boolean = false,
    bp_clip_max: number | null = null,
    perm_force_flag: boolean = false,
    diag_level: number | null = null,
    diag_cluster_flag: boolean = false,
    debug_flag: boolean = false,
    checkopts_flag: boolean = false,
    help_flag: boolean = false,
    version_flag: boolean = false,
    no_fix_vertex_area_flag: boolean = false,
    allowsubjrep_flag: boolean = false,
    allow_zero_dof_flag: boolean = false,
    illcond_flag: boolean = false,
    sim_done_file: InputPathType | null = null,
    no_sig_double_flag: boolean = false,
): MriGlmfitParameters {
    const params = {
        "@type": "freesurfer.mri_glmfit" as const,
        "y_input": y_input,
        "osgm_flag": osgm_flag,
        "no_contrasts_ok_flag": no_contrasts_ok_flag,
        "weight_inv_flag": weight_inv_flag,
        "weight_sqrt_flag": weight_sqrt_flag,
        "no_mask_smooth_flag": no_mask_smooth_flag,
        "no_est_fwhm_flag": no_est_fwhm_flag,
        "no_mask_flag": no_mask_flag,
        "no_cortex_flag": no_cortex_flag,
        "mask_inv_flag": mask_inv_flag,
        "prune_flag": prune_flag,
        "no_prune_flag": no_prune_flag,
        "logy_flag": logy_flag,
        "no_logy_flag": no_logy_flag,
        "rm_spatial_mean_flag": rm_spatial_mean_flag,
        "yhat_save_flag": yhat_save_flag,
        "eres_save_flag": eres_save_flag,
        "eres_scm_flag": eres_scm_flag,
        "save_fwhm_map_flag": save_fwhm_map_flag,
        "skew_flag": skew_flag,
        "kurtosis_flag": kurtosis_flag,
        "permute_input_flag": permute_input_flag,
        "pca_flag": pca_flag,
        "tar1_flag": tar1_flag,
        "save_yhat_flag": save_yhat_flag,
        "save_cond_flag": save_cond_flag,
        "synth_flag": synth_flag,
        "bp_clip_neg_flag": bp_clip_neg_flag,
        "perm_force_flag": perm_force_flag,
        "diag_cluster_flag": diag_cluster_flag,
        "debug_flag": debug_flag,
        "checkopts_flag": checkopts_flag,
        "help_flag": help_flag,
        "version_flag": version_flag,
        "no_fix_vertex_area_flag": no_fix_vertex_area_flag,
        "allowsubjrep_flag": allowsubjrep_flag,
        "allow_zero_dof_flag": allow_zero_dof_flag,
        "illcond_flag": illcond_flag,
        "no_sig_double_flag": no_sig_double_flag,
    };
    if (glmdir !== null) {
        params["glmdir"] = glmdir;
    }
    if (table_input !== null) {
        params["table_input"] = table_input;
    }
    if (fsgd !== null) {
        params["fsgd"] = fsgd;
    }
    if (design_matrix !== null) {
        params["design_matrix"] = design_matrix;
    }
    if (contrast_matrix !== null) {
        params["contrast_matrix"] = contrast_matrix;
    }
    if (dti_params !== null) {
        params["dti_params"] = dti_params;
    }
    if (dti_matrix !== null) {
        params["dti_matrix"] = dti_matrix;
    }
    if (pvr !== null) {
        params["pvr"] = pvr;
    }
    if (selfreg !== null) {
        params["selfreg"] = selfreg;
    }
    if (wls !== null) {
        params["wls"] = wls;
    }
    if (yffxvar !== null) {
        params["yffxvar"] = yffxvar;
    }
    if (ffxdof !== null) {
        params["ffxdof"] = ffxdof;
    }
    if (ffxdofdat !== null) {
        params["ffxdofdat"] = ffxdofdat;
    }
    if (weight !== null) {
        params["weight"] = weight;
    }
    if (fwhm !== null) {
        params["fwhm"] = fwhm;
    }
    if (var_fwhm !== null) {
        params["var_fwhm"] = var_fwhm;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (label !== null) {
        params["label"] = label;
    }
    if (y_out !== null) {
        params["y_out"] = y_out;
    }
    if (surface !== null) {
        params["surface"] = surface;
    }
    if (sim_params !== null) {
        params["sim_params"] = sim_params;
    }
    if (sim_sign !== null) {
        params["sim_sign"] = sim_sign;
    }
    if (uniform_params !== null) {
        params["uniform_params"] = uniform_params;
    }
    if (voxdump !== null) {
        params["voxdump"] = voxdump;
    }
    if (seed !== null) {
        params["seed"] = seed;
    }
    if (resynthtest_it !== null) {
        params["resynthtest_it"] = resynthtest_it;
    }
    if (profile_it !== null) {
        params["profile_it"] = profile_it;
    }
    if (mrtm1_params !== null) {
        params["mrtm1_params"] = mrtm1_params;
    }
    if (mrtm2_params !== null) {
        params["mrtm2_params"] = mrtm2_params;
    }
    if (logan_params !== null) {
        params["logan_params"] = logan_params;
    }
    if (bp_clip_max !== null) {
        params["bp_clip_max"] = bp_clip_max;
    }
    if (diag_level !== null) {
        params["diag_level"] = diag_level;
    }
    if (sim_done_file !== null) {
        params["sim_done_file"] = sim_done_file;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_glmfit_cargs(
    params: MriGlmfitParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_glmfit");
    if ((params["glmdir"] ?? null) !== null) {
        cargs.push(
            "--glmdir",
            (params["glmdir"] ?? null)
        );
    }
    cargs.push(
        "--y",
        execution.inputFile((params["y_input"] ?? null))
    );
    if ((params["table_input"] ?? null) !== null) {
        cargs.push(
            "--table",
            execution.inputFile((params["table_input"] ?? null))
        );
    }
    if ((params["fsgd"] ?? null) !== null) {
        cargs.push(
            "--fsgd",
            execution.inputFile((params["fsgd"] ?? null))
        );
    }
    if ((params["design_matrix"] ?? null) !== null) {
        cargs.push(
            "--X",
            execution.inputFile((params["design_matrix"] ?? null))
        );
    }
    if ((params["contrast_matrix"] ?? null) !== null) {
        cargs.push(
            "--C",
            ...(params["contrast_matrix"] ?? null).map(f => execution.inputFile(f))
        );
    }
    if ((params["osgm_flag"] ?? null)) {
        cargs.push("--osgm");
    }
    if ((params["no_contrasts_ok_flag"] ?? null)) {
        cargs.push("--no-contrasts-ok");
    }
    if ((params["dti_params"] ?? null) !== null) {
        cargs.push(
            "--dti",
            ...(params["dti_params"] ?? null)
        );
    }
    if ((params["dti_matrix"] ?? null) !== null) {
        cargs.push(
            "--dti-X",
            execution.inputFile((params["dti_matrix"] ?? null))
        );
    }
    if ((params["pvr"] ?? null) !== null) {
        cargs.push(
            "--pvr",
            ...(params["pvr"] ?? null).map(f => execution.inputFile(f))
        );
    }
    if ((params["selfreg"] ?? null) !== null) {
        cargs.push(
            "--selfreg",
            ...(params["selfreg"] ?? null).map(String)
        );
    }
    if ((params["wls"] ?? null) !== null) {
        cargs.push(
            "--wls",
            (params["wls"] ?? null)
        );
    }
    if ((params["yffxvar"] ?? null) !== null) {
        cargs.push(
            "--yffxvar",
            execution.inputFile((params["yffxvar"] ?? null))
        );
    }
    if ((params["ffxdof"] ?? null) !== null) {
        cargs.push(
            "--ffxdof",
            String((params["ffxdof"] ?? null))
        );
    }
    if ((params["ffxdofdat"] ?? null) !== null) {
        cargs.push(
            "--ffxdofdat",
            execution.inputFile((params["ffxdofdat"] ?? null))
        );
    }
    if ((params["weight"] ?? null) !== null) {
        cargs.push(
            "--w",
            execution.inputFile((params["weight"] ?? null))
        );
    }
    if ((params["weight_inv_flag"] ?? null)) {
        cargs.push("--w-inv");
    }
    if ((params["weight_sqrt_flag"] ?? null)) {
        cargs.push("--w-sqrt");
    }
    if ((params["fwhm"] ?? null) !== null) {
        cargs.push(
            "--fwhm",
            String((params["fwhm"] ?? null))
        );
    }
    if ((params["var_fwhm"] ?? null) !== null) {
        cargs.push(
            "--var-fwhm",
            String((params["var_fwhm"] ?? null))
        );
    }
    if ((params["no_mask_smooth_flag"] ?? null)) {
        cargs.push("--no-mask-smooth");
    }
    if ((params["no_est_fwhm_flag"] ?? null)) {
        cargs.push("--no-est-fwhm");
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "--mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["label"] ?? null) !== null) {
        cargs.push(
            "--label",
            execution.inputFile((params["label"] ?? null))
        );
    }
    if ((params["no_mask_flag"] ?? null)) {
        cargs.push("--no-mask");
    }
    if ((params["no_cortex_flag"] ?? null)) {
        cargs.push("--no-cortex");
    }
    if ((params["mask_inv_flag"] ?? null)) {
        cargs.push("--mask-inv");
    }
    if ((params["prune_flag"] ?? null)) {
        cargs.push("--prune");
    }
    if ((params["no_prune_flag"] ?? null)) {
        cargs.push("--no-prune");
    }
    if ((params["logy_flag"] ?? null)) {
        cargs.push("--logy");
    }
    if ((params["no_logy_flag"] ?? null)) {
        cargs.push("--no-logy");
    }
    if ((params["rm_spatial_mean_flag"] ?? null)) {
        cargs.push("--rm-spatial-mean");
    }
    if ((params["yhat_save_flag"] ?? null)) {
        cargs.push("--yhat-save");
    }
    if ((params["eres_save_flag"] ?? null)) {
        cargs.push("--eres-save");
    }
    if ((params["eres_scm_flag"] ?? null)) {
        cargs.push("--eres-scm");
    }
    if ((params["save_fwhm_map_flag"] ?? null)) {
        cargs.push("--save-fwhm-map");
    }
    if ((params["y_out"] ?? null) !== null) {
        cargs.push(
            "--y-out",
            execution.inputFile((params["y_out"] ?? null))
        );
    }
    if ((params["surface"] ?? null) !== null) {
        cargs.push(
            "--surf",
            (params["surface"] ?? null)
        );
    }
    if ((params["skew_flag"] ?? null)) {
        cargs.push("--skew");
    }
    if ((params["kurtosis_flag"] ?? null)) {
        cargs.push("--kurtosis");
    }
    if ((params["sim_params"] ?? null) !== null) {
        cargs.push(
            "--sim",
            ...(params["sim_params"] ?? null)
        );
    }
    if ((params["sim_sign"] ?? null) !== null) {
        cargs.push(
            "--sim-sign",
            (params["sim_sign"] ?? null)
        );
    }
    if ((params["uniform_params"] ?? null) !== null) {
        cargs.push(
            "--uniform",
            ...(params["uniform_params"] ?? null)
        );
    }
    if ((params["permute_input_flag"] ?? null)) {
        cargs.push("--permute-input");
    }
    if ((params["pca_flag"] ?? null)) {
        cargs.push("--pca");
    }
    if ((params["tar1_flag"] ?? null)) {
        cargs.push("--tar1");
    }
    if ((params["save_yhat_flag"] ?? null)) {
        cargs.push("--save-yhat");
    }
    if ((params["save_cond_flag"] ?? null)) {
        cargs.push("--save-cond");
    }
    if ((params["voxdump"] ?? null) !== null) {
        cargs.push(
            "--voxdump",
            ...(params["voxdump"] ?? null).map(String)
        );
    }
    if ((params["seed"] ?? null) !== null) {
        cargs.push(
            "--seed",
            String((params["seed"] ?? null))
        );
    }
    if ((params["synth_flag"] ?? null)) {
        cargs.push("--synth");
    }
    if ((params["resynthtest_it"] ?? null) !== null) {
        cargs.push(
            "--resynthtest",
            String((params["resynthtest_it"] ?? null))
        );
    }
    if ((params["profile_it"] ?? null) !== null) {
        cargs.push(
            "--profile",
            String((params["profile_it"] ?? null))
        );
    }
    if ((params["mrtm1_params"] ?? null) !== null) {
        cargs.push(
            "--mrtm1",
            ...(params["mrtm1_params"] ?? null)
        );
    }
    if ((params["mrtm2_params"] ?? null) !== null) {
        cargs.push(
            "--mrtm2",
            ...(params["mrtm2_params"] ?? null)
        );
    }
    if ((params["logan_params"] ?? null) !== null) {
        cargs.push(
            "--logan",
            ...(params["logan_params"] ?? null)
        );
    }
    if ((params["bp_clip_neg_flag"] ?? null)) {
        cargs.push("--bp-clip-neg");
    }
    if ((params["bp_clip_max"] ?? null) !== null) {
        cargs.push(
            "--bp-clip-max",
            String((params["bp_clip_max"] ?? null))
        );
    }
    if ((params["perm_force_flag"] ?? null)) {
        cargs.push("--perm-force");
    }
    if ((params["diag_level"] ?? null) !== null) {
        cargs.push(
            "--diag",
            String((params["diag_level"] ?? null))
        );
    }
    if ((params["diag_cluster_flag"] ?? null)) {
        cargs.push("--diag-cluster");
    }
    if ((params["debug_flag"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["checkopts_flag"] ?? null)) {
        cargs.push("--checkopts");
    }
    if ((params["help_flag"] ?? null)) {
        cargs.push("--help");
    }
    if ((params["version_flag"] ?? null)) {
        cargs.push("--version");
    }
    if ((params["no_fix_vertex_area_flag"] ?? null)) {
        cargs.push("--no-fix-vertex-area");
    }
    if ((params["allowsubjrep_flag"] ?? null)) {
        cargs.push("--allowsubjrep");
    }
    if ((params["allow_zero_dof_flag"] ?? null)) {
        cargs.push("--allow-zero-dof");
    }
    if ((params["illcond_flag"] ?? null)) {
        cargs.push("--illcond");
    }
    if ((params["sim_done_file"] ?? null) !== null) {
        cargs.push(
            "--sim-done",
            execution.inputFile((params["sim_done_file"] ?? null))
        );
    }
    if ((params["no_sig_double_flag"] ?? null)) {
        cargs.push("--no-sig-double");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_glmfit_outputs(
    params: MriGlmfitParameters,
    execution: Execution,
): MriGlmfitOutputs {
    const ret: MriGlmfitOutputs = {
        root: execution.outputFile("."),
        regression_coefs: execution.outputFile(["beta.mgh"].join('')),
        residual_error: execution.outputFile(["eres.mgh"].join('')),
        residual_variance: execution.outputFile(["rvar.mgh"].join('')),
        residual_stddev: execution.outputFile(["rstd.mgh"].join('')),
        fsgd_output: execution.outputFile(["y.fsgd"].join('')),
        normalized_weights: execution.outputFile(["wn.mgh"].join('')),
        signal_estimate: execution.outputFile(["yhat.mgh"].join('')),
        final_mask: execution.outputFile(["mask.mgh"].join('')),
        design_condition: execution.outputFile(["cond.mgh"].join('')),
        contrast_output_dir: execution.outputFile(["contrast1name"].join('')),
    };
    return ret;
}


/**
 * Performs general linear model (GLM) analysis in the volume or the surface.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `MriGlmfitOutputs`).
 */
function mri_glmfit_execute(
    params: MriGlmfitParameters,
    execution: Execution,
): MriGlmfitOutputs {
    params = execution.params(params)
    const cargs = mri_glmfit_cargs(params, execution)
    const ret = mri_glmfit_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Performs general linear model (GLM) analysis in the volume or the surface.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param y_input Path to input file where each frame is a separate input. Accepts volume or surface-based formats.
 * @param glmdir Directory where output will be saved.
 * @param table_input Use text table as input instead of --y. Table should be of form produced by asegstats2table or aparcstats2table.
 * @param fsgd Specify the global design matrix with a FreeSurfer Group Descriptor File (FSGDF).
 * @param design_matrix Explicitly specify the design matrix. Can be in simple text or in matlab4 format.
 * @param contrast_matrix Specify one or more contrasts to test. File should be ASCII text with the contrast matrix.
 * @param osgm_flag Construct X and C as a one-sample group mean.
 * @param no_contrasts_ok_flag Do not fail if no contrasts are specified.
 * @param dti_params Do DTI analysis using bvals and bvecs.
 * @param dti_matrix Do DTI analysis using provided matrix.
 * @param pvr Per-voxel (or vertex) regressors.
 * @param selfreg Create a 'self-regressor' from the input data based on the waveform at index col row slice.
 * @param wls Perform weighted least squares (WLS) random effects analysis instead of ordinary least squares (OLS) using yffxvar.
 * @param yffxvar For fixed effects analysis.
 * @param ffxdof Degrees of Freedom (DOF) for fixed effects analysis.
 * @param ffxdofdat Text file with DOF for fixed effects analysis.
 * @param weight Perform weighted LMS using per-voxel weights from the weightfile.
 * @param weight_inv_flag Invert weights.
 * @param weight_sqrt_flag Square root of (inverted) weights.
 * @param fwhm Smooth input with a Gaussian kernel, specified in mm.
 * @param var_fwhm Smooth residual variance map with a Gaussian kernel, specified in mm.
 * @param no_mask_smooth_flag Do not mask when smoothing.
 * @param no_est_fwhm_flag Turn off FWHM output estimation.
 * @param mask Binary mask file for analysis.
 * @param label Use label as mask for surface data.
 * @param no_mask_flag Do NOT use a mask, same as --no-cortex.
 * @param no_cortex_flag Do NOT use subjects ?h.cortex.label as --label.
 * @param mask_inv_flag Invert mask for analysis.
 * @param prune_flag Remove voxels that do not have a non-zero value at each frame.
 * @param no_prune_flag Do not prune zero-value voxels.
 * @param logy_flag Compute natural log of y prior to analysis.
 * @param no_logy_flag Do not compute natural log of y prior to analysis.
 * @param rm_spatial_mean_flag Subtract the (masked) mean from each frame.
 * @param yhat_save_flag Save signal estimate (yhat).
 * @param eres_save_flag Save residual error (eres).
 * @param eres_scm_flag Save residual error spatial correlation matrix (eres.scm).
 * @param save_fwhm_map_flag Save voxel-wise map of FWHM estimates.
 * @param y_out Save input after any pre-processing.
 * @param surface Specify that the input has a surface geometry from the hemisphere of the given FreeSurfer subject. Required for surface data operations.
 * @param skew_flag Compute skew and p-value for skew.
 * @param kurtosis_flag Compute kurtosis and p-value for kurtosis.
 * @param sim_params Simulate data for statistical testing. Specify nulltype, number of simulations, threshold and csd basename.
 * @param sim_sign Specify sign for simulation: abs, pos, or neg.
 * @param uniform_params Use uniform distribution for mc-full, specify min and max.
 * @param permute_input_flag Permute input for testing purposes (not related to simulation).
 * @param pca_flag Perform PCA/SVD analysis on the residual.
 * @param tar1_flag Compute and save temporal AR1 of residual.
 * @param save_yhat_flag Flag to save the signal estimate.
 * @param save_cond_flag Flag to save design matrix condition at each voxel.
 * @param voxdump Save GLM data for a single voxel at the specified col, row, slice.
 * @param seed Use seed for random number generation.
 * @param synth_flag Replace input data with Gaussian noise for testing.
 * @param resynthtest_it Test GLM by resynthsis with the number of iterations specified.
 * @param profile_it Test speed with specified number of iterations.
 * @param mrtm1_params Perform MRTM1 kinetic modeling with specified reference tissue activity and time in seconds.
 * @param mrtm2_params Perform MRTM2 kinetic modeling with specified parameters.
 * @param logan_params Perform Logan kinetic modeling with specified parameters.
 * @param bp_clip_neg_flag Set negative BP voxels to 0.
 * @param bp_clip_max Set BP voxels above max to max.
 * @param perm_force_flag Force permutation test, even when design matrix is not orthogonal.
 * @param diag_level Set diagnostic level.
 * @param diag_cluster_flag Save significant volume and exit from first simulation loop.
 * @param debug_flag Turn on debugging mode.
 * @param checkopts_flag Check options and exit without executing.
 * @param help_flag Display help information.
 * @param version_flag Print out version and exit.
 * @param no_fix_vertex_area_flag Turn off fixing of vertex area (backward compatibility).
 * @param allowsubjrep_flag Allow subject names to repeat in the fsgd file.
 * @param allow_zero_dof_flag Allow analyses with zero degrees of freedom.
 * @param illcond_flag Allow ill-conditioned design matrices.
 * @param sim_done_file Create done file when simulation finishes.
 * @param no_sig_double_flag Compute sig = -log10(p) from float p value, not double.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriGlmfitOutputs`).
 */
function mri_glmfit(
    y_input: InputPathType,
    glmdir: string | null = null,
    table_input: InputPathType | null = null,
    fsgd: InputPathType | null = null,
    design_matrix: InputPathType | null = null,
    contrast_matrix: Array<InputPathType> | null = null,
    osgm_flag: boolean = false,
    no_contrasts_ok_flag: boolean = false,
    dti_params: Array<string> | null = null,
    dti_matrix: InputPathType | null = null,
    pvr: Array<InputPathType> | null = null,
    selfreg: Array<number> | null = null,
    wls: string | null = null,
    yffxvar: InputPathType | null = null,
    ffxdof: number | null = null,
    ffxdofdat: InputPathType | null = null,
    weight: InputPathType | null = null,
    weight_inv_flag: boolean = false,
    weight_sqrt_flag: boolean = false,
    fwhm: number | null = null,
    var_fwhm: number | null = null,
    no_mask_smooth_flag: boolean = false,
    no_est_fwhm_flag: boolean = false,
    mask: InputPathType | null = null,
    label: InputPathType | null = null,
    no_mask_flag: boolean = false,
    no_cortex_flag: boolean = false,
    mask_inv_flag: boolean = false,
    prune_flag: boolean = false,
    no_prune_flag: boolean = false,
    logy_flag: boolean = false,
    no_logy_flag: boolean = false,
    rm_spatial_mean_flag: boolean = false,
    yhat_save_flag: boolean = false,
    eres_save_flag: boolean = false,
    eres_scm_flag: boolean = false,
    save_fwhm_map_flag: boolean = false,
    y_out: InputPathType | null = null,
    surface: string | null = null,
    skew_flag: boolean = false,
    kurtosis_flag: boolean = false,
    sim_params: Array<string> | null = null,
    sim_sign: string | null = null,
    uniform_params: Array<string> | null = null,
    permute_input_flag: boolean = false,
    pca_flag: boolean = false,
    tar1_flag: boolean = false,
    save_yhat_flag: boolean = false,
    save_cond_flag: boolean = false,
    voxdump: Array<number> | null = null,
    seed: number | null = null,
    synth_flag: boolean = false,
    resynthtest_it: number | null = null,
    profile_it: number | null = null,
    mrtm1_params: Array<string> | null = null,
    mrtm2_params: Array<string> | null = null,
    logan_params: Array<string> | null = null,
    bp_clip_neg_flag: boolean = false,
    bp_clip_max: number | null = null,
    perm_force_flag: boolean = false,
    diag_level: number | null = null,
    diag_cluster_flag: boolean = false,
    debug_flag: boolean = false,
    checkopts_flag: boolean = false,
    help_flag: boolean = false,
    version_flag: boolean = false,
    no_fix_vertex_area_flag: boolean = false,
    allowsubjrep_flag: boolean = false,
    allow_zero_dof_flag: boolean = false,
    illcond_flag: boolean = false,
    sim_done_file: InputPathType | null = null,
    no_sig_double_flag: boolean = false,
    runner: Runner | null = null,
): MriGlmfitOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_GLMFIT_METADATA);
    const params = mri_glmfit_params(y_input, glmdir, table_input, fsgd, design_matrix, contrast_matrix, osgm_flag, no_contrasts_ok_flag, dti_params, dti_matrix, pvr, selfreg, wls, yffxvar, ffxdof, ffxdofdat, weight, weight_inv_flag, weight_sqrt_flag, fwhm, var_fwhm, no_mask_smooth_flag, no_est_fwhm_flag, mask, label, no_mask_flag, no_cortex_flag, mask_inv_flag, prune_flag, no_prune_flag, logy_flag, no_logy_flag, rm_spatial_mean_flag, yhat_save_flag, eres_save_flag, eres_scm_flag, save_fwhm_map_flag, y_out, surface, skew_flag, kurtosis_flag, sim_params, sim_sign, uniform_params, permute_input_flag, pca_flag, tar1_flag, save_yhat_flag, save_cond_flag, voxdump, seed, synth_flag, resynthtest_it, profile_it, mrtm1_params, mrtm2_params, logan_params, bp_clip_neg_flag, bp_clip_max, perm_force_flag, diag_level, diag_cluster_flag, debug_flag, checkopts_flag, help_flag, version_flag, no_fix_vertex_area_flag, allowsubjrep_flag, allow_zero_dof_flag, illcond_flag, sim_done_file, no_sig_double_flag)
    return mri_glmfit_execute(params, execution);
}


export {
      MRI_GLMFIT_METADATA,
      MriGlmfitOutputs,
      MriGlmfitParameters,
      mri_glmfit,
      mri_glmfit_cargs,
      mri_glmfit_execute,
      mri_glmfit_outputs,
      mri_glmfit_params,
};
