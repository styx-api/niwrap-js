// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_INFLATE_METADATA: Metadata = {
    id: "8413bd9727e7211f290ec92777a3dd6eb3902178.boutiques",
    name: "mris_inflate",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisInflateParameters {
    "@type": "freesurfer.mris_inflate";
    "input_surface": InputPathType;
    "output_surface": string;
    "max_iterations"?: number | null | undefined;
    "snapshot_interval"?: number | null | undefined;
    "dist_coefficient"?: number | null | undefined;
    "no_save_sulc": boolean;
    "sulcname"?: string | null | undefined;
    "mm_flag": boolean;
    "scale_flag"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mris_inflate": mris_inflate_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mris_inflate": mris_inflate_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_inflate(...)`.
 *
 * @interface
 */
interface MrisInflateOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output surface file
     */
    output_surface_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_surface Input surface file
 * @param output_surface Output surface file
 * @param max_iterations Set the maximum number of iterations (default: 10)
 * @param snapshot_interval Write out a snapshot of the inflation every specified time step
 * @param dist_coefficient Specify the relative strength of the metric preserving term in the cost functional versus the smoothing term (default: 0.1)
 * @param no_save_sulc Do not save ?h.sulc
 * @param sulcname Save to ?h.sulcname
 * @param mm_flag Compute sulc in mm without zero meaning or scaling
 * @param scale_flag Disable or enable scaling of inflated brain
 *
 * @returns Parameter dictionary
 */
function mris_inflate_params(
    input_surface: InputPathType,
    output_surface: string,
    max_iterations: number | null = null,
    snapshot_interval: number | null = null,
    dist_coefficient: number | null = null,
    no_save_sulc: boolean = false,
    sulcname: string | null = null,
    mm_flag: boolean = false,
    scale_flag: number | null = null,
): MrisInflateParameters {
    const params = {
        "@type": "freesurfer.mris_inflate" as const,
        "input_surface": input_surface,
        "output_surface": output_surface,
        "no_save_sulc": no_save_sulc,
        "mm_flag": mm_flag,
    };
    if (max_iterations !== null) {
        params["max_iterations"] = max_iterations;
    }
    if (snapshot_interval !== null) {
        params["snapshot_interval"] = snapshot_interval;
    }
    if (dist_coefficient !== null) {
        params["dist_coefficient"] = dist_coefficient;
    }
    if (sulcname !== null) {
        params["sulcname"] = sulcname;
    }
    if (scale_flag !== null) {
        params["scale_flag"] = scale_flag;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_inflate_cargs(
    params: MrisInflateParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_inflate");
    cargs.push(execution.inputFile((params["input_surface"] ?? null)));
    cargs.push((params["output_surface"] ?? null));
    if ((params["max_iterations"] ?? null) !== null) {
        cargs.push(
            "-n",
            String((params["max_iterations"] ?? null))
        );
    }
    if ((params["snapshot_interval"] ?? null) !== null) {
        cargs.push(
            "-w",
            String((params["snapshot_interval"] ?? null))
        );
    }
    if ((params["dist_coefficient"] ?? null) !== null) {
        cargs.push(
            "-dist",
            String((params["dist_coefficient"] ?? null))
        );
    }
    if ((params["no_save_sulc"] ?? null)) {
        cargs.push("-no-save-sulc");
    }
    if ((params["sulcname"] ?? null) !== null) {
        cargs.push(
            "-sulc",
            (params["sulcname"] ?? null)
        );
    }
    if ((params["mm_flag"] ?? null)) {
        cargs.push("-mm");
    }
    if ((params["scale_flag"] ?? null) !== null) {
        cargs.push(
            "-scale",
            String((params["scale_flag"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_inflate_outputs(
    params: MrisInflateParameters,
    execution: Execution,
): MrisInflateOutputs {
    const ret: MrisInflateOutputs = {
        root: execution.outputFile("."),
        output_surface_file: execution.outputFile([(params["output_surface"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mris_inflate
 *
 * Cortical surface inflation tool.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisInflateOutputs`).
 */
function mris_inflate_execute(
    params: MrisInflateParameters,
    runner: Runner | null = null,
): MrisInflateOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_INFLATE_METADATA);
    params = execution.params(params)
    const cargs = mris_inflate_cargs(params, execution)
    const ret = mris_inflate_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mris_inflate
 *
 * Cortical surface inflation tool.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_surface Input surface file
 * @param output_surface Output surface file
 * @param max_iterations Set the maximum number of iterations (default: 10)
 * @param snapshot_interval Write out a snapshot of the inflation every specified time step
 * @param dist_coefficient Specify the relative strength of the metric preserving term in the cost functional versus the smoothing term (default: 0.1)
 * @param no_save_sulc Do not save ?h.sulc
 * @param sulcname Save to ?h.sulcname
 * @param mm_flag Compute sulc in mm without zero meaning or scaling
 * @param scale_flag Disable or enable scaling of inflated brain
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisInflateOutputs`).
 */
function mris_inflate(
    input_surface: InputPathType,
    output_surface: string,
    max_iterations: number | null = null,
    snapshot_interval: number | null = null,
    dist_coefficient: number | null = null,
    no_save_sulc: boolean = false,
    sulcname: string | null = null,
    mm_flag: boolean = false,
    scale_flag: number | null = null,
    runner: Runner | null = null,
): MrisInflateOutputs {
    const params = mris_inflate_params(input_surface, output_surface, max_iterations, snapshot_interval, dist_coefficient, no_save_sulc, sulcname, mm_flag, scale_flag)
    return mris_inflate_execute(params, runner);
}


export {
      MRIS_INFLATE_METADATA,
      MrisInflateOutputs,
      MrisInflateParameters,
      mris_inflate,
      mris_inflate_execute,
      mris_inflate_params,
};
