// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const POST_RECON_ALL_METADATA: Metadata = {
    id: "443d2c2f1f0c66f957a9df0b715dcdbe0c5294e5.boutiques",
    name: "post-recon-all",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface PostReconAllParameters {
    "@type": "freesurfer.post-recon-all";
    "subject": string;
    "subfields": boolean;
    "no_subfields": boolean;
    "subregions": boolean;
    "no_subregions": boolean;
    "cvs": boolean;
    "no_cvs": boolean;
    "qcache": boolean;
    "no_qcache": boolean;
    "no_sclimbic": boolean;
    "no_hthsu": boolean;
    "no_synthstrip": boolean;
    "no_synthseg": boolean;
    "no_qastats": boolean;
    "no_samseg": boolean;
    "no_xhemi": boolean;
    "no_cos7": boolean;
    "threads"?: number | null | undefined;
    "force": boolean;
    "exit_on_error": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.post-recon-all": post_recon_all_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `post_recon_all(...)`.
 *
 * @interface
 */
interface PostReconAllOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subject Subject identifier to be processed
 * @param subfields Run subfields extraction (default behavior)
 * @param no_subfields Do not run subfields extraction
 * @param subregions Run subregions extraction (default behavior)
 * @param no_subregions Do not run subregions extraction
 * @param cvs Run CVS processing
 * @param no_cvs Do not run CVS processing (default behavior)
 * @param qcache Run qcache processing (default behavior)
 * @param no_qcache Do not run qcache processing
 * @param no_sclimbic Do not run sclimbic processing
 * @param no_hthsu Do not run hypothalamic subunits processing
 * @param no_synthstrip Do not run synthstrip processing
 * @param no_synthseg Do not run synthseg processing
 * @param no_qastats Do not run qastats processing
 * @param no_samseg Do not run samseg processing
 * @param no_xhemi Do not run xhemi processing
 * @param no_cos7 Do not run commands from CentOS7 container
 * @param threads Number of threads to be used
 * @param force Force rerunning even if output is newer than input
 * @param exit_on_error Exit immediately if an error occurs
 *
 * @returns Parameter dictionary
 */
function post_recon_all_params(
    subject: string,
    subfields: boolean = false,
    no_subfields: boolean = false,
    subregions: boolean = false,
    no_subregions: boolean = false,
    cvs: boolean = false,
    no_cvs: boolean = false,
    qcache: boolean = false,
    no_qcache: boolean = false,
    no_sclimbic: boolean = false,
    no_hthsu: boolean = false,
    no_synthstrip: boolean = false,
    no_synthseg: boolean = false,
    no_qastats: boolean = false,
    no_samseg: boolean = false,
    no_xhemi: boolean = false,
    no_cos7: boolean = false,
    threads: number | null = null,
    force: boolean = false,
    exit_on_error: boolean = false,
): PostReconAllParameters {
    const params = {
        "@type": "freesurfer.post-recon-all" as const,
        "subject": subject,
        "subfields": subfields,
        "no_subfields": no_subfields,
        "subregions": subregions,
        "no_subregions": no_subregions,
        "cvs": cvs,
        "no_cvs": no_cvs,
        "qcache": qcache,
        "no_qcache": no_qcache,
        "no_sclimbic": no_sclimbic,
        "no_hthsu": no_hthsu,
        "no_synthstrip": no_synthstrip,
        "no_synthseg": no_synthseg,
        "no_qastats": no_qastats,
        "no_samseg": no_samseg,
        "no_xhemi": no_xhemi,
        "no_cos7": no_cos7,
        "force": force,
        "exit_on_error": exit_on_error,
    };
    if (threads !== null) {
        params["threads"] = threads;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function post_recon_all_cargs(
    params: PostReconAllParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("post-recon-all");
    cargs.push(
        "-all",
        (params["subject"] ?? null)
    );
    if ((params["subfields"] ?? null)) {
        cargs.push("--subfields");
    }
    if ((params["no_subfields"] ?? null)) {
        cargs.push("--no-subfields");
    }
    if ((params["subregions"] ?? null)) {
        cargs.push("--subregions");
    }
    if ((params["no_subregions"] ?? null)) {
        cargs.push("--no-subregions");
    }
    if ((params["cvs"] ?? null)) {
        cargs.push("--cvs");
    }
    if ((params["no_cvs"] ?? null)) {
        cargs.push("--no-cvs");
    }
    if ((params["qcache"] ?? null)) {
        cargs.push("--qcache");
    }
    if ((params["no_qcache"] ?? null)) {
        cargs.push("--no-qcache");
    }
    if ((params["no_sclimbic"] ?? null)) {
        cargs.push("--no-sclimbic");
    }
    if ((params["no_hthsu"] ?? null)) {
        cargs.push("--no-hthsu");
    }
    if ((params["no_synthstrip"] ?? null)) {
        cargs.push("--no-synthstrip");
    }
    if ((params["no_synthseg"] ?? null)) {
        cargs.push("--no-synthseg");
    }
    if ((params["no_qastats"] ?? null)) {
        cargs.push("--no-qastats");
    }
    if ((params["no_samseg"] ?? null)) {
        cargs.push("--no-samseg");
    }
    if ((params["no_xhemi"] ?? null)) {
        cargs.push("--no-xhemi");
    }
    if ((params["no_cos7"] ?? null)) {
        cargs.push("--no-cos7");
    }
    if ((params["threads"] ?? null) !== null) {
        cargs.push(
            "--threads",
            String((params["threads"] ?? null))
        );
    }
    if ((params["force"] ?? null)) {
        cargs.push("--force");
    }
    if ((params["exit_on_error"] ?? null)) {
        cargs.push("--exit-on-error");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function post_recon_all_outputs(
    params: PostReconAllParameters,
    execution: Execution,
): PostReconAllOutputs {
    const ret: PostReconAllOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * post-recon-all
 *
 * Post-processing script typically run after recon-all in FreeSurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `PostReconAllOutputs`).
 */
function post_recon_all_execute(
    params: PostReconAllParameters,
    runner: Runner | null = null,
): PostReconAllOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(POST_RECON_ALL_METADATA);
    params = execution.params(params)
    const cargs = post_recon_all_cargs(params, execution)
    const ret = post_recon_all_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * post-recon-all
 *
 * Post-processing script typically run after recon-all in FreeSurfer.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subject Subject identifier to be processed
 * @param subfields Run subfields extraction (default behavior)
 * @param no_subfields Do not run subfields extraction
 * @param subregions Run subregions extraction (default behavior)
 * @param no_subregions Do not run subregions extraction
 * @param cvs Run CVS processing
 * @param no_cvs Do not run CVS processing (default behavior)
 * @param qcache Run qcache processing (default behavior)
 * @param no_qcache Do not run qcache processing
 * @param no_sclimbic Do not run sclimbic processing
 * @param no_hthsu Do not run hypothalamic subunits processing
 * @param no_synthstrip Do not run synthstrip processing
 * @param no_synthseg Do not run synthseg processing
 * @param no_qastats Do not run qastats processing
 * @param no_samseg Do not run samseg processing
 * @param no_xhemi Do not run xhemi processing
 * @param no_cos7 Do not run commands from CentOS7 container
 * @param threads Number of threads to be used
 * @param force Force rerunning even if output is newer than input
 * @param exit_on_error Exit immediately if an error occurs
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `PostReconAllOutputs`).
 */
function post_recon_all(
    subject: string,
    subfields: boolean = false,
    no_subfields: boolean = false,
    subregions: boolean = false,
    no_subregions: boolean = false,
    cvs: boolean = false,
    no_cvs: boolean = false,
    qcache: boolean = false,
    no_qcache: boolean = false,
    no_sclimbic: boolean = false,
    no_hthsu: boolean = false,
    no_synthstrip: boolean = false,
    no_synthseg: boolean = false,
    no_qastats: boolean = false,
    no_samseg: boolean = false,
    no_xhemi: boolean = false,
    no_cos7: boolean = false,
    threads: number | null = null,
    force: boolean = false,
    exit_on_error: boolean = false,
    runner: Runner | null = null,
): PostReconAllOutputs {
    const params = post_recon_all_params(subject, subfields, no_subfields, subregions, no_subregions, cvs, no_cvs, qcache, no_qcache, no_sclimbic, no_hthsu, no_synthstrip, no_synthseg, no_qastats, no_samseg, no_xhemi, no_cos7, threads, force, exit_on_error)
    return post_recon_all_execute(params, runner);
}


export {
      POST_RECON_ALL_METADATA,
      PostReconAllOutputs,
      PostReconAllParameters,
      post_recon_all,
      post_recon_all_execute,
      post_recon_all_params,
};
