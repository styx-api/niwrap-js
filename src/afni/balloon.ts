// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const BALLOON_METADATA: Metadata = {
    id: "efa704edebd4da856d63213685c5a8439a31d101.boutiques",
    name: "balloon",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface BalloonParameters {
    "@type": "afni.balloon";
    "tr": number;
    "num_scans": number;
    "event_times": InputPathType;
    "t_rise"?: Array<number> | null | undefined;
    "t_fall"?: Array<number> | null | undefined;
    "t_sustain"?: Array<number> | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.balloon": balloon_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `balloon(...)`.
 *
 * @interface
 */
interface BalloonOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param tr Scan repetition time in seconds (TR), the interval at which the output curve will be sampled.
 * @param num_scans Number of scans (N), the output curve will comprise this number of samples.
 * @param event_times The name of a file containing the event timings, in seconds, as ASCII strings separated by white space, with time 0 being the time at which the initial scan occurred.
 * @param t_rise Haemodynamic rise time in seconds (typically between 4s and 6s).
 * @param t_fall Haemodynamic fall time in seconds (typically between 4s and 6s).
 * @param t_sustain Haemodynamic sustain time in seconds (typically between 0s and 4s).
 *
 * @returns Parameter dictionary
 */
function balloon_params(
    tr: number,
    num_scans: number,
    event_times: InputPathType,
    t_rise: Array<number> | null = null,
    t_fall: Array<number> | null = null,
    t_sustain: Array<number> | null = null,
): BalloonParameters {
    const params = {
        "@type": "afni.balloon" as const,
        "tr": tr,
        "num_scans": num_scans,
        "event_times": event_times,
    };
    if (t_rise !== null) {
        params["t_rise"] = t_rise;
    }
    if (t_fall !== null) {
        params["t_fall"] = t_fall;
    }
    if (t_sustain !== null) {
        params["t_sustain"] = t_sustain;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function balloon_cargs(
    params: BalloonParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("balloon");
    cargs.push(String((params["tr"] ?? null)));
    cargs.push(String((params["num_scans"] ?? null)));
    cargs.push(execution.inputFile((params["event_times"] ?? null)));
    if ((params["t_rise"] ?? null) !== null) {
        cargs.push(...(params["t_rise"] ?? null).map(String));
    }
    if ((params["t_fall"] ?? null) !== null) {
        cargs.push(...(params["t_fall"] ?? null).map(String));
    }
    if ((params["t_sustain"] ?? null) !== null) {
        cargs.push(...(params["t_sustain"] ?? null).map(String));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function balloon_outputs(
    params: BalloonParameters,
    execution: Execution,
): BalloonOutputs {
    const ret: BalloonOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Simulation of haemodynamic response using the balloon model. Based on the theoretical model proposed by Buxton et al. (1998).
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `BalloonOutputs`).
 */
function balloon_execute(
    params: BalloonParameters,
    execution: Execution,
): BalloonOutputs {
    params = execution.params(params)
    const cargs = balloon_cargs(params, execution)
    const ret = balloon_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Simulation of haemodynamic response using the balloon model. Based on the theoretical model proposed by Buxton et al. (1998).
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param tr Scan repetition time in seconds (TR), the interval at which the output curve will be sampled.
 * @param num_scans Number of scans (N), the output curve will comprise this number of samples.
 * @param event_times The name of a file containing the event timings, in seconds, as ASCII strings separated by white space, with time 0 being the time at which the initial scan occurred.
 * @param t_rise Haemodynamic rise time in seconds (typically between 4s and 6s).
 * @param t_fall Haemodynamic fall time in seconds (typically between 4s and 6s).
 * @param t_sustain Haemodynamic sustain time in seconds (typically between 0s and 4s).
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `BalloonOutputs`).
 */
function balloon(
    tr: number,
    num_scans: number,
    event_times: InputPathType,
    t_rise: Array<number> | null = null,
    t_fall: Array<number> | null = null,
    t_sustain: Array<number> | null = null,
    runner: Runner | null = null,
): BalloonOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(BALLOON_METADATA);
    const params = balloon_params(tr, num_scans, event_times, t_rise, t_fall, t_sustain)
    return balloon_execute(params, execution);
}


export {
      BALLOON_METADATA,
      BalloonOutputs,
      BalloonParameters,
      balloon,
      balloon_cargs,
      balloon_execute,
      balloon_outputs,
      balloon_params,
};
