// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const N3_BIAS_FIELD_CORRECTION_METADATA: Metadata = {
    id: "12e6ca015aa736902ad4369af67b842768a91549.boutiques",
    name: "N3BiasFieldCorrection",
    package: "ants",
    container_image_tag: "antsx/ants:v2.5.3",
};


interface N3BiasFieldCorrectionParameters {
    "__STYXTYPE__": "N3BiasFieldCorrection";
    "image_dimensionality"?: 2 | 3 | 4 | null | undefined;
    "input_image": InputPathType;
    "mask_image"?: InputPathType | null | undefined;
    "rescale_intensities"?: 0 | 1 | null | undefined;
    "weight_image"?: InputPathType | null | undefined;
    "shrink_factor"?: number | null | undefined;
    "convergence"?: string | null | undefined;
    "bspline_fitting"?: string | null | undefined;
    "histogram_sharpening"?: string | null | undefined;
    "output": string;
    "verbose"?: 0 | 1 | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "N3BiasFieldCorrection": n3_bias_field_correction_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "N3BiasFieldCorrection": n3_bias_field_correction_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `n3_bias_field_correction(...)`.
 *
 * @interface
 */
interface N3BiasFieldCorrectionOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The bias-corrected version of the input image.
     */
    corrected_image: OutputPathType;
    /**
     * The estimated bias field, if specified in the output.
     */
    bias_field: OutputPathType;
}


function n3_bias_field_correction_params(
    input_image: InputPathType,
    output: string,
    image_dimensionality: 2 | 3 | 4 | null = null,
    mask_image: InputPathType | null = null,
    rescale_intensities: 0 | 1 | null = null,
    weight_image: InputPathType | null = null,
    shrink_factor: number | null = null,
    convergence: string | null = null,
    bspline_fitting: string | null = null,
    histogram_sharpening: string | null = null,
    verbose: 0 | 1 | null = null,
): N3BiasFieldCorrectionParameters {
    /**
     * Build parameters.
    
     * @param input_image A scalar image is expected as input for bias correction. Since N3 log transforms the intensities, negative values or values close to zero should be processed prior to correction.
     * @param output The bias-corrected version of the input image and optionally the estimated bias field.
     * @param image_dimensionality This option forces the image to be treated as a specified-dimensional image. If not specified, N3 tries to infer the dimensionality from the input image.
     * @param mask_image If a mask image is specified, the final bias correction is only performed in the mask region. If a mask image is not specified, the entire image region will be used as the mask region. Note: this differs from the original N3 implementation.
     * @param rescale_intensities This option rescales the intensity range within the user-specified mask to the original [min, max] range.
     * @param weight_image The weight image allows the user to perform a relative weighting of specific voxels during the B-spline fitting.
     * @param shrink_factor Shrink factor to resample the input image. Commonly used values are <= 4.
     * @param convergence Describes the convergence criteria with default value as [50,0.0].
     * @param bspline_fitting Describes the parameters for B-Spline fitting. Defaults are [splineDistance,4,3].
     * @param histogram_sharpening Describes histogram sharpening parameters; defaults are [0.15,0.01,200].
     * @param verbose Verbose output.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "N3BiasFieldCorrection" as const,
        "input_image": input_image,
        "output": output,
    };
    if (image_dimensionality !== null) {
        params["image_dimensionality"] = image_dimensionality;
    }
    if (mask_image !== null) {
        params["mask_image"] = mask_image;
    }
    if (rescale_intensities !== null) {
        params["rescale_intensities"] = rescale_intensities;
    }
    if (weight_image !== null) {
        params["weight_image"] = weight_image;
    }
    if (shrink_factor !== null) {
        params["shrink_factor"] = shrink_factor;
    }
    if (convergence !== null) {
        params["convergence"] = convergence;
    }
    if (bspline_fitting !== null) {
        params["bspline_fitting"] = bspline_fitting;
    }
    if (histogram_sharpening !== null) {
        params["histogram_sharpening"] = histogram_sharpening;
    }
    if (verbose !== null) {
        params["verbose"] = verbose;
    }
    return params;
}


function n3_bias_field_correction_cargs(
    params: N3BiasFieldCorrectionParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("N3BiasFieldCorrection");
    if ((params["image_dimensionality"] ?? null) !== null) {
        cargs.push(
            "--image-dimensionality",
            String((params["image_dimensionality"] ?? null))
        );
    }
    cargs.push(
        "--input-image",
        execution.inputFile((params["input_image"] ?? null))
    );
    if ((params["mask_image"] ?? null) !== null) {
        cargs.push(
            "--mask-image",
            execution.inputFile((params["mask_image"] ?? null))
        );
    }
    if ((params["rescale_intensities"] ?? null) !== null) {
        cargs.push(
            "--rescale-intensities",
            String((params["rescale_intensities"] ?? null))
        );
    }
    if ((params["weight_image"] ?? null) !== null) {
        cargs.push(
            "--weight-image",
            execution.inputFile((params["weight_image"] ?? null))
        );
    }
    if ((params["shrink_factor"] ?? null) !== null) {
        cargs.push(
            "--shrink-factor",
            String((params["shrink_factor"] ?? null))
        );
    }
    if ((params["convergence"] ?? null) !== null) {
        cargs.push(
            "--convergence",
            (params["convergence"] ?? null)
        );
    }
    if ((params["bspline_fitting"] ?? null) !== null) {
        cargs.push(
            "--bspline-fitting",
            (params["bspline_fitting"] ?? null)
        );
    }
    if ((params["histogram_sharpening"] ?? null) !== null) {
        cargs.push(
            "--histogram-sharpening",
            (params["histogram_sharpening"] ?? null)
        );
    }
    cargs.push(
        "--output",
        (params["output"] ?? null)
    );
    if ((params["verbose"] ?? null) !== null) {
        cargs.push(
            "--verbose",
            String((params["verbose"] ?? null))
        );
    }
    return cargs;
}


function n3_bias_field_correction_outputs(
    params: N3BiasFieldCorrectionParameters,
    execution: Execution,
): N3BiasFieldCorrectionOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: N3BiasFieldCorrectionOutputs = {
        root: execution.outputFile("."),
        corrected_image: execution.outputFile([(params["output"] ?? null)].join('')),
        bias_field: execution.outputFile(["[BIS_FIELD]"].join('')),
    };
    return ret;
}


function n3_bias_field_correction_execute(
    params: N3BiasFieldCorrectionParameters,
    execution: Execution,
): N3BiasFieldCorrectionOutputs {
    /**
     * This N3 is a variant of the popular N3 (nonparametric nonuniform normalization) retrospective bias correction algorithm. Based on the assumption that the corruption of the low frequency bias field can be modeled as a convolution of the intensity histogram by a Gaussian, the basic algorithmic protocol is to iterate between deconvolving the intensity histogram by a Gaussian, remapping the intensities, and then spatially smoothing this result by a B-spline modeling of the bias field itself.
     * 
     * Author: ANTs Developers
     * 
     * URL: https://github.com/ANTsX/ANTs
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `N3BiasFieldCorrectionOutputs`).
     */
    params = execution.params(params)
    const cargs = n3_bias_field_correction_cargs(params, execution)
    const ret = n3_bias_field_correction_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function n3_bias_field_correction(
    input_image: InputPathType,
    output: string,
    image_dimensionality: 2 | 3 | 4 | null = null,
    mask_image: InputPathType | null = null,
    rescale_intensities: 0 | 1 | null = null,
    weight_image: InputPathType | null = null,
    shrink_factor: number | null = null,
    convergence: string | null = null,
    bspline_fitting: string | null = null,
    histogram_sharpening: string | null = null,
    verbose: 0 | 1 | null = null,
    runner: Runner | null = null,
): N3BiasFieldCorrectionOutputs {
    /**
     * This N3 is a variant of the popular N3 (nonparametric nonuniform normalization) retrospective bias correction algorithm. Based on the assumption that the corruption of the low frequency bias field can be modeled as a convolution of the intensity histogram by a Gaussian, the basic algorithmic protocol is to iterate between deconvolving the intensity histogram by a Gaussian, remapping the intensities, and then spatially smoothing this result by a B-spline modeling of the bias field itself.
     * 
     * Author: ANTs Developers
     * 
     * URL: https://github.com/ANTsX/ANTs
    
     * @param input_image A scalar image is expected as input for bias correction. Since N3 log transforms the intensities, negative values or values close to zero should be processed prior to correction.
     * @param output The bias-corrected version of the input image and optionally the estimated bias field.
     * @param image_dimensionality This option forces the image to be treated as a specified-dimensional image. If not specified, N3 tries to infer the dimensionality from the input image.
     * @param mask_image If a mask image is specified, the final bias correction is only performed in the mask region. If a mask image is not specified, the entire image region will be used as the mask region. Note: this differs from the original N3 implementation.
     * @param rescale_intensities This option rescales the intensity range within the user-specified mask to the original [min, max] range.
     * @param weight_image The weight image allows the user to perform a relative weighting of specific voxels during the B-spline fitting.
     * @param shrink_factor Shrink factor to resample the input image. Commonly used values are <= 4.
     * @param convergence Describes the convergence criteria with default value as [50,0.0].
     * @param bspline_fitting Describes the parameters for B-Spline fitting. Defaults are [splineDistance,4,3].
     * @param histogram_sharpening Describes histogram sharpening parameters; defaults are [0.15,0.01,200].
     * @param verbose Verbose output.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `N3BiasFieldCorrectionOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(N3_BIAS_FIELD_CORRECTION_METADATA);
    const params = n3_bias_field_correction_params(input_image, output, image_dimensionality, mask_image, rescale_intensities, weight_image, shrink_factor, convergence, bspline_fitting, histogram_sharpening, verbose)
    return n3_bias_field_correction_execute(params, execution);
}


export {
      N3BiasFieldCorrectionOutputs,
      N3BiasFieldCorrectionParameters,
      N3_BIAS_FIELD_CORRECTION_METADATA,
      n3_bias_field_correction,
      n3_bias_field_correction_params,
};
