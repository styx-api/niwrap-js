// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FAT_PROC_SELECT_VOLS_METADATA: Metadata = {
    id: "145158b3e48ed45b0d9dd404e9867ee757291b14.boutiques",
    name: "fat_proc_select_vols",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface FatProcSelectVolsParameters {
    "__STYXTYPE__": "fat_proc_select_vols";
    "dwi_input": InputPathType;
    "img_input": InputPathType;
    "prefix": string;
    "in_bads"?: InputPathType | null | undefined;
    "apply_to_vols": boolean;
    "do_movie"?: string | null | undefined;
    "workdir"?: string | null | undefined;
    "no_cmd_out": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "fat_proc_select_vols": fat_proc_select_vols_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "fat_proc_select_vols": fat_proc_select_vols_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `fat_proc_select_vols(...)`.
 *
 * @interface
 */
interface FatProcSelectVolsOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Text file with AFNI-usable selector string
     */
    output_selector_string: OutputPathType;
}


function fat_proc_select_vols_params(
    dwi_input: InputPathType,
    img_input: InputPathType,
    prefix: string,
    in_bads: InputPathType | null = null,
    apply_to_vols: boolean = false,
    do_movie: string | null = null,
    workdir: string | null = null,
    no_cmd_out: boolean = false,
): FatProcSelectVolsParameters {
    /**
     * Build parameters.
    
     * @param dwi_input Input DWI dataset
     * @param img_input 2D image of the DWI dataset
     * @param prefix Output prefix for files
     * @param in_bads A single column file of integers representing bad volumes indices (optional)
     * @param apply_to_vols Apply the created selection of good volumes to the DWI dataset
     * @param do_movie Output a movie of the newly created dataset. Only 'AGIF' or 'MPEG' arguments can be used.
     * @param workdir Specify a working directory
     * @param no_cmd_out Don't save the command line call of this program and the location where it was run
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "fat_proc_select_vols" as const,
        "dwi_input": dwi_input,
        "img_input": img_input,
        "prefix": prefix,
        "apply_to_vols": apply_to_vols,
        "no_cmd_out": no_cmd_out,
    };
    if (in_bads !== null) {
        params["in_bads"] = in_bads;
    }
    if (do_movie !== null) {
        params["do_movie"] = do_movie;
    }
    if (workdir !== null) {
        params["workdir"] = workdir;
    }
    return params;
}


function fat_proc_select_vols_cargs(
    params: FatProcSelectVolsParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("fat_proc_select_vols");
    cargs.push(
        "-in_dwi",
        execution.inputFile((params["dwi_input"] ?? null))
    );
    cargs.push(
        "-in_img",
        execution.inputFile((params["img_input"] ?? null))
    );
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    if ((params["in_bads"] ?? null) !== null) {
        cargs.push(
            "-in_bads",
            execution.inputFile((params["in_bads"] ?? null))
        );
    }
    if ((params["apply_to_vols"] ?? null)) {
        cargs.push("-apply_to_vols");
    }
    if ((params["do_movie"] ?? null) !== null) {
        cargs.push(
            "-do_movie",
            (params["do_movie"] ?? null)
        );
    }
    if ((params["workdir"] ?? null) !== null) {
        cargs.push(
            "-workdir",
            (params["workdir"] ?? null)
        );
    }
    if ((params["no_cmd_out"] ?? null)) {
        cargs.push("-no_cmd_out");
    }
    return cargs;
}


function fat_proc_select_vols_outputs(
    params: FatProcSelectVolsParameters,
    execution: Execution,
): FatProcSelectVolsOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: FatProcSelectVolsOutputs = {
        root: execution.outputFile("."),
        output_selector_string: execution.outputFile([(params["prefix"] ?? null), "_bads.txt"].join('')),
    };
    return ret;
}


function fat_proc_select_vols_execute(
    params: FatProcSelectVolsParameters,
    execution: Execution,
): FatProcSelectVolsOutputs {
    /**
     * Tool for building a selector string for AFNI subbricks and/or 1D text files.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `FatProcSelectVolsOutputs`).
     */
    params = execution.params(params)
    const cargs = fat_proc_select_vols_cargs(params, execution)
    const ret = fat_proc_select_vols_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function fat_proc_select_vols(
    dwi_input: InputPathType,
    img_input: InputPathType,
    prefix: string,
    in_bads: InputPathType | null = null,
    apply_to_vols: boolean = false,
    do_movie: string | null = null,
    workdir: string | null = null,
    no_cmd_out: boolean = false,
    runner: Runner | null = null,
): FatProcSelectVolsOutputs {
    /**
     * Tool for building a selector string for AFNI subbricks and/or 1D text files.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param dwi_input Input DWI dataset
     * @param img_input 2D image of the DWI dataset
     * @param prefix Output prefix for files
     * @param in_bads A single column file of integers representing bad volumes indices (optional)
     * @param apply_to_vols Apply the created selection of good volumes to the DWI dataset
     * @param do_movie Output a movie of the newly created dataset. Only 'AGIF' or 'MPEG' arguments can be used.
     * @param workdir Specify a working directory
     * @param no_cmd_out Don't save the command line call of this program and the location where it was run
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `FatProcSelectVolsOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FAT_PROC_SELECT_VOLS_METADATA);
    const params = fat_proc_select_vols_params(dwi_input, img_input, prefix, in_bads, apply_to_vols, do_movie, workdir, no_cmd_out)
    return fat_proc_select_vols_execute(params, execution);
}


export {
      FAT_PROC_SELECT_VOLS_METADATA,
      FatProcSelectVolsOutputs,
      FatProcSelectVolsParameters,
      fat_proc_select_vols,
      fat_proc_select_vols_params,
};
