// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__GET_AFNI_PREFIX_METADATA: Metadata = {
    id: "ae0f36ac76fa0ee57fb99900eaf3197e4b29bbf6.boutiques",
    name: "@GetAfniPrefix",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VGetAfniPrefixParameters {
    "@type": "afni.@GetAfniPrefix";
    "name": InputPathType;
    "suffix"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.@GetAfniPrefix": v__get_afni_prefix_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__get_afni_prefix(...)`.
 *
 * @interface
 */
interface VGetAfniPrefixOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param name Input file path for which the AFNI prefix will be extracted
 * @param suffix Suffix string to append to the returned prefix
 *
 * @returns Parameter dictionary
 */
function v__get_afni_prefix_params(
    name: InputPathType,
    suffix: string | null = null,
): VGetAfniPrefixParameters {
    const params = {
        "@type": "afni.@GetAfniPrefix" as const,
        "name": name,
    };
    if (suffix !== null) {
        params["suffix"] = suffix;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v__get_afni_prefix_cargs(
    params: VGetAfniPrefixParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("@GetAfniPrefix");
    cargs.push(execution.inputFile((params["name"] ?? null)));
    if ((params["suffix"] ?? null) !== null) {
        cargs.push((params["suffix"] ?? null));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v__get_afni_prefix_outputs(
    params: VGetAfniPrefixParameters,
    execution: Execution,
): VGetAfniPrefixOutputs {
    const ret: VGetAfniPrefixOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * A tool to extract AFNI prefix from a given file path.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `VGetAfniPrefixOutputs`).
 */
function v__get_afni_prefix_execute(
    params: VGetAfniPrefixParameters,
    execution: Execution,
): VGetAfniPrefixOutputs {
    params = execution.params(params)
    const cargs = v__get_afni_prefix_cargs(params, execution)
    const ret = v__get_afni_prefix_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * A tool to extract AFNI prefix from a given file path.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param name Input file path for which the AFNI prefix will be extracted
 * @param suffix Suffix string to append to the returned prefix
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VGetAfniPrefixOutputs`).
 */
function v__get_afni_prefix(
    name: InputPathType,
    suffix: string | null = null,
    runner: Runner | null = null,
): VGetAfniPrefixOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__GET_AFNI_PREFIX_METADATA);
    const params = v__get_afni_prefix_params(name, suffix)
    return v__get_afni_prefix_execute(params, execution);
}


export {
      VGetAfniPrefixOutputs,
      VGetAfniPrefixParameters,
      V__GET_AFNI_PREFIX_METADATA,
      v__get_afni_prefix,
      v__get_afni_prefix_cargs,
      v__get_afni_prefix_execute,
      v__get_afni_prefix_outputs,
      v__get_afni_prefix_params,
};
