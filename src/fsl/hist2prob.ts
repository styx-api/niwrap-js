// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const HIST2PROB_METADATA: Metadata = {
    id: "9a0694f1331e41c1803a820e366b78bb807361a8.boutiques",
    name: "hist2prob",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface Hist2probParameters {
    "@type": "fsl.hist2prob";
    "image": InputPathType;
    "size": number;
    "low_threshold": number;
    "high_threshold": number;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.hist2prob": hist2prob_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.hist2prob": hist2prob_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `hist2prob(...)`.
 *
 * @interface
 */
interface Hist2probOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output probability map converted from histogram
     */
    output_probability_map: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param image Input histogram image
 * @param size Size of the histogram
 * @param low_threshold Lower threshold for probability conversion
 * @param high_threshold Higher threshold for probability conversion
 *
 * @returns Parameter dictionary
 */
function hist2prob_params(
    image: InputPathType,
    size: number,
    low_threshold: number,
    high_threshold: number,
): Hist2probParameters {
    const params = {
        "@type": "fsl.hist2prob" as const,
        "image": image,
        "size": size,
        "low_threshold": low_threshold,
        "high_threshold": high_threshold,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function hist2prob_cargs(
    params: Hist2probParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("hist2prob");
    cargs.push(execution.inputFile((params["image"] ?? null)));
    cargs.push(String((params["size"] ?? null)));
    cargs.push(String((params["low_threshold"] ?? null)));
    cargs.push(String((params["high_threshold"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function hist2prob_outputs(
    params: Hist2probParameters,
    execution: Execution,
): Hist2probOutputs {
    const ret: Hist2probOutputs = {
        root: execution.outputFile("."),
        output_probability_map: execution.outputFile([path.basename((params["image"] ?? null)), "_probability_map.nii.gz"].join('')),
    };
    return ret;
}


/**
 * hist2prob
 *
 * Converts a histogram image to a probability map based on specified thresholds.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Hist2probOutputs`).
 */
function hist2prob_execute(
    params: Hist2probParameters,
    runner: Runner | null = null,
): Hist2probOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(HIST2PROB_METADATA);
    params = execution.params(params)
    const cargs = hist2prob_cargs(params, execution)
    const ret = hist2prob_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * hist2prob
 *
 * Converts a histogram image to a probability map based on specified thresholds.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param image Input histogram image
 * @param size Size of the histogram
 * @param low_threshold Lower threshold for probability conversion
 * @param high_threshold Higher threshold for probability conversion
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `Hist2probOutputs`).
 */
function hist2prob(
    image: InputPathType,
    size: number,
    low_threshold: number,
    high_threshold: number,
    runner: Runner | null = null,
): Hist2probOutputs {
    const params = hist2prob_params(image, size, low_threshold, high_threshold)
    return hist2prob_execute(params, runner);
}


export {
      HIST2PROB_METADATA,
      Hist2probOutputs,
      Hist2probParameters,
      hist2prob,
      hist2prob_execute,
      hist2prob_params,
};
