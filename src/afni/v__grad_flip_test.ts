// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__GRAD_FLIP_TEST_METADATA: Metadata = {
    id: "f4c7bc4f70165e7a5d15e00cfa90501d609d65ee.boutiques",
    name: "@GradFlipTest",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VGradFlipTestParameters {
    "__STYXTYPE__": "@GradFlipTest";
    "dwi": InputPathType;
    "grad_row_vec"?: InputPathType | null | undefined;
    "grad_col_vec"?: InputPathType | null | undefined;
    "grad_col_matA"?: InputPathType | null | undefined;
    "grad_col_matT"?: InputPathType | null | undefined;
    "mask"?: InputPathType | null | undefined;
    "bvals"?: InputPathType | null | undefined;
    "thresh_fa"?: number | null | undefined;
    "thresh_len"?: number | null | undefined;
    "prefix"?: string | null | undefined;
    "check_abs_min"?: number | null | undefined;
    "scale_out_1000": boolean;
    "wdir"?: string | null | undefined;
    "do_clean": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "@GradFlipTest": v__grad_flip_test_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "@GradFlipTest": v__grad_flip_test_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__grad_flip_test(...)`.
 *
 * @interface
 */
interface VGradFlipTestOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Text file that stores recommended flip option
     */
    output_file: OutputPathType | null;
    /**
     * Temporary working directory to store intermediate files
     */
    temp_directory: OutputPathType;
}


function v__grad_flip_test_params(
    dwi: InputPathType,
    grad_row_vec: InputPathType | null = null,
    grad_col_vec: InputPathType | null = null,
    grad_col_mat_a: InputPathType | null = null,
    grad_col_mat_t: InputPathType | null = null,
    mask: InputPathType | null = null,
    bvals: InputPathType | null = null,
    thresh_fa: number | null = null,
    thresh_len: number | null = null,
    prefix: string | null = null,
    check_abs_min: number | null = null,
    scale_out_1000: boolean = false,
    wdir: string | null = null,
    do_clean: boolean = false,
): VGradFlipTestParameters {
    /**
     * Build parameters.
    
     * @param dwi Set of DWIs (N total volumes)
     * @param grad_row_vec Set of row-wise gradient vectors
     * @param grad_col_vec Set of column-wise gradient vectors
     * @param grad_col_mat_a Set of column-wise g- or b-matrix elements ("AFNI"-style format, "diagonal-first")
     * @param grad_col_mat_t Set of column-wise g- or b-matrix elements ("TORTOISE"-style format, "row-first")
     * @param mask Optional mask (probably whole brain); otherwise, automasking is performed
     * @param bvals Can input bvals, if necessary (but shouldn't be necessary?)
     * @param thresh_fa Set minimum FA value for tracking (default X=0.2)
     * @param thresh_len Set minimum tract length to keep a tract when propagating (default L=30mm)
     * @param prefix Output name of text file that stores recommended flip option
     * @param check_abs_min Handle tiny negative values in gradient vectors
     * @param scale_out_1000 Scale output to 1000, as in 3dDWItoDT (probably not necessary)
     * @param wdir Rename working directory output; useful if running multiple iterations
     * @param do_clean Remove temporary directory
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "@GradFlipTest" as const,
        "dwi": dwi,
        "scale_out_1000": scale_out_1000,
        "do_clean": do_clean,
    };
    if (grad_row_vec !== null) {
        params["grad_row_vec"] = grad_row_vec;
    }
    if (grad_col_vec !== null) {
        params["grad_col_vec"] = grad_col_vec;
    }
    if (grad_col_mat_a !== null) {
        params["grad_col_matA"] = grad_col_mat_a;
    }
    if (grad_col_mat_t !== null) {
        params["grad_col_matT"] = grad_col_mat_t;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (bvals !== null) {
        params["bvals"] = bvals;
    }
    if (thresh_fa !== null) {
        params["thresh_fa"] = thresh_fa;
    }
    if (thresh_len !== null) {
        params["thresh_len"] = thresh_len;
    }
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (check_abs_min !== null) {
        params["check_abs_min"] = check_abs_min;
    }
    if (wdir !== null) {
        params["wdir"] = wdir;
    }
    return params;
}


function v__grad_flip_test_cargs(
    params: VGradFlipTestParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("@GradFlipTest");
    cargs.push(
        "-in_dwi",
        execution.inputFile((params["dwi"] ?? null))
    );
    if ((params["grad_row_vec"] ?? null) !== null) {
        cargs.push(
            "-in_row_vec",
            execution.inputFile((params["grad_row_vec"] ?? null))
        );
    }
    if ((params["grad_col_vec"] ?? null) !== null) {
        cargs.push(
            "-in_col_vec",
            execution.inputFile((params["grad_col_vec"] ?? null))
        );
    }
    if ((params["grad_col_matA"] ?? null) !== null) {
        cargs.push(
            "-in_col_matA",
            execution.inputFile((params["grad_col_matA"] ?? null))
        );
    }
    if ((params["grad_col_matT"] ?? null) !== null) {
        cargs.push(
            "-in_col_matT",
            execution.inputFile((params["grad_col_matT"] ?? null))
        );
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["bvals"] ?? null) !== null) {
        cargs.push(
            "-in_bvals",
            execution.inputFile((params["bvals"] ?? null))
        );
    }
    if ((params["thresh_fa"] ?? null) !== null) {
        cargs.push(
            "-alg_Thresh_FA",
            String((params["thresh_fa"] ?? null))
        );
    }
    if ((params["thresh_len"] ?? null) !== null) {
        cargs.push(
            "-alg_Thresh_Len",
            String((params["thresh_len"] ?? null))
        );
    }
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["check_abs_min"] ?? null) !== null) {
        cargs.push(
            "-check_abs_min",
            String((params["check_abs_min"] ?? null))
        );
    }
    if ((params["scale_out_1000"] ?? null)) {
        cargs.push("-scale_out_1000");
    }
    if ((params["wdir"] ?? null) !== null) {
        cargs.push(
            "-wdir",
            (params["wdir"] ?? null)
        );
    }
    if ((params["do_clean"] ?? null)) {
        cargs.push("-do_clean");
    }
    return cargs;
}


function v__grad_flip_test_outputs(
    params: VGradFlipTestParameters,
    execution: Execution,
): VGradFlipTestOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: VGradFlipTestOutputs = {
        root: execution.outputFile("."),
        output_file: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), ".txt"].join('')) : null,
        temp_directory: execution.outputFile(["_tmp_TESTFLIP"].join('')),
    };
    return ret;
}


function v__grad_flip_test_execute(
    params: VGradFlipTestParameters,
    execution: Execution,
): VGradFlipTestOutputs {
    /**
     * Script to test the correct flip for a data set when using 1dDW_Grad_o_Mat++.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `VGradFlipTestOutputs`).
     */
    params = execution.params(params)
    const cargs = v__grad_flip_test_cargs(params, execution)
    const ret = v__grad_flip_test_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v__grad_flip_test(
    dwi: InputPathType,
    grad_row_vec: InputPathType | null = null,
    grad_col_vec: InputPathType | null = null,
    grad_col_mat_a: InputPathType | null = null,
    grad_col_mat_t: InputPathType | null = null,
    mask: InputPathType | null = null,
    bvals: InputPathType | null = null,
    thresh_fa: number | null = null,
    thresh_len: number | null = null,
    prefix: string | null = null,
    check_abs_min: number | null = null,
    scale_out_1000: boolean = false,
    wdir: string | null = null,
    do_clean: boolean = false,
    runner: Runner | null = null,
): VGradFlipTestOutputs {
    /**
     * Script to test the correct flip for a data set when using 1dDW_Grad_o_Mat++.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param dwi Set of DWIs (N total volumes)
     * @param grad_row_vec Set of row-wise gradient vectors
     * @param grad_col_vec Set of column-wise gradient vectors
     * @param grad_col_mat_a Set of column-wise g- or b-matrix elements ("AFNI"-style format, "diagonal-first")
     * @param grad_col_mat_t Set of column-wise g- or b-matrix elements ("TORTOISE"-style format, "row-first")
     * @param mask Optional mask (probably whole brain); otherwise, automasking is performed
     * @param bvals Can input bvals, if necessary (but shouldn't be necessary?)
     * @param thresh_fa Set minimum FA value for tracking (default X=0.2)
     * @param thresh_len Set minimum tract length to keep a tract when propagating (default L=30mm)
     * @param prefix Output name of text file that stores recommended flip option
     * @param check_abs_min Handle tiny negative values in gradient vectors
     * @param scale_out_1000 Scale output to 1000, as in 3dDWItoDT (probably not necessary)
     * @param wdir Rename working directory output; useful if running multiple iterations
     * @param do_clean Remove temporary directory
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `VGradFlipTestOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__GRAD_FLIP_TEST_METADATA);
    const params = v__grad_flip_test_params(dwi, grad_row_vec, grad_col_vec, grad_col_mat_a, grad_col_mat_t, mask, bvals, thresh_fa, thresh_len, prefix, check_abs_min, scale_out_1000, wdir, do_clean)
    return v__grad_flip_test_execute(params, execution);
}


export {
      VGradFlipTestOutputs,
      VGradFlipTestParameters,
      V__GRAD_FLIP_TEST_METADATA,
      v__grad_flip_test,
      v__grad_flip_test_params,
};
