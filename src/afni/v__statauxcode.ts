// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__STATAUXCODE_METADATA: Metadata = {
    id: "ef385d8519f887dde3897dff25a19db608549dca.boutiques",
    name: "@statauxcode",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VStatauxcodeParameters {
    "__STYXTYPE__": "@statauxcode";
    "code": string;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "@statauxcode": v__statauxcode_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "@statauxcode": v__statauxcode_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__statauxcode(...)`.
 *
 * @interface
 */
interface VStatauxcodeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file containing the result of the conversion
     */
    output: OutputPathType;
}


function v__statauxcode_params(
    code: string,
): VStatauxcodeParameters {
    /**
     * Build parameters.
    
     * @param code The statistical code or its numerical equivalent to be converted.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "@statauxcode" as const,
        "code": code,
    };
    return params;
}


function v__statauxcode_cargs(
    params: VStatauxcodeParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("@statauxcode");
    cargs.push((params["code"] ?? null));
    return cargs;
}


function v__statauxcode_outputs(
    params: VStatauxcodeParameters,
    execution: Execution,
): VStatauxcodeOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: VStatauxcodeOutputs = {
        root: execution.outputFile("."),
        output: execution.outputFile(["output.txt"].join('')),
    };
    return ret;
}


function v__statauxcode_execute(
    params: VStatauxcodeParameters,
    execution: Execution,
): VStatauxcodeOutputs {
    /**
     * Returns the name or number of a statistics code based on specified mappings.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `VStatauxcodeOutputs`).
     */
    params = execution.params(params)
    const cargs = v__statauxcode_cargs(params, execution)
    const ret = v__statauxcode_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v__statauxcode(
    code: string,
    runner: Runner | null = null,
): VStatauxcodeOutputs {
    /**
     * Returns the name or number of a statistics code based on specified mappings.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param code The statistical code or its numerical equivalent to be converted.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `VStatauxcodeOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__STATAUXCODE_METADATA);
    const params = v__statauxcode_params(code)
    return v__statauxcode_execute(params, execution);
}


export {
      VStatauxcodeOutputs,
      VStatauxcodeParameters,
      V__STATAUXCODE_METADATA,
      v__statauxcode,
      v__statauxcode_params,
};
