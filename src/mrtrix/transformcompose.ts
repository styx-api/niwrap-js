// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const TRANSFORMCOMPOSE_METADATA: Metadata = {
    id: "6d7295675afed0c75d67eae13a94d73c7b970c74.boutiques",
    name: "transformcompose",
    package: "mrtrix",
    container_image_tag: "mrtrix3/mrtrix3:3.0.4",
};


interface TransformcomposeConfigParameters {
    "@type": "mrtrix.transformcompose.config";
    "key": string;
    "value": string;
}


interface TransformcomposeVariousStringParameters {
    "@type": "mrtrix.transformcompose.VariousString";
    "obj": string;
}


interface TransformcomposeVariousFileParameters {
    "@type": "mrtrix.transformcompose.VariousFile";
    "obj": InputPathType;
}


interface TransformcomposeParameters {
    "@type": "mrtrix.transformcompose";
    "template"?: InputPathType | null | undefined;
    "info": boolean;
    "quiet": boolean;
    "debug": boolean;
    "force": boolean;
    "nthreads"?: number | null | undefined;
    "config"?: Array<TransformcomposeConfigParameters> | null | undefined;
    "help": boolean;
    "version": boolean;
    "input": Array<InputPathType>;
    "output": TransformcomposeVariousStringParameters | TransformcomposeVariousFileParameters;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "mrtrix.transformcompose": transformcompose_cargs,
        "mrtrix.transformcompose.config": transformcompose_config_cargs,
        "mrtrix.transformcompose.VariousString": transformcompose_various_string_cargs,
        "mrtrix.transformcompose.VariousFile": transformcompose_various_file_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param key temporarily set the value of an MRtrix config file entry.
 * @param value temporarily set the value of an MRtrix config file entry.
 *
 * @returns Parameter dictionary
 */
function transformcompose_config_params(
    key: string,
    value: string,
): TransformcomposeConfigParameters {
    const params = {
        "@type": "mrtrix.transformcompose.config" as const,
        "key": key,
        "value": value,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function transformcompose_config_cargs(
    params: TransformcomposeConfigParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-config");
    cargs.push((params["key"] ?? null));
    cargs.push((params["value"] ?? null));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param obj String object.
 *
 * @returns Parameter dictionary
 */
function transformcompose_various_string_params(
    obj: string,
): TransformcomposeVariousStringParameters {
    const params = {
        "@type": "mrtrix.transformcompose.VariousString" as const,
        "obj": obj,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function transformcompose_various_string_cargs(
    params: TransformcomposeVariousStringParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push((params["obj"] ?? null));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param obj File object.
 *
 * @returns Parameter dictionary
 */
function transformcompose_various_file_params(
    obj: InputPathType,
): TransformcomposeVariousFileParameters {
    const params = {
        "@type": "mrtrix.transformcompose.VariousFile" as const,
        "obj": obj,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function transformcompose_various_file_cargs(
    params: TransformcomposeVariousFileParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push(execution.inputFile((params["obj"] ?? null)));
    return cargs;
}


/**
 * Output object returned when calling `transformcompose(...)`.
 *
 * @interface
 */
interface TransformcomposeOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input the input transforms (either linear or non-linear warps).
 * @param output the output file (may be a linear transformation text file, or a deformation warp field image, depending on usage)
 * @param template define the output grid defined by a template image
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 *
 * @returns Parameter dictionary
 */
function transformcompose_params(
    input: Array<InputPathType>,
    output: TransformcomposeVariousStringParameters | TransformcomposeVariousFileParameters,
    template: InputPathType | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<TransformcomposeConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
): TransformcomposeParameters {
    const params = {
        "@type": "mrtrix.transformcompose" as const,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help,
        "version": version,
        "input": input,
        "output": output,
    };
    if (template !== null) {
        params["template"] = template;
    }
    if (nthreads !== null) {
        params["nthreads"] = nthreads;
    }
    if (config !== null) {
        params["config"] = config;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function transformcompose_cargs(
    params: TransformcomposeParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("transformcompose");
    if ((params["template"] ?? null) !== null) {
        cargs.push(
            "-template",
            execution.inputFile((params["template"] ?? null))
        );
    }
    if ((params["info"] ?? null)) {
        cargs.push("-info");
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["debug"] ?? null)) {
        cargs.push("-debug");
    }
    if ((params["force"] ?? null)) {
        cargs.push("-force");
    }
    if ((params["nthreads"] ?? null) !== null) {
        cargs.push(
            "-nthreads",
            String((params["nthreads"] ?? null))
        );
    }
    if ((params["config"] ?? null) !== null) {
        cargs.push(...(params["config"] ?? null).map(s => dynCargs(s["@type"])(s, execution)).flat());
    }
    if ((params["help"] ?? null)) {
        cargs.push("-help");
    }
    if ((params["version"] ?? null)) {
        cargs.push("-version");
    }
    cargs.push(...(params["input"] ?? null).map(f => execution.inputFile(f)));
    cargs.push(...dynCargs((params["output"] ?? null)["@type"])((params["output"] ?? null), execution));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function transformcompose_outputs(
    params: TransformcomposeParameters,
    execution: Execution,
): TransformcomposeOutputs {
    const ret: TransformcomposeOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * Compose any number of linear transformations and/or warps into a single transformation.
 *
 * Any linear transforms must be supplied as a 4x4 matrix in a text file (e.g. as per the output of mrregister). Any warp fields must be supplied as a 4D image representing a deformation field (e.g. as output from mrrregister -nl_warp).
 *
 * Input transformations should be provided to the command in the order in which they would be applied to an image if they were to be applied individually.
 *
 * If all input transformations are linear, and the -template option is not provided, then the file output by the command will also be a linear transformation saved as a 4x4 matrix in a text file. If a template image is supplied, then the output will always be a deformation field. If at least one of the inputs is a warp field, then the output will be a deformation field, which will be defined on the grid of the last input warp image supplied if the -template option is not used.
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TransformcomposeOutputs`).
 */
function transformcompose_execute(
    params: TransformcomposeParameters,
    runner: Runner | null = null,
): TransformcomposeOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(TRANSFORMCOMPOSE_METADATA);
    params = execution.params(params)
    const cargs = transformcompose_cargs(params, execution)
    const ret = transformcompose_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Compose any number of linear transformations and/or warps into a single transformation.
 *
 * Any linear transforms must be supplied as a 4x4 matrix in a text file (e.g. as per the output of mrregister). Any warp fields must be supplied as a 4D image representing a deformation field (e.g. as output from mrrregister -nl_warp).
 *
 * Input transformations should be provided to the command in the order in which they would be applied to an image if they were to be applied individually.
 *
 * If all input transformations are linear, and the -template option is not provided, then the file output by the command will also be a linear transformation saved as a 4x4 matrix in a text file. If a template image is supplied, then the output will always be a deformation field. If at least one of the inputs is a warp field, then the output will be a deformation field, which will be defined on the grid of the last input warp image supplied if the -template option is not used.
 *
 * References:
 *
 * .
 *
 * Author: MRTrix3 Developers
 *
 * URL: https://www.mrtrix.org/
 *
 * @param input the input transforms (either linear or non-linear warps).
 * @param output the output file (may be a linear transformation text file, or a deformation warp field image, depending on usage)
 * @param template define the output grid defined by a template image
 * @param info display information messages.
 * @param quiet do not display information messages or progress status; alternatively, this can be achieved by setting the MRTRIX_QUIET environment variable to a non-empty string.
 * @param debug display debugging messages.
 * @param force force overwrite of output files (caution: using the same file as input and output might cause unexpected behaviour).
 * @param nthreads use this number of threads in multi-threaded applications (set to 0 to disable multi-threading).
 * @param config temporarily set the value of an MRtrix config file entry.
 * @param help display this information page and exit.
 * @param version display version information and exit.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `TransformcomposeOutputs`).
 */
function transformcompose(
    input: Array<InputPathType>,
    output: TransformcomposeVariousStringParameters | TransformcomposeVariousFileParameters,
    template: InputPathType | null = null,
    info: boolean = false,
    quiet: boolean = false,
    debug: boolean = false,
    force: boolean = false,
    nthreads: number | null = null,
    config: Array<TransformcomposeConfigParameters> | null = null,
    help: boolean = false,
    version: boolean = false,
    runner: Runner | null = null,
): TransformcomposeOutputs {
    const params = transformcompose_params(input, output, template, info, quiet, debug, force, nthreads, config, help, version)
    return transformcompose_execute(params, runner);
}


export {
      TRANSFORMCOMPOSE_METADATA,
      TransformcomposeConfigParameters,
      TransformcomposeOutputs,
      TransformcomposeParameters,
      TransformcomposeVariousFileParameters,
      TransformcomposeVariousStringParameters,
      transformcompose,
      transformcompose_config_params,
      transformcompose_execute,
      transformcompose_params,
      transformcompose_various_file_params,
      transformcompose_various_string_params,
};
