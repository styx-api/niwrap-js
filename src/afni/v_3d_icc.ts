// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_ICC_METADATA: Metadata = {
    id: "58d26a68e385d16936a1a88b29bf7a5505bc0d8f.boutiques",
    name: "3dICC",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dIccParameters {
    "@type": "afni.3dICC";
    "model": string;
    "prefix": string;
    "mask"?: InputPathType | null | undefined;
    "data_table": string;
    "bounds"?: Array<number> | null | undefined;
    "jobs"?: number | null | undefined;
    "qVars"?: string | null | undefined;
    "qVarCenters"?: string | null | undefined;
    "subj"?: string | null | undefined;
    "input_file_column"?: string | null | undefined;
    "tStat"?: string | null | undefined;
    "dbgArgs": boolean;
    "cio": boolean;
    "rio": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.3dICC": v_3d_icc_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.3dICC": v_3d_icc_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_icc(...)`.
 *
 * @interface
 */
interface V3dIccOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Name of the output file
     */
    output_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param model Model structure for all the variables. The expression FORMULA with more than one variable has to be surrounded within quotes. Variable names should be consistent with the ones used in the header of -dataTable.
 * @param prefix Name of output file. For AFNI format, provide prefix only, with no view+suffix needed. Filename for NIfTI format should have .nii attached, while file name for surface data is expected to end with .niml.dset.
 * @param data_table List the data structure with a header as the first line. The first column is reserved with label 'Subj', and the last is reserved for 'InputFile'.
 * @param mask Path to mask file. Only process voxels inside this mask.
 * @param bounds Bounds for outlier removal. Provide two numbers: the lower bound (lb) and the upper bound (ub). Input data will be confined within [lb, ub]. Any values beyond the bounds will be treated as missing.
 * @param jobs Number of jobs for parallel computing. Choose 1 for a single-processor computer.
 * @param q_vars Identify quantitative variables with this option. List should be separated with comma and surrounded within quotes.
 * @param q_var_centers Specify centering values for quantitative variables identified under -qVars. Multiple centers are separated by commas and should be surrounded within quotes.
 * @param subj Specify the column name that is designated as the measuring entity variable (usually subject).
 * @param input_file_column Specify the last column name that is designated for input files of effect estimate.
 * @param t_stat Specify the column name that is designated as the t-statistic.
 * @param dbg_args Enable R to save the parameters in a file called .3dICC.dbg.AFNI.args in the current directory for debugging.
 * @param cio Use AFNI's C io functions. Default is -cio.
 * @param rio Use R's io functions.
 *
 * @returns Parameter dictionary
 */
function v_3d_icc_params(
    model: string,
    prefix: string,
    data_table: string,
    mask: InputPathType | null = null,
    bounds: Array<number> | null = null,
    jobs: number | null = null,
    q_vars: string | null = null,
    q_var_centers: string | null = null,
    subj: string | null = null,
    input_file_column: string | null = null,
    t_stat: string | null = null,
    dbg_args: boolean = false,
    cio: boolean = false,
    rio: boolean = false,
): V3dIccParameters {
    const params = {
        "@type": "afni.3dICC" as const,
        "model": model,
        "prefix": prefix,
        "data_table": data_table,
        "dbgArgs": dbg_args,
        "cio": cio,
        "rio": rio,
    };
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (bounds !== null) {
        params["bounds"] = bounds;
    }
    if (jobs !== null) {
        params["jobs"] = jobs;
    }
    if (q_vars !== null) {
        params["qVars"] = q_vars;
    }
    if (q_var_centers !== null) {
        params["qVarCenters"] = q_var_centers;
    }
    if (subj !== null) {
        params["subj"] = subj;
    }
    if (input_file_column !== null) {
        params["input_file_column"] = input_file_column;
    }
    if (t_stat !== null) {
        params["tStat"] = t_stat;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v_3d_icc_cargs(
    params: V3dIccParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("3dICC");
    cargs.push((params["model"] ?? null));
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    cargs.push(
        "-dataTable",
        (params["data_table"] ?? null)
    );
    if ((params["bounds"] ?? null) !== null) {
        cargs.push(
            "-bounds",
            ...(params["bounds"] ?? null).map(String)
        );
    }
    if ((params["jobs"] ?? null) !== null) {
        cargs.push(
            "-jobs",
            String((params["jobs"] ?? null))
        );
    }
    if ((params["qVars"] ?? null) !== null) {
        cargs.push(
            "-qVars",
            (params["qVars"] ?? null)
        );
    }
    if ((params["qVarCenters"] ?? null) !== null) {
        cargs.push(
            "-qVarCenters",
            (params["qVarCenters"] ?? null)
        );
    }
    if ((params["subj"] ?? null) !== null) {
        cargs.push(
            "-Subj",
            (params["subj"] ?? null)
        );
    }
    if ((params["input_file_column"] ?? null) !== null) {
        cargs.push(
            "-IF",
            (params["input_file_column"] ?? null)
        );
    }
    if ((params["tStat"] ?? null) !== null) {
        cargs.push(
            "-tStat",
            (params["tStat"] ?? null)
        );
    }
    if ((params["dbgArgs"] ?? null)) {
        cargs.push("-dbgArgs");
    }
    if ((params["cio"] ?? null)) {
        cargs.push("-cio");
    }
    if ((params["rio"] ?? null)) {
        cargs.push("-Rio");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v_3d_icc_outputs(
    params: V3dIccParameters,
    execution: Execution,
): V3dIccOutputs {
    const ret: V3dIccOutputs = {
        root: execution.outputFile("."),
        output_file: execution.outputFile([(params["prefix"] ?? null)].join('')),
    };
    return ret;
}


/**
 * AFNI Program for IntraClass Correlatin (ICC) Analysis.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `V3dIccOutputs`).
 */
function v_3d_icc_execute(
    params: V3dIccParameters,
    execution: Execution,
): V3dIccOutputs {
    params = execution.params(params)
    const cargs = v_3d_icc_cargs(params, execution)
    const ret = v_3d_icc_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * AFNI Program for IntraClass Correlatin (ICC) Analysis.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param model Model structure for all the variables. The expression FORMULA with more than one variable has to be surrounded within quotes. Variable names should be consistent with the ones used in the header of -dataTable.
 * @param prefix Name of output file. For AFNI format, provide prefix only, with no view+suffix needed. Filename for NIfTI format should have .nii attached, while file name for surface data is expected to end with .niml.dset.
 * @param data_table List the data structure with a header as the first line. The first column is reserved with label 'Subj', and the last is reserved for 'InputFile'.
 * @param mask Path to mask file. Only process voxels inside this mask.
 * @param bounds Bounds for outlier removal. Provide two numbers: the lower bound (lb) and the upper bound (ub). Input data will be confined within [lb, ub]. Any values beyond the bounds will be treated as missing.
 * @param jobs Number of jobs for parallel computing. Choose 1 for a single-processor computer.
 * @param q_vars Identify quantitative variables with this option. List should be separated with comma and surrounded within quotes.
 * @param q_var_centers Specify centering values for quantitative variables identified under -qVars. Multiple centers are separated by commas and should be surrounded within quotes.
 * @param subj Specify the column name that is designated as the measuring entity variable (usually subject).
 * @param input_file_column Specify the last column name that is designated for input files of effect estimate.
 * @param t_stat Specify the column name that is designated as the t-statistic.
 * @param dbg_args Enable R to save the parameters in a file called .3dICC.dbg.AFNI.args in the current directory for debugging.
 * @param cio Use AFNI's C io functions. Default is -cio.
 * @param rio Use R's io functions.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V3dIccOutputs`).
 */
function v_3d_icc(
    model: string,
    prefix: string,
    data_table: string,
    mask: InputPathType | null = null,
    bounds: Array<number> | null = null,
    jobs: number | null = null,
    q_vars: string | null = null,
    q_var_centers: string | null = null,
    subj: string | null = null,
    input_file_column: string | null = null,
    t_stat: string | null = null,
    dbg_args: boolean = false,
    cio: boolean = false,
    rio: boolean = false,
    runner: Runner | null = null,
): V3dIccOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_ICC_METADATA);
    const params = v_3d_icc_params(model, prefix, data_table, mask, bounds, jobs, q_vars, q_var_centers, subj, input_file_column, t_stat, dbg_args, cio, rio)
    return v_3d_icc_execute(params, execution);
}


export {
      V3dIccOutputs,
      V3dIccParameters,
      V_3D_ICC_METADATA,
      v_3d_icc,
      v_3d_icc_cargs,
      v_3d_icc_execute,
      v_3d_icc_outputs,
      v_3d_icc_params,
};
