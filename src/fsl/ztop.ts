// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const ZTOP_METADATA: Metadata = {
    id: "deddcbfedb91b19408de03acf48c90f5e656fdd6.boutiques",
    name: "ztop",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface ZtopParameters {
    "@type": "fsl.ztop";
    "z_score": number;
    "tail_flag": boolean;
    "grf_flag": boolean;
    "number_of_resels"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.ztop": ztop_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `ztop(...)`.
 *
 * @interface
 */
interface ZtopOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param z_score Input z-score
 * @param tail_flag Use 2-tailed conversion (default is 1-tailed)
 * @param grf_flag Use GRF maximum-height theory instead of Gaussian PDF
 * @param number_of_resels Number of resels (resolution elements) for GRF correction
 *
 * @returns Parameter dictionary
 */
function ztop_params(
    z_score: number,
    tail_flag: boolean = false,
    grf_flag: boolean = false,
    number_of_resels: number | null = null,
): ZtopParameters {
    const params = {
        "@type": "fsl.ztop" as const,
        "z_score": z_score,
        "tail_flag": tail_flag,
        "grf_flag": grf_flag,
    };
    if (number_of_resels !== null) {
        params["number_of_resels"] = number_of_resels;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function ztop_cargs(
    params: ZtopParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("ztop");
    cargs.push(String((params["z_score"] ?? null)));
    if ((params["tail_flag"] ?? null)) {
        cargs.push("-2");
    }
    if ((params["grf_flag"] ?? null)) {
        cargs.push("-g");
    }
    if ((params["number_of_resels"] ?? null) !== null) {
        cargs.push(String((params["number_of_resels"] ?? null)));
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function ztop_outputs(
    params: ZtopParameters,
    execution: Execution,
): ZtopOutputs {
    const ret: ZtopOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * ztop
 *
 * Converts a z-score to a p-value.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ZtopOutputs`).
 */
function ztop_execute(
    params: ZtopParameters,
    runner: Runner | null = null,
): ZtopOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(ZTOP_METADATA);
    params = execution.params(params)
    const cargs = ztop_cargs(params, execution)
    const ret = ztop_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * ztop
 *
 * Converts a z-score to a p-value.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param z_score Input z-score
 * @param tail_flag Use 2-tailed conversion (default is 1-tailed)
 * @param grf_flag Use GRF maximum-height theory instead of Gaussian PDF
 * @param number_of_resels Number of resels (resolution elements) for GRF correction
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `ZtopOutputs`).
 */
function ztop(
    z_score: number,
    tail_flag: boolean = false,
    grf_flag: boolean = false,
    number_of_resels: number | null = null,
    runner: Runner | null = null,
): ZtopOutputs {
    const params = ztop_params(z_score, tail_flag, grf_flag, number_of_resels)
    return ztop_execute(params, runner);
}


export {
      ZTOP_METADATA,
      ZtopOutputs,
      ZtopParameters,
      ztop,
      ztop_execute,
      ztop_params,
};
