// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MAKE_UPRIGHT_METADATA: Metadata = {
    id: "9a8f85ef83b8eb4c40293a66c43256e0c3863123.boutiques",
    name: "make_upright",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MakeUprightParameters {
    "@type": "freesurfer.make_upright";
    "input_image": InputPathType;
    "output_image": string;
    "transformation_map": InputPathType;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.make_upright": make_upright_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.make_upright": make_upright_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `make_upright(...)`.
 *
 * @interface
 */
interface MakeUprightOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Registered upright MRI image
     */
    registered_image: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_image Input MRI image file in .mgz format
 * @param output_image Output MRI image file in .mgz format
 * @param transformation_map Transformation map file in .lta format
 *
 * @returns Parameter dictionary
 */
function make_upright_params(
    input_image: InputPathType,
    output_image: string,
    transformation_map: InputPathType,
): MakeUprightParameters {
    const params = {
        "@type": "freesurfer.make_upright" as const,
        "input_image": input_image,
        "output_image": output_image,
        "transformation_map": transformation_map,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function make_upright_cargs(
    params: MakeUprightParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("make_upright");
    cargs.push(execution.inputFile((params["input_image"] ?? null)));
    cargs.push((params["output_image"] ?? null));
    cargs.push(execution.inputFile((params["transformation_map"] ?? null)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function make_upright_outputs(
    params: MakeUprightParameters,
    execution: Execution,
): MakeUprightOutputs {
    const ret: MakeUprightOutputs = {
        root: execution.outputFile("."),
        registered_image: execution.outputFile([(params["output_image"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Registers MRI input to the left/right reversed version using mri_robust_register and making use of the half-way space, resulting in an upright, forward facing head position.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `MakeUprightOutputs`).
 */
function make_upright_execute(
    params: MakeUprightParameters,
    execution: Execution,
): MakeUprightOutputs {
    params = execution.params(params)
    const cargs = make_upright_cargs(params, execution)
    const ret = make_upright_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Registers MRI input to the left/right reversed version using mri_robust_register and making use of the half-way space, resulting in an upright, forward facing head position.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_image Input MRI image file in .mgz format
 * @param output_image Output MRI image file in .mgz format
 * @param transformation_map Transformation map file in .lta format
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MakeUprightOutputs`).
 */
function make_upright(
    input_image: InputPathType,
    output_image: string,
    transformation_map: InputPathType,
    runner: Runner | null = null,
): MakeUprightOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MAKE_UPRIGHT_METADATA);
    const params = make_upright_params(input_image, output_image, transformation_map)
    return make_upright_execute(params, execution);
}


export {
      MAKE_UPRIGHT_METADATA,
      MakeUprightOutputs,
      MakeUprightParameters,
      make_upright,
      make_upright_cargs,
      make_upright_execute,
      make_upright_outputs,
      make_upright_params,
};
