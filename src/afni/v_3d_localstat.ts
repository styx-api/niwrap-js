// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_LOCALSTAT_METADATA: Metadata = {
    id: "f927c9d4ad8b0ef0fa566fe0b9648789d0b3eb44.boutiques",
    name: "3dLocalstat",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dLocalstatParameters {
    "__STYXTYPE__": "3dLocalstat";
    "dataset": InputPathType;
    "nbhd": string;
    "stat"?: Array<string> | null | undefined;
    "mask"?: InputPathType | null | undefined;
    "automask": boolean;
    "use_nonmask": boolean;
    "prefix"?: string | null | undefined;
    "datum"?: string | null | undefined;
    "label_ext"?: string | null | undefined;
    "reduce_grid"?: Array<number> | null | undefined;
    "reduce_restore_grid"?: Array<number> | null | undefined;
    "reduce_max_vox"?: number | null | undefined;
    "grid_rmode"?: string | null | undefined;
    "quiet": boolean;
    "verbose": boolean;
    "proceed_small_N": boolean;
    "fillvalue"?: number | null | undefined;
    "unfillvalue"?: number | null | undefined;
    "maskvalue"?: number | null | undefined;
    "maskvalue2"?: number | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dLocalstat": v_3d_localstat_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dLocalstat": v_3d_localstat_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_localstat(...)`.
 *
 * @interface
 */
interface V3dLocalstatOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output dataset
     */
    outfile: OutputPathType | null;
}


function v_3d_localstat_params(
    dataset: InputPathType,
    nbhd: string,
    stat: Array<string> | null = null,
    mask: InputPathType | null = null,
    automask: boolean = false,
    use_nonmask: boolean = false,
    prefix: string | null = null,
    datum: string | null = null,
    label_ext: string | null = null,
    reduce_grid: Array<number> | null = null,
    reduce_restore_grid: Array<number> | null = null,
    reduce_max_vox: number | null = null,
    grid_rmode: string | null = null,
    quiet: boolean = false,
    verbose: boolean = false,
    proceed_small_n: boolean = false,
    fillvalue: number | null = null,
    unfillvalue: number | null = null,
    maskvalue: number | null = null,
    maskvalue2: number | null = null,
): V3dLocalstatParameters {
    /**
     * Build parameters.
    
     * @param dataset Input dataset
     * @param nbhd The region around each voxel that will be extracted for the statistics calculation
     * @param stat Compute the specified statistic on the values extracted from the neighborhood
     * @param mask Read in dataset 'mset' and use the nonzero voxels therein as a mask
     * @param automask Compute the mask as in program 3dAutomask (mutually exclusive with -mask)
     * @param use_nonmask Compute local statistics from all voxels in the neighborhood that are in the mask, even if the central voxel is not in the mask
     * @param prefix Use the given string as the prefix for the output dataset
     * @param datum Coerce the output data to be stored as the given type (byte, short, float)
     * @param label_ext Append given label to each sub-brick label
     * @param reduce_grid Compute output on a grid that is reduced by the given factor in X, Y, and Z directions of the input dataset
     * @param reduce_restore_grid Resample the output back to input grid after reducing the grid
     * @param reduce_max_vox Automatically set Rx Ry Rz so that the computation grid is at a resolution of nbhd/MAX_VOX voxels
     * @param grid_rmode Interpolant to use when resampling the output with reduce_restore_grid option
     * @param quiet Stop the highly informative progress reports
     * @param verbose A little more verbose output
     * @param proceed_small_n Do not crash if neighborhood is too small for certain estimates
     * @param fillvalue Value used for filled statistic, default=1
     * @param unfillvalue Value used for unfilled statistic, default=1
     * @param maskvalue Value searched for with has_mask option
     * @param maskvalue2 Alternate value for has_mask2 option
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dLocalstat" as const,
        "dataset": dataset,
        "nbhd": nbhd,
        "automask": automask,
        "use_nonmask": use_nonmask,
        "quiet": quiet,
        "verbose": verbose,
        "proceed_small_N": proceed_small_n,
    };
    if (stat !== null) {
        params["stat"] = stat;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (prefix !== null) {
        params["prefix"] = prefix;
    }
    if (datum !== null) {
        params["datum"] = datum;
    }
    if (label_ext !== null) {
        params["label_ext"] = label_ext;
    }
    if (reduce_grid !== null) {
        params["reduce_grid"] = reduce_grid;
    }
    if (reduce_restore_grid !== null) {
        params["reduce_restore_grid"] = reduce_restore_grid;
    }
    if (reduce_max_vox !== null) {
        params["reduce_max_vox"] = reduce_max_vox;
    }
    if (grid_rmode !== null) {
        params["grid_rmode"] = grid_rmode;
    }
    if (fillvalue !== null) {
        params["fillvalue"] = fillvalue;
    }
    if (unfillvalue !== null) {
        params["unfillvalue"] = unfillvalue;
    }
    if (maskvalue !== null) {
        params["maskvalue"] = maskvalue;
    }
    if (maskvalue2 !== null) {
        params["maskvalue2"] = maskvalue2;
    }
    return params;
}


function v_3d_localstat_cargs(
    params: V3dLocalstatParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dLocalstat");
    cargs.push(execution.inputFile((params["dataset"] ?? null)));
    cargs.push(
        "-nbhd",
        (params["nbhd"] ?? null)
    );
    if ((params["stat"] ?? null) !== null) {
        cargs.push(
            "-stat",
            ...(params["stat"] ?? null)
        );
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["automask"] ?? null)) {
        cargs.push("-automask");
    }
    if ((params["use_nonmask"] ?? null)) {
        cargs.push("-use_nonmask");
    }
    if ((params["prefix"] ?? null) !== null) {
        cargs.push(
            "-prefix",
            (params["prefix"] ?? null)
        );
    }
    if ((params["datum"] ?? null) !== null) {
        cargs.push(
            "-datum",
            (params["datum"] ?? null)
        );
    }
    if ((params["label_ext"] ?? null) !== null) {
        cargs.push(
            "-label_ext",
            (params["label_ext"] ?? null)
        );
    }
    if ((params["reduce_grid"] ?? null) !== null) {
        cargs.push(
            "-reduce_grid",
            ...(params["reduce_grid"] ?? null).map(String)
        );
    }
    if ((params["reduce_restore_grid"] ?? null) !== null) {
        cargs.push(
            "-reduce_restore_grid",
            ...(params["reduce_restore_grid"] ?? null).map(String)
        );
    }
    if ((params["reduce_max_vox"] ?? null) !== null) {
        cargs.push(
            "-reduce_max_vox",
            String((params["reduce_max_vox"] ?? null))
        );
    }
    if ((params["grid_rmode"] ?? null) !== null) {
        cargs.push(
            "-grid_rmode",
            (params["grid_rmode"] ?? null)
        );
    }
    if ((params["quiet"] ?? null)) {
        cargs.push("-quiet");
    }
    if ((params["verbose"] ?? null)) {
        cargs.push("-verb");
    }
    if ((params["proceed_small_N"] ?? null)) {
        cargs.push("-proceed_small_N");
    }
    if ((params["fillvalue"] ?? null) !== null) {
        cargs.push(
            "-fillvalue",
            String((params["fillvalue"] ?? null))
        );
    }
    if ((params["unfillvalue"] ?? null) !== null) {
        cargs.push(
            "-unfillvalue",
            String((params["unfillvalue"] ?? null))
        );
    }
    if ((params["maskvalue"] ?? null) !== null) {
        cargs.push(
            "-maskvalue",
            String((params["maskvalue"] ?? null))
        );
    }
    if ((params["maskvalue2"] ?? null) !== null) {
        cargs.push(
            "-maskvalue2",
            String((params["maskvalue2"] ?? null))
        );
    }
    return cargs;
}


function v_3d_localstat_outputs(
    params: V3dLocalstatParameters,
    execution: Execution,
): V3dLocalstatOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dLocalstatOutputs = {
        root: execution.outputFile("."),
        outfile: ((params["prefix"] ?? null) !== null) ? execution.outputFile([(params["prefix"] ?? null), ".nii.gz"].join('')) : null,
    };
    return ret;
}


function v_3d_localstat_execute(
    params: V3dLocalstatParameters,
    execution: Execution,
): V3dLocalstatOutputs {
    /**
     * This program computes statistics at each voxel, based on a local neighborhood of that voxel.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dLocalstatOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3d_localstat_cargs(params, execution)
    const ret = v_3d_localstat_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3d_localstat(
    dataset: InputPathType,
    nbhd: string,
    stat: Array<string> | null = null,
    mask: InputPathType | null = null,
    automask: boolean = false,
    use_nonmask: boolean = false,
    prefix: string | null = null,
    datum: string | null = null,
    label_ext: string | null = null,
    reduce_grid: Array<number> | null = null,
    reduce_restore_grid: Array<number> | null = null,
    reduce_max_vox: number | null = null,
    grid_rmode: string | null = null,
    quiet: boolean = false,
    verbose: boolean = false,
    proceed_small_n: boolean = false,
    fillvalue: number | null = null,
    unfillvalue: number | null = null,
    maskvalue: number | null = null,
    maskvalue2: number | null = null,
    runner: Runner | null = null,
): V3dLocalstatOutputs {
    /**
     * This program computes statistics at each voxel, based on a local neighborhood of that voxel.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param dataset Input dataset
     * @param nbhd The region around each voxel that will be extracted for the statistics calculation
     * @param stat Compute the specified statistic on the values extracted from the neighborhood
     * @param mask Read in dataset 'mset' and use the nonzero voxels therein as a mask
     * @param automask Compute the mask as in program 3dAutomask (mutually exclusive with -mask)
     * @param use_nonmask Compute local statistics from all voxels in the neighborhood that are in the mask, even if the central voxel is not in the mask
     * @param prefix Use the given string as the prefix for the output dataset
     * @param datum Coerce the output data to be stored as the given type (byte, short, float)
     * @param label_ext Append given label to each sub-brick label
     * @param reduce_grid Compute output on a grid that is reduced by the given factor in X, Y, and Z directions of the input dataset
     * @param reduce_restore_grid Resample the output back to input grid after reducing the grid
     * @param reduce_max_vox Automatically set Rx Ry Rz so that the computation grid is at a resolution of nbhd/MAX_VOX voxels
     * @param grid_rmode Interpolant to use when resampling the output with reduce_restore_grid option
     * @param quiet Stop the highly informative progress reports
     * @param verbose A little more verbose output
     * @param proceed_small_n Do not crash if neighborhood is too small for certain estimates
     * @param fillvalue Value used for filled statistic, default=1
     * @param unfillvalue Value used for unfilled statistic, default=1
     * @param maskvalue Value searched for with has_mask option
     * @param maskvalue2 Alternate value for has_mask2 option
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dLocalstatOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_LOCALSTAT_METADATA);
    const params = v_3d_localstat_params(dataset, nbhd, stat, mask, automask, use_nonmask, prefix, datum, label_ext, reduce_grid, reduce_restore_grid, reduce_max_vox, grid_rmode, quiet, verbose, proceed_small_n, fillvalue, unfillvalue, maskvalue, maskvalue2)
    return v_3d_localstat_execute(params, execution);
}


export {
      V3dLocalstatOutputs,
      V3dLocalstatParameters,
      V_3D_LOCALSTAT_METADATA,
      v_3d_localstat,
      v_3d_localstat_params,
};
