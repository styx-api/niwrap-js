// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__COMPUTE_GCOR_METADATA: Metadata = {
    id: "5b49288dc45e60df83fcd651b8cdf3b983aa266d.boutiques",
    name: "@compute_gcor",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VComputeGcorParameters {
    "@type": "afni.@compute_gcor";
    "input": InputPathType;
    "mask"?: InputPathType | null | undefined;
    "corr_vol_prefix"?: string | null | undefined;
    "initial_trs"?: number | null | undefined;
    "no_demean": boolean;
    "save_tmp": boolean;
    "verbose"?: number | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.@compute_gcor": v__compute_gcor_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.@compute_gcor": v__compute_gcor_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__compute_gcor(...)`.
 *
 * @interface
 */
interface VComputeGcorOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output correlation volume BRIK file
     */
    corr_vol_brik: OutputPathType | null;
    /**
     * Output correlation volume HEAD file
     */
    corr_vol_head: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param input Specify input dataset to compute the GCOR over
 * @param mask Specify mask dataset, for restricting the computation
 * @param corr_vol_prefix Specify prefix for correlation volume output
 * @param initial_trs Specify number of initial TRs to ignore
 * @param no_demean Do not demean as the first step
 * @param save_tmp Save temporary files (do not remove at end)
 * @param verbose Set verbose level (0=quiet, 3=max)
 *
 * @returns Parameter dictionary
 */
function v__compute_gcor_params(
    input: InputPathType,
    mask: InputPathType | null = null,
    corr_vol_prefix: string | null = null,
    initial_trs: number | null = null,
    no_demean: boolean = false,
    save_tmp: boolean = false,
    verbose: number | null = null,
): VComputeGcorParameters {
    const params = {
        "@type": "afni.@compute_gcor" as const,
        "input": input,
        "no_demean": no_demean,
        "save_tmp": save_tmp,
    };
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (corr_vol_prefix !== null) {
        params["corr_vol_prefix"] = corr_vol_prefix;
    }
    if (initial_trs !== null) {
        params["initial_trs"] = initial_trs;
    }
    if (verbose !== null) {
        params["verbose"] = verbose;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v__compute_gcor_cargs(
    params: VComputeGcorParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("@compute_gcor");
    cargs.push(execution.inputFile((params["input"] ?? null)));
    if ((params["mask"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["mask"] ?? null)));
    }
    if ((params["corr_vol_prefix"] ?? null) !== null) {
        cargs.push(
            "-corr_vol",
            (params["corr_vol_prefix"] ?? null)
        );
    }
    if ((params["initial_trs"] ?? null) !== null) {
        cargs.push(
            "-nfirst",
            String((params["initial_trs"] ?? null))
        );
    }
    if ((params["no_demean"] ?? null)) {
        cargs.push("-no_demean");
    }
    if ((params["save_tmp"] ?? null)) {
        cargs.push("-savetmp");
    }
    if ((params["verbose"] ?? null) !== null) {
        cargs.push(
            "-verb",
            String((params["verbose"] ?? null))
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v__compute_gcor_outputs(
    params: VComputeGcorParameters,
    execution: Execution,
): VComputeGcorOutputs {
    const ret: VComputeGcorOutputs = {
        root: execution.outputFile("."),
        corr_vol_brik: ((params["corr_vol_prefix"] ?? null) !== null) ? execution.outputFile([(params["corr_vol_prefix"] ?? null), "+tlrc.BRIK"].join('')) : null,
        corr_vol_head: ((params["corr_vol_prefix"] ?? null) !== null) ? execution.outputFile([(params["corr_vol_prefix"] ?? null), "+tlrc.HEAD"].join('')) : null,
    };
    return ret;
}


/**
 * Compute GCOR, the global correlation.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VComputeGcorOutputs`).
 */
function v__compute_gcor_execute(
    params: VComputeGcorParameters,
    runner: Runner | null = null,
): VComputeGcorOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__COMPUTE_GCOR_METADATA);
    params = execution.params(params)
    const cargs = v__compute_gcor_cargs(params, execution)
    const ret = v__compute_gcor_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Compute GCOR, the global correlation.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input Specify input dataset to compute the GCOR over
 * @param mask Specify mask dataset, for restricting the computation
 * @param corr_vol_prefix Specify prefix for correlation volume output
 * @param initial_trs Specify number of initial TRs to ignore
 * @param no_demean Do not demean as the first step
 * @param save_tmp Save temporary files (do not remove at end)
 * @param verbose Set verbose level (0=quiet, 3=max)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VComputeGcorOutputs`).
 */
function v__compute_gcor(
    input: InputPathType,
    mask: InputPathType | null = null,
    corr_vol_prefix: string | null = null,
    initial_trs: number | null = null,
    no_demean: boolean = false,
    save_tmp: boolean = false,
    verbose: number | null = null,
    runner: Runner | null = null,
): VComputeGcorOutputs {
    const params = v__compute_gcor_params(input, mask, corr_vol_prefix, initial_trs, no_demean, save_tmp, verbose)
    return v__compute_gcor_execute(params, runner);
}


export {
      VComputeGcorOutputs,
      VComputeGcorParameters,
      V__COMPUTE_GCOR_METADATA,
      v__compute_gcor,
      v__compute_gcor_execute,
      v__compute_gcor_params,
};
