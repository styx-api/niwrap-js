// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V_3D_NET_CORR_METADATA: Metadata = {
    id: "5670b5b4f9d0ab3696cc0b14e6eaa44805f1ab6c.boutiques",
    name: "3dNetCorr",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V3dNetCorrParameters {
    "__STYXTYPE__": "3dNetCorr";
    "prefix": string;
    "inset": InputPathType;
    "in_rois": InputPathType;
    "mask"?: InputPathType | null | undefined;
    "fish_z": boolean;
    "part_corr": boolean;
    "ts_out": boolean;
    "ts_label": boolean;
    "ts_indiv": boolean;
    "ts_wb_corr": boolean;
    "ts_wb_Z": boolean;
    "weight_ts"?: InputPathType | null | undefined;
    "weight_corr"?: InputPathType | null | undefined;
    "ts_wb_strlabel": boolean;
    "nifti": boolean;
    "output_mask_nonnull": boolean;
    "push_thru_many_zeros": boolean;
    "allow_roi_zeros": boolean;
    "automask_off": boolean;
    "ignore_LT": boolean;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "3dNetCorr": v_3d_net_corr_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "3dNetCorr": v_3d_net_corr_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v_3d_net_corr(...)`.
 *
 * @interface
 */
interface V3dNetCorrOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output correlation matrix file for network 000
     */
    output_netcc: OutputPathType;
    /**
     * Output mean time series per ROI for network 000
     */
    output_netts: OutputPathType;
    /**
     * NIML/SUMA-esque file for visualizing connectivity info in a 3D brain for network 000
     */
    output_niml: OutputPathType;
    /**
     * Columns contain information for each ROI in the used mask.
     */
    output_roidat: OutputPathType;
    /**
     * Mask of non-null time series
     */
    output_mask_nnull: OutputPathType;
    /**
     * Directory containing individual time series files for network 000
     */
    output_indiv: OutputPathType;
    /**
     * Binary mask of the non-null time series
     */
    output_binary_mask_nnull: OutputPathType;
}


function v_3d_net_corr_params(
    prefix: string,
    inset: InputPathType,
    in_rois: InputPathType,
    mask: InputPathType | null = null,
    fish_z: boolean = false,
    part_corr: boolean = false,
    ts_out: boolean = false,
    ts_label: boolean = false,
    ts_indiv: boolean = false,
    ts_wb_corr: boolean = false,
    ts_wb_z: boolean = false,
    weight_ts: InputPathType | null = null,
    weight_corr: InputPathType | null = null,
    ts_wb_strlabel: boolean = false,
    nifti: boolean = false,
    output_mask_nonnull: boolean = false,
    push_thru_many_zeros: boolean = false,
    allow_roi_zeros: boolean = false,
    automask_off: boolean = false,
    ignore_lt: boolean = false,
): V3dNetCorrParameters {
    /**
     * Build parameters.
    
     * @param prefix Output file name prefix
     * @param inset Time series file (4D data set)
     * @param in_rois Input a set of ROIs each labelled with distinct integers. Multiple subbricks can be input, each will be treated as a separate network.
     * @param mask Whole brain mask within which to calculate correlation.
     * @param fish_z Output Fisher Z-transform matrix along with correlation matrix.
     * @param part_corr Output the partial correlation matrix.
     * @param ts_out Output the mean time series of the ROIs.
     * @param ts_label Insert the integer ROI label at the start of each line of the *.netts file created.
     * @param ts_indiv Create a directory for each network that contains the average time series for each ROI in individual files.
     * @param ts_wb_corr Perform whole brain correlation for each ROI's average time series and output as Pearson 'r' values.
     * @param ts_wb_z Perform whole brain correlation for each ROI's average time series and output as Fisher transformed Z-scores.
     * @param weight_ts Input a 1D file of weights to be applied multiplicatively to each ROI's average time series.
     * @param weight_corr Input a 1D file of weights to estimate a weighted Pearson Correlation.
     * @param ts_wb_strlabel Apply string labels to the WB correlation/Z-score output files.
     * @param nifti Output any correlation map files as NIFTI files.
     * @param output_mask_nonnull Output mask of non-null time series.
     * @param push_thru_many_zeros Push through the calculation even if any ROI contains more than 10 percent of voxels with null time series.
     * @param allow_roi_zeros Allow ROIs to have all-zero time series.
     * @param automask_off Disable internal automasking of where time series are not uniformly zero.
     * @param ignore_lt Ignore any label table labels in the '-in_rois' file.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "3dNetCorr" as const,
        "prefix": prefix,
        "inset": inset,
        "in_rois": in_rois,
        "fish_z": fish_z,
        "part_corr": part_corr,
        "ts_out": ts_out,
        "ts_label": ts_label,
        "ts_indiv": ts_indiv,
        "ts_wb_corr": ts_wb_corr,
        "ts_wb_Z": ts_wb_z,
        "ts_wb_strlabel": ts_wb_strlabel,
        "nifti": nifti,
        "output_mask_nonnull": output_mask_nonnull,
        "push_thru_many_zeros": push_thru_many_zeros,
        "allow_roi_zeros": allow_roi_zeros,
        "automask_off": automask_off,
        "ignore_LT": ignore_lt,
    };
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (weight_ts !== null) {
        params["weight_ts"] = weight_ts;
    }
    if (weight_corr !== null) {
        params["weight_corr"] = weight_corr;
    }
    return params;
}


function v_3d_net_corr_cargs(
    params: V3dNetCorrParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("3dNetCorr");
    cargs.push((params["prefix"] ?? null));
    cargs.push(execution.inputFile((params["inset"] ?? null)));
    cargs.push(execution.inputFile((params["in_rois"] ?? null)));
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-mask",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["fish_z"] ?? null)) {
        cargs.push("-fish_z");
    }
    if ((params["part_corr"] ?? null)) {
        cargs.push("-part_corr");
    }
    if ((params["ts_out"] ?? null)) {
        cargs.push("-ts_out");
    }
    if ((params["ts_label"] ?? null)) {
        cargs.push("-ts_label");
    }
    if ((params["ts_indiv"] ?? null)) {
        cargs.push("-ts_indiv");
    }
    if ((params["ts_wb_corr"] ?? null)) {
        cargs.push("-ts_wb_corr");
    }
    if ((params["ts_wb_Z"] ?? null)) {
        cargs.push("-ts_wb_Z");
    }
    if ((params["weight_ts"] ?? null) !== null) {
        cargs.push(
            "-weight_ts",
            execution.inputFile((params["weight_ts"] ?? null))
        );
    }
    if ((params["weight_corr"] ?? null) !== null) {
        cargs.push(
            "-weight_corr",
            execution.inputFile((params["weight_corr"] ?? null))
        );
    }
    if ((params["ts_wb_strlabel"] ?? null)) {
        cargs.push("-ts_wb_strlabel");
    }
    if ((params["nifti"] ?? null)) {
        cargs.push("-nifti");
    }
    if ((params["output_mask_nonnull"] ?? null)) {
        cargs.push("-output_mask_nonnull");
    }
    if ((params["push_thru_many_zeros"] ?? null)) {
        cargs.push("-push_thru_many_zeros");
    }
    if ((params["allow_roi_zeros"] ?? null)) {
        cargs.push("-allow_roi_zeros");
    }
    if ((params["automask_off"] ?? null)) {
        cargs.push("-automask_off");
    }
    if ((params["ignore_LT"] ?? null)) {
        cargs.push("-ignore_LT");
    }
    return cargs;
}


function v_3d_net_corr_outputs(
    params: V3dNetCorrParameters,
    execution: Execution,
): V3dNetCorrOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: V3dNetCorrOutputs = {
        root: execution.outputFile("."),
        output_netcc: execution.outputFile([(params["prefix"] ?? null), "_000.netcc"].join('')),
        output_netts: execution.outputFile([(params["prefix"] ?? null), "_000.netts"].join('')),
        output_niml: execution.outputFile([(params["prefix"] ?? null), "_000.niml.dset"].join('')),
        output_roidat: execution.outputFile([(params["prefix"] ?? null), ".roidat"].join('')),
        output_mask_nnull: execution.outputFile([(params["prefix"] ?? null), "_mask_nnull"].join('')),
        output_indiv: execution.outputFile([(params["prefix"] ?? null), "_000_INDIV"].join('')),
        output_binary_mask_nnull: execution.outputFile(["PREFIX_mask_nnull"].join('')),
    };
    return ret;
}


function v_3d_net_corr_execute(
    params: V3dNetCorrParameters,
    execution: Execution,
): V3dNetCorrOutputs {
    /**
     * Compute correlation matrix of a set of ROIs based on mean time series.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `V3dNetCorrOutputs`).
     */
    params = execution.params(params)
    const cargs = v_3d_net_corr_cargs(params, execution)
    const ret = v_3d_net_corr_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function v_3d_net_corr(
    prefix: string,
    inset: InputPathType,
    in_rois: InputPathType,
    mask: InputPathType | null = null,
    fish_z: boolean = false,
    part_corr: boolean = false,
    ts_out: boolean = false,
    ts_label: boolean = false,
    ts_indiv: boolean = false,
    ts_wb_corr: boolean = false,
    ts_wb_z: boolean = false,
    weight_ts: InputPathType | null = null,
    weight_corr: InputPathType | null = null,
    ts_wb_strlabel: boolean = false,
    nifti: boolean = false,
    output_mask_nonnull: boolean = false,
    push_thru_many_zeros: boolean = false,
    allow_roi_zeros: boolean = false,
    automask_off: boolean = false,
    ignore_lt: boolean = false,
    runner: Runner | null = null,
): V3dNetCorrOutputs {
    /**
     * Compute correlation matrix of a set of ROIs based on mean time series.
     * 
     * Author: AFNI Developers
     * 
     * URL: https://afni.nimh.nih.gov/
    
     * @param prefix Output file name prefix
     * @param inset Time series file (4D data set)
     * @param in_rois Input a set of ROIs each labelled with distinct integers. Multiple subbricks can be input, each will be treated as a separate network.
     * @param mask Whole brain mask within which to calculate correlation.
     * @param fish_z Output Fisher Z-transform matrix along with correlation matrix.
     * @param part_corr Output the partial correlation matrix.
     * @param ts_out Output the mean time series of the ROIs.
     * @param ts_label Insert the integer ROI label at the start of each line of the *.netts file created.
     * @param ts_indiv Create a directory for each network that contains the average time series for each ROI in individual files.
     * @param ts_wb_corr Perform whole brain correlation for each ROI's average time series and output as Pearson 'r' values.
     * @param ts_wb_z Perform whole brain correlation for each ROI's average time series and output as Fisher transformed Z-scores.
     * @param weight_ts Input a 1D file of weights to be applied multiplicatively to each ROI's average time series.
     * @param weight_corr Input a 1D file of weights to estimate a weighted Pearson Correlation.
     * @param ts_wb_strlabel Apply string labels to the WB correlation/Z-score output files.
     * @param nifti Output any correlation map files as NIFTI files.
     * @param output_mask_nonnull Output mask of non-null time series.
     * @param push_thru_many_zeros Push through the calculation even if any ROI contains more than 10 percent of voxels with null time series.
     * @param allow_roi_zeros Allow ROIs to have all-zero time series.
     * @param automask_off Disable internal automasking of where time series are not uniformly zero.
     * @param ignore_lt Ignore any label table labels in the '-in_rois' file.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `V3dNetCorrOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V_3D_NET_CORR_METADATA);
    const params = v_3d_net_corr_params(prefix, inset, in_rois, mask, fish_z, part_corr, ts_out, ts_label, ts_indiv, ts_wb_corr, ts_wb_z, weight_ts, weight_corr, ts_wb_strlabel, nifti, output_mask_nonnull, push_thru_many_zeros, allow_roi_zeros, automask_off, ignore_lt)
    return v_3d_net_corr_execute(params, execution);
}


export {
      V3dNetCorrOutputs,
      V3dNetCorrParameters,
      V_3D_NET_CORR_METADATA,
      v_3d_net_corr,
      v_3d_net_corr_params,
};
