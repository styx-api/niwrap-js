// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const METRIC_ROIS_TO_BORDER_METADATA: Metadata = {
    id: "74e3ff216bc623a926f27937a505117774b03cb4.boutiques",
    name: "metric-rois-to-border",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface MetricRoisToBorderParameters {
    "@type": "workbench.metric-rois-to-border";
    "surface": InputPathType;
    "metric": InputPathType;
    "class_name": string;
    "border_out": string;
    "opt_placement_fraction"?: number | null | undefined;
    "opt_column_column"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.metric-rois-to-border": metric_rois_to_border_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.metric-rois-to-border": metric_rois_to_border_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `metric_rois_to_border(...)`.
 *
 * @interface
 */
interface MetricRoisToBorderOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output border file
     */
    border_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param surface the surface to use for neighbor information
 * @param metric the input metric containing ROIs
 * @param class_name the name to use for the class of the output borders
 * @param border_out the output border file
 * @param opt_placement_fraction set how far along the edge border points are drawn: fraction along edge from inside vertex (default 0.33)
 * @param opt_column_column select a single column: the column number or name
 *
 * @returns Parameter dictionary
 */
function metric_rois_to_border_params(
    surface: InputPathType,
    metric: InputPathType,
    class_name: string,
    border_out: string,
    opt_placement_fraction: number | null = null,
    opt_column_column: string | null = null,
): MetricRoisToBorderParameters {
    const params = {
        "@type": "workbench.metric-rois-to-border" as const,
        "surface": surface,
        "metric": metric,
        "class_name": class_name,
        "border_out": border_out,
    };
    if (opt_placement_fraction !== null) {
        params["opt_placement_fraction"] = opt_placement_fraction;
    }
    if (opt_column_column !== null) {
        params["opt_column_column"] = opt_column_column;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function metric_rois_to_border_cargs(
    params: MetricRoisToBorderParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-metric-rois-to-border");
    cargs.push(execution.inputFile((params["surface"] ?? null)));
    cargs.push(execution.inputFile((params["metric"] ?? null)));
    cargs.push((params["class_name"] ?? null));
    cargs.push((params["border_out"] ?? null));
    if ((params["opt_placement_fraction"] ?? null) !== null) {
        cargs.push(
            "-placement",
            String((params["opt_placement_fraction"] ?? null))
        );
    }
    if ((params["opt_column_column"] ?? null) !== null) {
        cargs.push(
            "-column",
            (params["opt_column_column"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function metric_rois_to_border_outputs(
    params: MetricRoisToBorderParameters,
    execution: Execution,
): MetricRoisToBorderOutputs {
    const ret: MetricRoisToBorderOutputs = {
        root: execution.outputFile("."),
        border_out: execution.outputFile([(params["border_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Draw borders around metric rois.
 *
 * For each ROI column, finds all edges on the mesh that cross the boundary of the ROI, and draws borders through them.  By default, this is done on all columns in the input file, using the map name as the name for the border.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MetricRoisToBorderOutputs`).
 */
function metric_rois_to_border_execute(
    params: MetricRoisToBorderParameters,
    runner: Runner | null = null,
): MetricRoisToBorderOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(METRIC_ROIS_TO_BORDER_METADATA);
    params = execution.params(params)
    const cargs = metric_rois_to_border_cargs(params, execution)
    const ret = metric_rois_to_border_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Draw borders around metric rois.
 *
 * For each ROI column, finds all edges on the mesh that cross the boundary of the ROI, and draws borders through them.  By default, this is done on all columns in the input file, using the map name as the name for the border.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param surface the surface to use for neighbor information
 * @param metric the input metric containing ROIs
 * @param class_name the name to use for the class of the output borders
 * @param border_out the output border file
 * @param opt_placement_fraction set how far along the edge border points are drawn: fraction along edge from inside vertex (default 0.33)
 * @param opt_column_column select a single column: the column number or name
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MetricRoisToBorderOutputs`).
 */
function metric_rois_to_border(
    surface: InputPathType,
    metric: InputPathType,
    class_name: string,
    border_out: string,
    opt_placement_fraction: number | null = null,
    opt_column_column: string | null = null,
    runner: Runner | null = null,
): MetricRoisToBorderOutputs {
    const params = metric_rois_to_border_params(surface, metric, class_name, border_out, opt_placement_fraction, opt_column_column)
    return metric_rois_to_border_execute(params, runner);
}


export {
      METRIC_ROIS_TO_BORDER_METADATA,
      MetricRoisToBorderOutputs,
      MetricRoisToBorderParameters,
      metric_rois_to_border,
      metric_rois_to_border_execute,
      metric_rois_to_border_params,
};
