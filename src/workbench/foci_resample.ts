// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const FOCI_RESAMPLE_METADATA: Metadata = {
    id: "8322141254d86cd58104c0fbfd1170257f33975d.boutiques",
    name: "foci-resample",
    package: "workbench",
    container_image_tag: "brainlife/connectome_workbench:1.5.0-freesurfer-update",
};


interface FociResampleLeftSurfacesParameters {
    "@type": "workbench.foci-resample.left_surfaces";
    "current_surf": InputPathType;
    "new_surf": InputPathType;
}


interface FociResampleRightSurfacesParameters {
    "@type": "workbench.foci-resample.right_surfaces";
    "current_surf": InputPathType;
    "new_surf": InputPathType;
}


interface FociResampleCerebellumSurfacesParameters {
    "@type": "workbench.foci-resample.cerebellum_surfaces";
    "current_surf": InputPathType;
    "new_surf": InputPathType;
}


interface FociResampleParameters {
    "@type": "workbench.foci-resample";
    "foci_in": InputPathType;
    "foci_out": string;
    "left_surfaces"?: FociResampleLeftSurfacesParameters | null | undefined;
    "right_surfaces"?: FociResampleRightSurfacesParameters | null | undefined;
    "cerebellum_surfaces"?: FociResampleCerebellumSurfacesParameters | null | undefined;
    "opt_discard_distance_from_surface": boolean;
    "opt_restore_xyz": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "workbench.foci-resample": foci_resample_cargs,
        "workbench.foci-resample.left_surfaces": foci_resample_left_surfaces_cargs,
        "workbench.foci-resample.right_surfaces": foci_resample_right_surfaces_cargs,
        "workbench.foci-resample.cerebellum_surfaces": foci_resample_cerebellum_surfaces_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "workbench.foci-resample": foci_resample_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Build parameters.
 *
 * @param current_surf the surface the foci are currently projected on
 * @param new_surf the surface to project the foci onto
 *
 * @returns Parameter dictionary
 */
function foci_resample_left_surfaces_params(
    current_surf: InputPathType,
    new_surf: InputPathType,
): FociResampleLeftSurfacesParameters {
    const params = {
        "@type": "workbench.foci-resample.left_surfaces" as const,
        "current_surf": current_surf,
        "new_surf": new_surf,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function foci_resample_left_surfaces_cargs(
    params: FociResampleLeftSurfacesParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-left-surfaces");
    cargs.push(execution.inputFile((params["current_surf"] ?? null)));
    cargs.push(execution.inputFile((params["new_surf"] ?? null)));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param current_surf the surface the foci are currently projected on
 * @param new_surf the surface to project the foci onto
 *
 * @returns Parameter dictionary
 */
function foci_resample_right_surfaces_params(
    current_surf: InputPathType,
    new_surf: InputPathType,
): FociResampleRightSurfacesParameters {
    const params = {
        "@type": "workbench.foci-resample.right_surfaces" as const,
        "current_surf": current_surf,
        "new_surf": new_surf,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function foci_resample_right_surfaces_cargs(
    params: FociResampleRightSurfacesParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-right-surfaces");
    cargs.push(execution.inputFile((params["current_surf"] ?? null)));
    cargs.push(execution.inputFile((params["new_surf"] ?? null)));
    return cargs;
}


/**
 * Build parameters.
 *
 * @param current_surf the surface the foci are currently projected on
 * @param new_surf the surface to project the foci onto
 *
 * @returns Parameter dictionary
 */
function foci_resample_cerebellum_surfaces_params(
    current_surf: InputPathType,
    new_surf: InputPathType,
): FociResampleCerebellumSurfacesParameters {
    const params = {
        "@type": "workbench.foci-resample.cerebellum_surfaces" as const,
        "current_surf": current_surf,
        "new_surf": new_surf,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function foci_resample_cerebellum_surfaces_cargs(
    params: FociResampleCerebellumSurfacesParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("-cerebellum-surfaces");
    cargs.push(execution.inputFile((params["current_surf"] ?? null)));
    cargs.push(execution.inputFile((params["new_surf"] ?? null)));
    return cargs;
}


/**
 * Output object returned when calling `foci_resample(...)`.
 *
 * @interface
 */
interface FociResampleOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * the output foci file
     */
    foci_out: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param foci_in the input foci file
 * @param foci_out the output foci file
 * @param left_surfaces the left surfaces for resampling
 * @param right_surfaces the right surfaces for resampling
 * @param cerebellum_surfaces the cerebellum surfaces for resampling
 * @param opt_discard_distance_from_surface ignore the distance the foci are above or below the current surface
 * @param opt_restore_xyz put the original xyz coordinates into the foci, rather than the coordinates obtained from unprojection
 *
 * @returns Parameter dictionary
 */
function foci_resample_params(
    foci_in: InputPathType,
    foci_out: string,
    left_surfaces: FociResampleLeftSurfacesParameters | null = null,
    right_surfaces: FociResampleRightSurfacesParameters | null = null,
    cerebellum_surfaces: FociResampleCerebellumSurfacesParameters | null = null,
    opt_discard_distance_from_surface: boolean = false,
    opt_restore_xyz: boolean = false,
): FociResampleParameters {
    const params = {
        "@type": "workbench.foci-resample" as const,
        "foci_in": foci_in,
        "foci_out": foci_out,
        "opt_discard_distance_from_surface": opt_discard_distance_from_surface,
        "opt_restore_xyz": opt_restore_xyz,
    };
    if (left_surfaces !== null) {
        params["left_surfaces"] = left_surfaces;
    }
    if (right_surfaces !== null) {
        params["right_surfaces"] = right_surfaces;
    }
    if (cerebellum_surfaces !== null) {
        params["cerebellum_surfaces"] = cerebellum_surfaces;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function foci_resample_cargs(
    params: FociResampleParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("wb_command");
    cargs.push("-foci-resample");
    cargs.push(execution.inputFile((params["foci_in"] ?? null)));
    cargs.push((params["foci_out"] ?? null));
    if ((params["left_surfaces"] ?? null) !== null) {
        cargs.push(...dynCargs((params["left_surfaces"] ?? null)["@type"])((params["left_surfaces"] ?? null), execution));
    }
    if ((params["right_surfaces"] ?? null) !== null) {
        cargs.push(...dynCargs((params["right_surfaces"] ?? null)["@type"])((params["right_surfaces"] ?? null), execution));
    }
    if ((params["cerebellum_surfaces"] ?? null) !== null) {
        cargs.push(...dynCargs((params["cerebellum_surfaces"] ?? null)["@type"])((params["cerebellum_surfaces"] ?? null), execution));
    }
    if ((params["opt_discard_distance_from_surface"] ?? null)) {
        cargs.push("-discard-distance-from-surface");
    }
    if ((params["opt_restore_xyz"] ?? null)) {
        cargs.push("-restore-xyz");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function foci_resample_outputs(
    params: FociResampleParameters,
    execution: Execution,
): FociResampleOutputs {
    const ret: FociResampleOutputs = {
        root: execution.outputFile("."),
        foci_out: execution.outputFile([(params["foci_out"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Project foci to a different surface.
 *
 * Unprojects foci from the <current-surf> for the structure, then projects them to <new-surf>.  If the foci have meaningful distances above or below the surface, use anatomical surfaces.  If the foci should be on the surface, use registered spheres and the options -discard-distance-from-surface and -restore-xyz.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FociResampleOutputs`).
 */
function foci_resample_execute(
    params: FociResampleParameters,
    runner: Runner | null = null,
): FociResampleOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(FOCI_RESAMPLE_METADATA);
    params = execution.params(params)
    const cargs = foci_resample_cargs(params, execution)
    const ret = foci_resample_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Project foci to a different surface.
 *
 * Unprojects foci from the <current-surf> for the structure, then projects them to <new-surf>.  If the foci have meaningful distances above or below the surface, use anatomical surfaces.  If the foci should be on the surface, use registered spheres and the options -discard-distance-from-surface and -restore-xyz.
 *
 * Author: Connectome Workbench Developers
 *
 * URL: https://github.com/Washington-University/workbench
 *
 * @param foci_in the input foci file
 * @param foci_out the output foci file
 * @param left_surfaces the left surfaces for resampling
 * @param right_surfaces the right surfaces for resampling
 * @param cerebellum_surfaces the cerebellum surfaces for resampling
 * @param opt_discard_distance_from_surface ignore the distance the foci are above or below the current surface
 * @param opt_restore_xyz put the original xyz coordinates into the foci, rather than the coordinates obtained from unprojection
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `FociResampleOutputs`).
 */
function foci_resample(
    foci_in: InputPathType,
    foci_out: string,
    left_surfaces: FociResampleLeftSurfacesParameters | null = null,
    right_surfaces: FociResampleRightSurfacesParameters | null = null,
    cerebellum_surfaces: FociResampleCerebellumSurfacesParameters | null = null,
    opt_discard_distance_from_surface: boolean = false,
    opt_restore_xyz: boolean = false,
    runner: Runner | null = null,
): FociResampleOutputs {
    const params = foci_resample_params(foci_in, foci_out, left_surfaces, right_surfaces, cerebellum_surfaces, opt_discard_distance_from_surface, opt_restore_xyz)
    return foci_resample_execute(params, runner);
}


export {
      FOCI_RESAMPLE_METADATA,
      FociResampleCerebellumSurfacesParameters,
      FociResampleLeftSurfacesParameters,
      FociResampleOutputs,
      FociResampleParameters,
      FociResampleRightSurfacesParameters,
      foci_resample,
      foci_resample_cerebellum_surfaces_params,
      foci_resample_execute,
      foci_resample_left_surfaces_params,
      foci_resample_params,
      foci_resample_right_surfaces_params,
};
