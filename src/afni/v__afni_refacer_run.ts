// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__AFNI_REFACER_RUN_METADATA: Metadata = {
    id: "4e275d528a8a916f8bf15e461ab3aaee99ba8b52.boutiques",
    name: "@afni_refacer_run",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface VAfniRefacerRunParameters {
    "@type": "afni.@afni_refacer_run";
    "input_file": InputPathType;
    "mode_deface": boolean;
    "mode_reface": boolean;
    "mode_reface_plus": boolean;
    "mode_all": boolean;
    "prefix": string;
    "anonymize_output": boolean;
    "cost_function"?: string | null | undefined;
    "shell_option"?: string | null | undefined;
    "no_clean": boolean;
    "no_images": boolean;
    "overwrite": boolean;
    "verbose": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "afni.@afni_refacer_run": v__afni_refacer_run_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "afni.@afni_refacer_run": v__afni_refacer_run_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `v__afni_refacer_run(...)`.
 *
 * @interface
 */
interface VAfniRefacerRunOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Defaced volume (face+ears replaced with zeros)
     */
    output_deface: OutputPathType;
    /**
     * Refaced volume (face+ears replaced with artificial values)
     */
    output_reface: OutputPathType;
    /**
     * Reface_plused volume (face+ears+skull replaced with artificial values)
     */
    output_reface_plus: OutputPathType;
    /**
     * Face+ears used to replace or remove subject data
     */
    output_face: OutputPathType;
    /**
     * Face+ears+skull used to replace subject data
     */
    output_face_plus: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_file Name of input dataset; can contain path information.
 * @param prefix Name of output dataset
 * @param mode_deface Replace the computed face+ears voxels with all zeros instead of the artificial face (ears are also removed)
 * @param mode_reface Replace the subject's face+ears with a scaled set of artificial values
 * @param mode_reface_plus Replace the subject's face+ears+skull with a scaled set of artificial values (i.e., like 'refacing', but replacing a more complete shell around the subject's brain)
 * @param mode_all Output three volumes: one defaced, one refaced and one reface_plused
 * @param anonymize_output Use 3drefit and nifti_tool to anonymize the output datasets
 * @param cost_function Specify any cost function that is allowed by 3dAllineate (default: lpa)
 * @param shell_option Specify which shell to use. Options: afni_refacer_shell_sym_1.0.nii.gz (traditional), afni_refacer_shell_sym_2.0.nii.gz (more face/neck removal). Default: afni_refacer_shell_sym_1.0.nii.gz
 * @param no_clean Don't delete temp working directory (default: remove working directory)
 * @param no_images Don't make pretty images to automatically view the results of re/defacing
 * @param overwrite Final two file outputs will overwrite any existing files of the same name (default: don't do this). NB: this option does not apply to the working directory
 * @param verbose Run the 3dAllineate part herein with '-verb' (for verbosity)
 *
 * @returns Parameter dictionary
 */
function v__afni_refacer_run_params(
    input_file: InputPathType,
    prefix: string,
    mode_deface: boolean = false,
    mode_reface: boolean = false,
    mode_reface_plus: boolean = false,
    mode_all: boolean = false,
    anonymize_output: boolean = false,
    cost_function: string | null = null,
    shell_option: string | null = null,
    no_clean: boolean = false,
    no_images: boolean = false,
    overwrite: boolean = false,
    verbose: boolean = false,
): VAfniRefacerRunParameters {
    const params = {
        "@type": "afni.@afni_refacer_run" as const,
        "input_file": input_file,
        "mode_deface": mode_deface,
        "mode_reface": mode_reface,
        "mode_reface_plus": mode_reface_plus,
        "mode_all": mode_all,
        "prefix": prefix,
        "anonymize_output": anonymize_output,
        "no_clean": no_clean,
        "no_images": no_images,
        "overwrite": overwrite,
        "verbose": verbose,
    };
    if (cost_function !== null) {
        params["cost_function"] = cost_function;
    }
    if (shell_option !== null) {
        params["shell_option"] = shell_option;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v__afni_refacer_run_cargs(
    params: VAfniRefacerRunParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("@afni_refacer_run");
    cargs.push(
        "-input",
        execution.inputFile((params["input_file"] ?? null))
    );
    if ((params["mode_deface"] ?? null)) {
        cargs.push("-mode_deface");
    }
    if ((params["mode_reface"] ?? null)) {
        cargs.push("-mode_reface");
    }
    if ((params["mode_reface_plus"] ?? null)) {
        cargs.push("-mode_reface_plus");
    }
    if ((params["mode_all"] ?? null)) {
        cargs.push("-mode_all");
    }
    cargs.push(
        "-prefix",
        (params["prefix"] ?? null)
    );
    if ((params["anonymize_output"] ?? null)) {
        cargs.push("-anonymize_output");
    }
    if ((params["cost_function"] ?? null) !== null) {
        cargs.push(
            "-cost",
            (params["cost_function"] ?? null)
        );
    }
    if ((params["shell_option"] ?? null) !== null) {
        cargs.push(
            "-shell",
            (params["shell_option"] ?? null)
        );
    }
    if ((params["no_clean"] ?? null)) {
        cargs.push("-no_clean");
    }
    if ((params["no_images"] ?? null)) {
        cargs.push("-no_images");
    }
    if ((params["overwrite"] ?? null)) {
        cargs.push("-overwrite");
    }
    if ((params["verbose"] ?? null)) {
        cargs.push("-verb_allin");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v__afni_refacer_run_outputs(
    params: VAfniRefacerRunParameters,
    execution: Execution,
): VAfniRefacerRunOutputs {
    const ret: VAfniRefacerRunOutputs = {
        root: execution.outputFile("."),
        output_deface: execution.outputFile([(params["prefix"] ?? null), ".deface.nii.gz"].join('')),
        output_reface: execution.outputFile([(params["prefix"] ?? null), ".reface.nii.gz"].join('')),
        output_reface_plus: execution.outputFile([(params["prefix"] ?? null), ".reface_plus.nii.gz"].join('')),
        output_face: execution.outputFile([(params["prefix"] ?? null), ".face.nii.gz"].join('')),
        output_face_plus: execution.outputFile([(params["prefix"] ?? null), ".face_plus.nii.gz"].join('')),
    };
    return ret;
}


/**
 * @afni_refacer_run
 *
 * This script re-faces one input dataset, using a master shell dataset to write over the subject's 'face' region.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VAfniRefacerRunOutputs`).
 */
function v__afni_refacer_run_execute(
    params: VAfniRefacerRunParameters,
    runner: Runner | null = null,
): VAfniRefacerRunOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__AFNI_REFACER_RUN_METADATA);
    params = execution.params(params)
    const cargs = v__afni_refacer_run_cargs(params, execution)
    const ret = v__afni_refacer_run_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * @afni_refacer_run
 *
 * This script re-faces one input dataset, using a master shell dataset to write over the subject's 'face' region.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param input_file Name of input dataset; can contain path information.
 * @param prefix Name of output dataset
 * @param mode_deface Replace the computed face+ears voxels with all zeros instead of the artificial face (ears are also removed)
 * @param mode_reface Replace the subject's face+ears with a scaled set of artificial values
 * @param mode_reface_plus Replace the subject's face+ears+skull with a scaled set of artificial values (i.e., like 'refacing', but replacing a more complete shell around the subject's brain)
 * @param mode_all Output three volumes: one defaced, one refaced and one reface_plused
 * @param anonymize_output Use 3drefit and nifti_tool to anonymize the output datasets
 * @param cost_function Specify any cost function that is allowed by 3dAllineate (default: lpa)
 * @param shell_option Specify which shell to use. Options: afni_refacer_shell_sym_1.0.nii.gz (traditional), afni_refacer_shell_sym_2.0.nii.gz (more face/neck removal). Default: afni_refacer_shell_sym_1.0.nii.gz
 * @param no_clean Don't delete temp working directory (default: remove working directory)
 * @param no_images Don't make pretty images to automatically view the results of re/defacing
 * @param overwrite Final two file outputs will overwrite any existing files of the same name (default: don't do this). NB: this option does not apply to the working directory
 * @param verbose Run the 3dAllineate part herein with '-verb' (for verbosity)
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VAfniRefacerRunOutputs`).
 */
function v__afni_refacer_run(
    input_file: InputPathType,
    prefix: string,
    mode_deface: boolean = false,
    mode_reface: boolean = false,
    mode_reface_plus: boolean = false,
    mode_all: boolean = false,
    anonymize_output: boolean = false,
    cost_function: string | null = null,
    shell_option: string | null = null,
    no_clean: boolean = false,
    no_images: boolean = false,
    overwrite: boolean = false,
    verbose: boolean = false,
    runner: Runner | null = null,
): VAfniRefacerRunOutputs {
    const params = v__afni_refacer_run_params(input_file, prefix, mode_deface, mode_reface, mode_reface_plus, mode_all, anonymize_output, cost_function, shell_option, no_clean, no_images, overwrite, verbose)
    return v__afni_refacer_run_execute(params, runner);
}


export {
      VAfniRefacerRunOutputs,
      VAfniRefacerRunParameters,
      V__AFNI_REFACER_RUN_METADATA,
      v__afni_refacer_run,
      v__afni_refacer_run_execute,
      v__afni_refacer_run_params,
};
