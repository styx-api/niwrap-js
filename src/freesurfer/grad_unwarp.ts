// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const GRAD_UNWARP_METADATA: Metadata = {
    id: "c8a86a5da26d5d46183d8506a6feda47afabaf36.boutiques",
    name: "grad_unwarp",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface GradUnwarpParameters {
    "@type": "freesurfer.grad_unwarp";
    "infile": InputPathType;
    "seriesno"?: string | null | undefined;
    "unwarp_type"?: string | null | undefined;
    "nojac": boolean;
    "corfov": boolean;
    "cor": boolean;
    "interp"?: string | null | undefined;
    "outfile": string;
    "matlab_binary"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.grad_unwarp": grad_unwarp_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.grad_unwarp": grad_unwarp_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `grad_unwarp(...)`.
 *
 * @interface
 */
interface GradUnwarpOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output file in MGH format
     */
    mgh_output: OutputPathType;
    /**
     * Output directory in COR format
     */
    cor_output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param infile Input file or directory (dcmfile, dcmdir, or mghfile)
 * @param outfile Output file in MGH format
 * @param seriesno DICOM series number, required if input is a directory
 * @param unwarp_type Gradient unwarping displacement type or map file (required for MGH file)
 * @param nojac Do not perform jacobian correction when unwarping
 * @param corfov Resample to Coronal FOV
 * @param cor Output in COR format instead of MGH
 * @param interp Interpolation method (cubic, linear, nearest, spline)
 * @param matlab_binary Path to the Matlab binary, version 6.5 or higher required
 *
 * @returns Parameter dictionary
 */
function grad_unwarp_params(
    infile: InputPathType,
    outfile: string,
    seriesno: string | null = null,
    unwarp_type: string | null = null,
    nojac: boolean = false,
    corfov: boolean = false,
    cor: boolean = false,
    interp: string | null = null,
    matlab_binary: string | null = "/space/lyon/6/pubsw/common/matlab/6.5/bin/matlab",
): GradUnwarpParameters {
    const params = {
        "@type": "freesurfer.grad_unwarp" as const,
        "infile": infile,
        "nojac": nojac,
        "corfov": corfov,
        "cor": cor,
        "outfile": outfile,
    };
    if (seriesno !== null) {
        params["seriesno"] = seriesno;
    }
    if (unwarp_type !== null) {
        params["unwarp_type"] = unwarp_type;
    }
    if (interp !== null) {
        params["interp"] = interp;
    }
    if (matlab_binary !== null) {
        params["matlab_binary"] = matlab_binary;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function grad_unwarp_cargs(
    params: GradUnwarpParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("grad_unwarp");
    cargs.push(execution.inputFile((params["infile"] ?? null)));
    if ((params["seriesno"] ?? null) !== null) {
        cargs.push(
            "-s",
            (params["seriesno"] ?? null)
        );
    }
    if ((params["unwarp_type"] ?? null) !== null) {
        cargs.push(
            "-unwarp",
            (params["unwarp_type"] ?? null)
        );
    }
    if ((params["nojac"] ?? null)) {
        cargs.push("-nojac");
    }
    if ((params["corfov"] ?? null)) {
        cargs.push("-corfov");
    }
    if ((params["cor"] ?? null)) {
        cargs.push("-cor");
    }
    if ((params["interp"] ?? null) !== null) {
        cargs.push(
            "-interp",
            (params["interp"] ?? null)
        );
    }
    cargs.push(
        "-o",
        (params["outfile"] ?? null)
    );
    if ((params["matlab_binary"] ?? null) !== null) {
        cargs.push(
            "-matlab",
            (params["matlab_binary"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function grad_unwarp_outputs(
    params: GradUnwarpParameters,
    execution: Execution,
): GradUnwarpOutputs {
    const ret: GradUnwarpOutputs = {
        root: execution.outputFile("."),
        mgh_output: execution.outputFile([(params["outfile"] ?? null)].join('')),
        cor_output: execution.outputFile([(params["outfile"] ?? null), "/"].join('')),
    };
    return ret;
}


/**
 * Convert, dewarp, and resample DICOM files to MGH files.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `GradUnwarpOutputs`).
 */
function grad_unwarp_execute(
    params: GradUnwarpParameters,
    runner: Runner | null = null,
): GradUnwarpOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(GRAD_UNWARP_METADATA);
    params = execution.params(params)
    const cargs = grad_unwarp_cargs(params, execution)
    const ret = grad_unwarp_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Convert, dewarp, and resample DICOM files to MGH files.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param infile Input file or directory (dcmfile, dcmdir, or mghfile)
 * @param outfile Output file in MGH format
 * @param seriesno DICOM series number, required if input is a directory
 * @param unwarp_type Gradient unwarping displacement type or map file (required for MGH file)
 * @param nojac Do not perform jacobian correction when unwarping
 * @param corfov Resample to Coronal FOV
 * @param cor Output in COR format instead of MGH
 * @param interp Interpolation method (cubic, linear, nearest, spline)
 * @param matlab_binary Path to the Matlab binary, version 6.5 or higher required
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `GradUnwarpOutputs`).
 */
function grad_unwarp(
    infile: InputPathType,
    outfile: string,
    seriesno: string | null = null,
    unwarp_type: string | null = null,
    nojac: boolean = false,
    corfov: boolean = false,
    cor: boolean = false,
    interp: string | null = null,
    matlab_binary: string | null = "/space/lyon/6/pubsw/common/matlab/6.5/bin/matlab",
    runner: Runner | null = null,
): GradUnwarpOutputs {
    const params = grad_unwarp_params(infile, outfile, seriesno, unwarp_type, nojac, corfov, cor, interp, matlab_binary)
    return grad_unwarp_execute(params, runner);
}


export {
      GRAD_UNWARP_METADATA,
      GradUnwarpOutputs,
      GradUnwarpParameters,
      grad_unwarp,
      grad_unwarp_execute,
      grad_unwarp_params,
};
