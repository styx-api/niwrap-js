// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const QATOOLS_PY_METADATA: Metadata = {
    id: "4d18f6a5ac40096b70dbf7ebf5df96bcffd4d1fe.boutiques",
    name: "qatools.py",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface QatoolsPyParameters {
    "__STYXTYPE__": "qatools.py";
    "subjects_dir": string;
    "output_dir": string;
    "subjects"?: Array<string> | null | undefined;
    "screenshots": boolean;
    "fornix": boolean;
    "outlier": boolean;
    "outlier_table"?: InputPathType | null | undefined;
}


function dynCargs(
    t: string,
): Function | undefined {
    /**
     * Get build cargs function by command type.
    
     * @param t Command type
    
     * @returns Build cargs function.
     */
    const cargsFuncs = {
        "qatools.py": qatools_py_cargs,
    };
    return cargsFuncs[t];
}


function dynOutputs(
    t: string,
): Function | undefined {
    /**
     * Get build outputs function by command type.
    
     * @param t Command type
    
     * @returns Build outputs function.
     */
    const outputsFuncs = {
        "qatools.py": qatools_py_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `qatools_py(...)`.
 *
 * @interface
 */
interface QatoolsPyOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Summary CSV file containing quality metrics.
     */
    summary_csv: OutputPathType;
    /**
     * Directory containing screenshots of individual brains if screenshots option is selected.
     */
    screenshots_output: OutputPathType;
}


function qatools_py_params(
    subjects_dir: string,
    output_dir: string,
    subjects: Array<string> | null = null,
    screenshots: boolean = false,
    fornix: boolean = false,
    outlier: boolean = false,
    outlier_table: InputPathType | null = null,
): QatoolsPyParameters {
    /**
     * Build parameters.
    
     * @param subjects_dir Subjects directory containing a set of Freesurfer 6.0 processed individual datasets.
     * @param output_dir Output directory for the generated results.
     * @param subjects List of subject IDs. If omitted, all suitable subdirectories within the subjects directory will be used.
     * @param screenshots Create screenshots of individual brains.
     * @param fornix Check fornix segmentation.
     * @param outlier Run outlier detection.
     * @param outlier_table Specify normative values for outlier detection.
    
     * @returns Parameter dictionary
     */
    const params = {
        "__STYXTYPE__": "qatools.py" as const,
        "subjects_dir": subjects_dir,
        "output_dir": output_dir,
        "screenshots": screenshots,
        "fornix": fornix,
        "outlier": outlier,
    };
    if (subjects !== null) {
        params["subjects"] = subjects;
    }
    if (outlier_table !== null) {
        params["outlier_table"] = outlier_table;
    }
    return params;
}


function qatools_py_cargs(
    params: QatoolsPyParameters,
    execution: Execution,
): string[] {
    /**
     * Build command-line arguments from parameters.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Command-line arguments.
     */
    const cargs: string[] = [];
    cargs.push("qatools.py");
    cargs.push(
        "--subjects_dir",
        (params["subjects_dir"] ?? null)
    );
    cargs.push(
        "--output_dir",
        (params["output_dir"] ?? null)
    );
    if ((params["subjects"] ?? null) !== null) {
        cargs.push(
            "--subjects",
            ...(params["subjects"] ?? null)
        );
    }
    if ((params["screenshots"] ?? null)) {
        cargs.push("--screenshots");
    }
    if ((params["fornix"] ?? null)) {
        cargs.push("--fornix");
    }
    if ((params["outlier"] ?? null)) {
        cargs.push("--outlier");
    }
    if ((params["outlier_table"] ?? null) !== null) {
        cargs.push(
            "--outlier-table",
            execution.inputFile((params["outlier_table"] ?? null))
        );
    }
    return cargs;
}


function qatools_py_outputs(
    params: QatoolsPyParameters,
    execution: Execution,
): QatoolsPyOutputs {
    /**
     * Build outputs object containing output file paths and possibly stdout/stderr.
    
     * @param params The parameters.
     * @param execution The execution object for resolving input paths.
    
     * @returns Outputs object.
     */
    const ret: QatoolsPyOutputs = {
        root: execution.outputFile("."),
        summary_csv: execution.outputFile([(params["output_dir"] ?? null), "/summary.csv"].join('')),
        screenshots_output: execution.outputFile([(params["output_dir"] ?? null), "/screenshots/"].join('')),
    };
    return ret;
}


function qatools_py_execute(
    params: QatoolsPyParameters,
    execution: Execution,
): QatoolsPyOutputs {
    /**
     * A tool to compute quality metrics from Freesurfer 6.0 analysis results.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param params The parameters.
     * @param execution The execution object.
    
     * @returns NamedTuple of outputs (described in `QatoolsPyOutputs`).
     */
    params = execution.params(params)
    const cargs = qatools_py_cargs(params, execution)
    const ret = qatools_py_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


function qatools_py(
    subjects_dir: string,
    output_dir: string,
    subjects: Array<string> | null = null,
    screenshots: boolean = false,
    fornix: boolean = false,
    outlier: boolean = false,
    outlier_table: InputPathType | null = null,
    runner: Runner | null = null,
): QatoolsPyOutputs {
    /**
     * A tool to compute quality metrics from Freesurfer 6.0 analysis results.
     * 
     * Author: FreeSurfer Developers
     * 
     * URL: https://github.com/freesurfer/freesurfer
    
     * @param subjects_dir Subjects directory containing a set of Freesurfer 6.0 processed individual datasets.
     * @param output_dir Output directory for the generated results.
     * @param subjects List of subject IDs. If omitted, all suitable subdirectories within the subjects directory will be used.
     * @param screenshots Create screenshots of individual brains.
     * @param fornix Check fornix segmentation.
     * @param outlier Run outlier detection.
     * @param outlier_table Specify normative values for outlier detection.
     * @param runner Command runner
    
     * @returns NamedTuple of outputs (described in `QatoolsPyOutputs`).
     */
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(QATOOLS_PY_METADATA);
    const params = qatools_py_params(subjects_dir, output_dir, subjects, screenshots, fornix, outlier, outlier_table)
    return qatools_py_execute(params, execution);
}


export {
      QATOOLS_PY_METADATA,
      QatoolsPyOutputs,
      QatoolsPyParameters,
      qatools_py,
      qatools_py_params,
};
