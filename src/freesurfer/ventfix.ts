// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const VENTFIX_METADATA: Metadata = {
    id: "e71901d7b79bb5fd53811d2c81452b885bbecc11.boutiques",
    name: "ventfix",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface VentfixParameters {
    "@type": "freesurfer.ventfix";
    "subject_dir": string;
    "option1"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.ventfix": ventfix_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.ventfix": ventfix_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `ventfix(...)`.
 *
 * @interface
 */
interface VentfixOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output image with fixed ventricles
     */
    fixed_ventricles: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param subject_dir Path to the subject's directory containing MRI scans.
 * @param option1 Description of option 1
 *
 * @returns Parameter dictionary
 */
function ventfix_params(
    subject_dir: string,
    option1: string | null = null,
): VentfixParameters {
    const params = {
        "@type": "freesurfer.ventfix" as const,
        "subject_dir": subject_dir,
    };
    if (option1 !== null) {
        params["option1"] = option1;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function ventfix_cargs(
    params: VentfixParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("ventfix");
    cargs.push((params["subject_dir"] ?? null));
    if ((params["option1"] ?? null) !== null) {
        cargs.push(
            "--option1",
            (params["option1"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function ventfix_outputs(
    params: VentfixParameters,
    execution: Execution,
): VentfixOutputs {
    const ret: VentfixOutputs = {
        root: execution.outputFile("."),
        fixed_ventricles: execution.outputFile([(params["subject_dir"] ?? null), "/fixed_ventricles.nii.gz"].join('')),
    };
    return ret;
}


/**
 * Tool for fixing ventricles in MRI scans.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VentfixOutputs`).
 */
function ventfix_execute(
    params: VentfixParameters,
    runner: Runner | null = null,
): VentfixOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(VENTFIX_METADATA);
    params = execution.params(params)
    const cargs = ventfix_cargs(params, execution)
    const ret = ventfix_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Tool for fixing ventricles in MRI scans.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param subject_dir Path to the subject's directory containing MRI scans.
 * @param option1 Description of option 1
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `VentfixOutputs`).
 */
function ventfix(
    subject_dir: string,
    option1: string | null = null,
    runner: Runner | null = null,
): VentfixOutputs {
    const params = ventfix_params(subject_dir, option1)
    return ventfix_execute(params, runner);
}


export {
      VENTFIX_METADATA,
      VentfixOutputs,
      VentfixParameters,
      ventfix,
      ventfix_execute,
      ventfix_params,
};
