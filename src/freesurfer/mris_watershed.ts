// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRIS_WATERSHED_METADATA: Metadata = {
    id: "00a449a8a6f51c196100ff275164c3c37acfd4fd.boutiques",
    name: "mris_watershed",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MrisWatershedParameters {
    "@type": "freesurfer.mris_watershed";
    "input_surface": InputPathType;
    "input_gradient_field": InputPathType;
    "output_annotation": string;
    "max_clusters"?: number | null | undefined;
    "mask_label"?: string | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mris_watershed": mris_watershed_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mris_watershed": mris_watershed_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mris_watershed(...)`.
 *
 * @interface
 */
interface MrisWatershedOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The resulting annotation file from the watershed transform
     */
    output_annotation_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_surface Input surface file
 * @param input_gradient_field Input gradient field file
 * @param output_annotation Output annotation file
 * @param max_clusters Set the number of maximum clusters
 * @param mask_label Read in and mask the input volume that is not in the specified label
 *
 * @returns Parameter dictionary
 */
function mris_watershed_params(
    input_surface: InputPathType,
    input_gradient_field: InputPathType,
    output_annotation: string,
    max_clusters: number | null = null,
    mask_label: string | null = null,
): MrisWatershedParameters {
    const params = {
        "@type": "freesurfer.mris_watershed" as const,
        "input_surface": input_surface,
        "input_gradient_field": input_gradient_field,
        "output_annotation": output_annotation,
    };
    if (max_clusters !== null) {
        params["max_clusters"] = max_clusters;
    }
    if (mask_label !== null) {
        params["mask_label"] = mask_label;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mris_watershed_cargs(
    params: MrisWatershedParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mris_watershed");
    cargs.push(execution.inputFile((params["input_surface"] ?? null)));
    cargs.push(execution.inputFile((params["input_gradient_field"] ?? null)));
    cargs.push((params["output_annotation"] ?? null));
    if ((params["max_clusters"] ?? null) !== null) {
        cargs.push(
            "-M",
            String((params["max_clusters"] ?? null))
        );
    }
    if ((params["mask_label"] ?? null) !== null) {
        cargs.push(
            "-mask_label",
            (params["mask_label"] ?? null)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mris_watershed_outputs(
    params: MrisWatershedParameters,
    execution: Execution,
): MrisWatershedOutputs {
    const ret: MrisWatershedOutputs = {
        root: execution.outputFile("."),
        output_annotation_file: execution.outputFile([(params["output_annotation"] ?? null)].join('')),
    };
    return ret;
}


/**
 * This program computes the watershed transform on the surface of an intensity gradient and writes the resulting measurement into a .annot file.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisWatershedOutputs`).
 */
function mris_watershed_execute(
    params: MrisWatershedParameters,
    runner: Runner | null = null,
): MrisWatershedOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRIS_WATERSHED_METADATA);
    params = execution.params(params)
    const cargs = mris_watershed_cargs(params, execution)
    const ret = mris_watershed_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * This program computes the watershed transform on the surface of an intensity gradient and writes the resulting measurement into a .annot file.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_surface Input surface file
 * @param input_gradient_field Input gradient field file
 * @param output_annotation Output annotation file
 * @param max_clusters Set the number of maximum clusters
 * @param mask_label Read in and mask the input volume that is not in the specified label
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MrisWatershedOutputs`).
 */
function mris_watershed(
    input_surface: InputPathType,
    input_gradient_field: InputPathType,
    output_annotation: string,
    max_clusters: number | null = null,
    mask_label: string | null = null,
    runner: Runner | null = null,
): MrisWatershedOutputs {
    const params = mris_watershed_params(input_surface, input_gradient_field, output_annotation, max_clusters, mask_label)
    return mris_watershed_execute(params, runner);
}


export {
      MRIS_WATERSHED_METADATA,
      MrisWatershedOutputs,
      MrisWatershedParameters,
      mris_watershed,
      mris_watershed_execute,
      mris_watershed_params,
};
