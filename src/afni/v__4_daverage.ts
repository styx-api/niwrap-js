// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const V__4_DAVERAGE_METADATA: Metadata = {
    id: "cfb332d0717a18e6198e0993e02a43b342500a1f.boutiques",
    name: "@4Daverage",
    package: "afni",
    container_image_tag: "afni/afni_make_build:AFNI_24.2.06",
};


interface V4DaverageParameters {
    "@type"?: "afni/@4Daverage";
    "output_prefix": string;
    "input_files": Array<InputPathType>;
}
type V4DaverageParametersTagged = Required<Pick<V4DaverageParameters, '@type'>> & V4DaverageParameters;


/**
 * Output object returned when calling `V4DaverageParameters(...)`.
 *
 * @interface
 */
interface V4DaverageOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param output_prefix Prefix for the output 3D+t brick
 * @param input_files List of 3D+t brick filenames to be averaged (e.g., brick1+orig, brick2+orig). Can use wildcards.
 *
 * @returns Parameter dictionary
 */
function v__4_daverage_params(
    output_prefix: string,
    input_files: Array<InputPathType>,
): V4DaverageParametersTagged {
    const params = {
        "@type": "afni/@4Daverage" as const,
        "output_prefix": output_prefix,
        "input_files": input_files,
    };
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function v__4_daverage_cargs(
    params: V4DaverageParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("@4Daverage");
    cargs.push((params["output_prefix"] ?? null));
    cargs.push(...(params["input_files"] ?? null).map(f => execution.inputFile(f)));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function v__4_daverage_outputs(
    params: V4DaverageParameters,
    execution: Execution,
): V4DaverageOutputs {
    const ret: V4DaverageOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * @4Daverage
 *
 * Script for computing average 3D+time bricks using 3Dcalc.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V4DaverageOutputs`).
 */
function v__4_daverage_execute(
    params: V4DaverageParameters,
    runner: Runner | null = null,
): V4DaverageOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(V__4_DAVERAGE_METADATA);
    params = execution.params(params)
    const cargs = v__4_daverage_cargs(params, execution)
    const ret = v__4_daverage_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * @4Daverage
 *
 * Script for computing average 3D+time bricks using 3Dcalc.
 *
 * Author: AFNI Developers
 *
 * URL: https://afni.nimh.nih.gov/
 *
 * @param output_prefix Prefix for the output 3D+t brick
 * @param input_files List of 3D+t brick filenames to be averaged (e.g., brick1+orig, brick2+orig). Can use wildcards.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `V4DaverageOutputs`).
 */
function v__4_daverage(
    output_prefix: string,
    input_files: Array<InputPathType>,
    runner: Runner | null = null,
): V4DaverageOutputs {
    const params = v__4_daverage_params(output_prefix, input_files)
    return v__4_daverage_execute(params, runner);
}


export {
      V4DaverageOutputs,
      V__4_DAVERAGE_METADATA,
      v__4_daverage,
      v__4_daverage_execute,
      v__4_daverage_params,
};
