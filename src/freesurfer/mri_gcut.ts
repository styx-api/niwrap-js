// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_GCUT_METADATA: Metadata = {
    id: "a14107292a30b2b35f5cae7aa2137f0efa242639.boutiques",
    name: "mri_gcut",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriGcutParameters {
    "@type": "freesurfer.mri_gcut";
    "wmmask_110": boolean;
    "mult_file"?: InputPathType | null | undefined;
    "threshold_value"?: number | null | undefined;
    "infile": InputPathType;
    "outfile": string;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_gcut": mri_gcut_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_gcut": mri_gcut_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_gcut(...)`.
 *
 * @interface
 */
interface MriGcutOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * The output file containing the skull-stripped brain volume.
     */
    output_mask_file: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param infile Input brain volume file, e.g. T1.mgz
 * @param outfile Output file name, e.g. brainmask.auto.mgz
 * @param wmmask_110 Use voxels with intensity 110 as white matter mask (when applied on T1.mgz, FreeSurfer only)
 * @param mult_file Intersect the skull-stripped 'in_filename' and an existing skull-stripped volume specified by 'filename', storing the result in 'out_filename'.
 * @param threshold_value Set threshold to value (%) of WM intensity, where the value should be >0 and <1; defaults to 0.40.
 *
 * @returns Parameter dictionary
 */
function mri_gcut_params(
    infile: InputPathType,
    outfile: string,
    wmmask_110: boolean = false,
    mult_file: InputPathType | null = null,
    threshold_value: number | null = null,
): MriGcutParameters {
    const params = {
        "@type": "freesurfer.mri_gcut" as const,
        "wmmask_110": wmmask_110,
        "infile": infile,
        "outfile": outfile,
    };
    if (mult_file !== null) {
        params["mult_file"] = mult_file;
    }
    if (threshold_value !== null) {
        params["threshold_value"] = threshold_value;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_gcut_cargs(
    params: MriGcutParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_gcut");
    if ((params["wmmask_110"] ?? null)) {
        cargs.push("-110");
    }
    if ((params["mult_file"] ?? null) !== null) {
        cargs.push(
            "-mult",
            execution.inputFile((params["mult_file"] ?? null))
        );
    }
    if ((params["threshold_value"] ?? null) !== null) {
        cargs.push(
            "-T",
            String((params["threshold_value"] ?? null))
        );
    }
    cargs.push(execution.inputFile((params["infile"] ?? null)));
    cargs.push((params["outfile"] ?? null));
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_gcut_outputs(
    params: MriGcutParameters,
    execution: Execution,
): MriGcutOutputs {
    const ret: MriGcutOutputs = {
        root: execution.outputFile("."),
        output_mask_file: execution.outputFile([(params["outfile"] ?? null)].join('')),
    };
    return ret;
}


/**
 * Skull stripping algorithm based on graph cuts.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `MriGcutOutputs`).
 */
function mri_gcut_execute(
    params: MriGcutParameters,
    execution: Execution,
): MriGcutOutputs {
    params = execution.params(params)
    const cargs = mri_gcut_cargs(params, execution)
    const ret = mri_gcut_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Skull stripping algorithm based on graph cuts.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param infile Input brain volume file, e.g. T1.mgz
 * @param outfile Output file name, e.g. brainmask.auto.mgz
 * @param wmmask_110 Use voxels with intensity 110 as white matter mask (when applied on T1.mgz, FreeSurfer only)
 * @param mult_file Intersect the skull-stripped 'in_filename' and an existing skull-stripped volume specified by 'filename', storing the result in 'out_filename'.
 * @param threshold_value Set threshold to value (%) of WM intensity, where the value should be >0 and <1; defaults to 0.40.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriGcutOutputs`).
 */
function mri_gcut(
    infile: InputPathType,
    outfile: string,
    wmmask_110: boolean = false,
    mult_file: InputPathType | null = null,
    threshold_value: number | null = null,
    runner: Runner | null = null,
): MriGcutOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_GCUT_METADATA);
    const params = mri_gcut_params(infile, outfile, wmmask_110, mult_file, threshold_value)
    return mri_gcut_execute(params, execution);
}


export {
      MRI_GCUT_METADATA,
      MriGcutOutputs,
      MriGcutParameters,
      mri_gcut,
      mri_gcut_cargs,
      mri_gcut_execute,
      mri_gcut_outputs,
      mri_gcut_params,
};
