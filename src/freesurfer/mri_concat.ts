// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_CONCAT_METADATA: Metadata = {
    id: "9bacb3d3703c2f322bf0d2e254a93d1071dfb848.boutiques",
    name: "mri_concat",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriConcatParameters {
    "@type": "freesurfer.mri_concat";
    "input_files": Array<InputPathType>;
    "output_file": string;
    "file_list"?: string | null | undefined;
    "paired_sum": boolean;
    "paired_avg": boolean;
    "paired_diff": boolean;
    "paired_diff_norm": boolean;
    "paired_diff_norm1": boolean;
    "paired_diff_norm2": boolean;
    "norm_mean": boolean;
    "norm1": boolean;
    "matrix"?: InputPathType | null | undefined;
    "frame_weight"?: InputPathType | null | undefined;
    "norm_weight": boolean;
    "group_mean"?: number | null | undefined;
    "combine": boolean;
    "keep_datatype": boolean;
    "abs": boolean;
    "pos": boolean;
    "neg": boolean;
    "mean": boolean;
    "median": boolean;
    "mean_div_n": boolean;
    "sum": boolean;
    "var": boolean;
    "std": boolean;
    "max": boolean;
    "max_index": boolean;
    "max_index_prune": boolean;
    "max_index_add"?: number | null | undefined;
    "min": boolean;
    "replicate_times"?: number | null | undefined;
    "fnorm": boolean;
    "conjunction": boolean;
    "vote": boolean;
    "sort": boolean;
    "temporal_ar1"?: number | null | undefined;
    "prune": boolean;
    "pca": boolean;
    "pca_mask"?: InputPathType | null | undefined;
    "scm": boolean;
    "zconcat"?: string | null | undefined;
    "max_bonfcor": boolean;
    "multiply"?: number | null | undefined;
    "add"?: number | null | undefined;
    "mask_file"?: InputPathType | null | undefined;
    "rms": boolean;
    "no_check": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_concat": mri_concat_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_concat(...)`.
 *
 * @interface
 */
interface MriConcatOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_files Input image files (e.g. file1.mgh file2.mgh ...).
 * @param output_file Output file name (e.g. output.mgh).
 * @param file_list List file containing a text list of files to process (up to 400000 files).
 * @param paired_sum Compute paired sum (1+2, 3+4, etc).
 * @param paired_avg Compute paired average (1+2, 3+4, etc).
 * @param paired_diff Compute paired difference (1-2, 3-4, etc).
 * @param paired_diff_norm Compute paired difference normalized by TP1,2 average.
 * @param paired_diff_norm1 Compute paired difference normalized by TP1.
 * @param paired_diff_norm2 Compute paired difference normalized by TP2.
 * @param norm_mean Normalize frames by mean of all time points.
 * @param norm1 Normalize frames by first time point (TP1).
 * @param matrix Multiply by matrix from ASCII file.
 * @param frame_weight Weight each frame by values in ASCII file (one value per frame).
 * @param norm_weight Normalize frames to sum to 1 after weighting.
 * @param group_mean Create matrix to average Ng groups, Nper=Ntot/Ng.
 * @param combine Average frames from non-zero voxels.
 * @param keep_datatype Write output in the same datatype as input (default is Float format).
 * @param abs Take absolute value of input.
 * @param pos Set input negatives to 0.
 * @param neg Set input positives to 0.
 * @param mean Compute mean of concatenated volumes.
 * @param median Compute median of concatenated volumes.
 * @param mean_div_n Compute mean divided by number of frames.
 * @param sum Compute sum of concatenated volumes.
 * @param var_ Compute variance of concatenated volumes.
 * @param std Compute standard deviation of concatenated volumes.
 * @param max Compute maximum of concatenated volumes.
 * @param max_index Compute index of maximum of concatenated volumes.
 * @param max_index_prune Set max index to 0 where all frames are 0.
 * @param max_index_add Add value to non-zero max indices.
 * @param min Compute minimum of concatenated volumes.
 * @param replicate_times Replicate N times over frames.
 * @param fnorm Normalize time series at each voxel.
 * @param conjunction Compute voxel-wise conjunction of concatenated volumes.
 * @param vote Most frequent value at each voxel and fraction of occurrences.
 * @param sort Sort each voxel by ascending frame value.
 * @param temporal_ar1 Compute temporal AR1 with degree of freedom adjustment.
 * @param prune Set voxel value to 0 unless all frames are non-zero.
 * @param pca Compute and output principal component analysis (PCA).
 * @param pca_mask Mask used to select voxels for PCA (mask > 0.5).
 * @param scm Compute spatial covariance matrix.
 * @param zconcat Concatenate in slice direction skipping nskip slices.
 * @param max_bonfcor Compute maximum and Bonferroni correct.
 * @param multiply Multiply volumes by value.
 * @param add Add value to volumes.
 * @param mask_file Mask file used with vote or sort.
 * @param rms Compute root mean square of concatenated volumes.
 * @param no_check Do not check inputs.
 *
 * @returns Parameter dictionary
 */
function mri_concat_params(
    input_files: Array<InputPathType>,
    output_file: string,
    file_list: string | null = null,
    paired_sum: boolean = false,
    paired_avg: boolean = false,
    paired_diff: boolean = false,
    paired_diff_norm: boolean = false,
    paired_diff_norm1: boolean = false,
    paired_diff_norm2: boolean = false,
    norm_mean: boolean = false,
    norm1: boolean = false,
    matrix: InputPathType | null = null,
    frame_weight: InputPathType | null = null,
    norm_weight: boolean = false,
    group_mean: number | null = null,
    combine: boolean = false,
    keep_datatype: boolean = false,
    abs: boolean = false,
    pos: boolean = false,
    neg: boolean = false,
    mean: boolean = false,
    median: boolean = false,
    mean_div_n: boolean = false,
    sum: boolean = false,
    var_: boolean = false,
    std: boolean = false,
    max: boolean = false,
    max_index: boolean = false,
    max_index_prune: boolean = false,
    max_index_add: number | null = null,
    min: boolean = false,
    replicate_times: number | null = null,
    fnorm: boolean = false,
    conjunction: boolean = false,
    vote: boolean = false,
    sort: boolean = false,
    temporal_ar1: number | null = null,
    prune: boolean = false,
    pca: boolean = false,
    pca_mask: InputPathType | null = null,
    scm: boolean = false,
    zconcat: string | null = null,
    max_bonfcor: boolean = false,
    multiply: number | null = null,
    add: number | null = null,
    mask_file: InputPathType | null = null,
    rms: boolean = false,
    no_check: boolean = false,
): MriConcatParameters {
    const params = {
        "@type": "freesurfer.mri_concat" as const,
        "input_files": input_files,
        "output_file": output_file,
        "paired_sum": paired_sum,
        "paired_avg": paired_avg,
        "paired_diff": paired_diff,
        "paired_diff_norm": paired_diff_norm,
        "paired_diff_norm1": paired_diff_norm1,
        "paired_diff_norm2": paired_diff_norm2,
        "norm_mean": norm_mean,
        "norm1": norm1,
        "norm_weight": norm_weight,
        "combine": combine,
        "keep_datatype": keep_datatype,
        "abs": abs,
        "pos": pos,
        "neg": neg,
        "mean": mean,
        "median": median,
        "mean_div_n": mean_div_n,
        "sum": sum,
        "var": var_,
        "std": std,
        "max": max,
        "max_index": max_index,
        "max_index_prune": max_index_prune,
        "min": min,
        "fnorm": fnorm,
        "conjunction": conjunction,
        "vote": vote,
        "sort": sort,
        "prune": prune,
        "pca": pca,
        "scm": scm,
        "max_bonfcor": max_bonfcor,
        "rms": rms,
        "no_check": no_check,
    };
    if (file_list !== null) {
        params["file_list"] = file_list;
    }
    if (matrix !== null) {
        params["matrix"] = matrix;
    }
    if (frame_weight !== null) {
        params["frame_weight"] = frame_weight;
    }
    if (group_mean !== null) {
        params["group_mean"] = group_mean;
    }
    if (max_index_add !== null) {
        params["max_index_add"] = max_index_add;
    }
    if (replicate_times !== null) {
        params["replicate_times"] = replicate_times;
    }
    if (temporal_ar1 !== null) {
        params["temporal_ar1"] = temporal_ar1;
    }
    if (pca_mask !== null) {
        params["pca_mask"] = pca_mask;
    }
    if (zconcat !== null) {
        params["zconcat"] = zconcat;
    }
    if (multiply !== null) {
        params["multiply"] = multiply;
    }
    if (add !== null) {
        params["add"] = add;
    }
    if (mask_file !== null) {
        params["mask_file"] = mask_file;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_concat_cargs(
    params: MriConcatParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_concat");
    cargs.push(...(params["input_files"] ?? null).map(f => execution.inputFile(f)));
    cargs.push(
        "--o",
        (params["output_file"] ?? null)
    );
    if ((params["file_list"] ?? null) !== null) {
        cargs.push(
            "--f",
            (params["file_list"] ?? null)
        );
    }
    if ((params["paired_sum"] ?? null)) {
        cargs.push("--paired-sum");
    }
    if ((params["paired_avg"] ?? null)) {
        cargs.push("--paired-avg");
    }
    if ((params["paired_diff"] ?? null)) {
        cargs.push("--paired-diff");
    }
    if ((params["paired_diff_norm"] ?? null)) {
        cargs.push("--paired-diff-norm");
    }
    if ((params["paired_diff_norm1"] ?? null)) {
        cargs.push("--paired-diff-norm1");
    }
    if ((params["paired_diff_norm2"] ?? null)) {
        cargs.push("--paired-diff-norm2");
    }
    if ((params["norm_mean"] ?? null)) {
        cargs.push("--norm-mean");
    }
    if ((params["norm1"] ?? null)) {
        cargs.push("--norm1");
    }
    if ((params["matrix"] ?? null) !== null) {
        cargs.push(
            "--mtx",
            execution.inputFile((params["matrix"] ?? null))
        );
    }
    if ((params["frame_weight"] ?? null) !== null) {
        cargs.push(
            "--w",
            execution.inputFile((params["frame_weight"] ?? null))
        );
    }
    if ((params["norm_weight"] ?? null)) {
        cargs.push("--wn");
    }
    if ((params["group_mean"] ?? null) !== null) {
        cargs.push(
            "--gmean",
            String((params["group_mean"] ?? null))
        );
    }
    if ((params["combine"] ?? null)) {
        cargs.push("--combine");
    }
    if ((params["keep_datatype"] ?? null)) {
        cargs.push("--keep-datatype");
    }
    if ((params["abs"] ?? null)) {
        cargs.push("--abs");
    }
    if ((params["pos"] ?? null)) {
        cargs.push("--pos");
    }
    if ((params["neg"] ?? null)) {
        cargs.push("--neg");
    }
    if ((params["mean"] ?? null)) {
        cargs.push("--mean");
    }
    if ((params["median"] ?? null)) {
        cargs.push("--median");
    }
    if ((params["mean_div_n"] ?? null)) {
        cargs.push("--mean-div-n");
    }
    if ((params["sum"] ?? null)) {
        cargs.push("--sum");
    }
    if ((params["var"] ?? null)) {
        cargs.push("--var");
    }
    if ((params["std"] ?? null)) {
        cargs.push("--std");
    }
    if ((params["max"] ?? null)) {
        cargs.push("--max");
    }
    if ((params["max_index"] ?? null)) {
        cargs.push("--max-index");
    }
    if ((params["max_index_prune"] ?? null)) {
        cargs.push("--max-index-prune");
    }
    if ((params["max_index_add"] ?? null) !== null) {
        cargs.push(
            "--max-index-add",
            String((params["max_index_add"] ?? null))
        );
    }
    if ((params["min"] ?? null)) {
        cargs.push("--min");
    }
    if ((params["replicate_times"] ?? null) !== null) {
        cargs.push(
            "--rep",
            String((params["replicate_times"] ?? null))
        );
    }
    if ((params["fnorm"] ?? null)) {
        cargs.push("--fnorm");
    }
    if ((params["conjunction"] ?? null)) {
        cargs.push("--conjunct");
    }
    if ((params["vote"] ?? null)) {
        cargs.push("--vote");
    }
    if ((params["sort"] ?? null)) {
        cargs.push("--sort");
    }
    if ((params["temporal_ar1"] ?? null) !== null) {
        cargs.push(
            "--tar1",
            String((params["temporal_ar1"] ?? null))
        );
    }
    if ((params["prune"] ?? null)) {
        cargs.push("--prune");
    }
    if ((params["pca"] ?? null)) {
        cargs.push("--pca");
    }
    if ((params["pca_mask"] ?? null) !== null) {
        cargs.push(
            "--pca-mask",
            execution.inputFile((params["pca_mask"] ?? null))
        );
    }
    if ((params["scm"] ?? null)) {
        cargs.push("--scm");
    }
    if ((params["zconcat"] ?? null) !== null) {
        cargs.push(
            "--zconcat",
            (params["zconcat"] ?? null)
        );
    }
    if ((params["max_bonfcor"] ?? null)) {
        cargs.push("--max-bonfcor");
    }
    if ((params["multiply"] ?? null) !== null) {
        cargs.push(
            "--mul",
            String((params["multiply"] ?? null))
        );
    }
    if ((params["add"] ?? null) !== null) {
        cargs.push(
            "--add",
            String((params["add"] ?? null))
        );
    }
    if ((params["mask_file"] ?? null) !== null) {
        cargs.push(
            "--mask",
            execution.inputFile((params["mask_file"] ?? null))
        );
    }
    if ((params["rms"] ?? null)) {
        cargs.push("--rms");
    }
    if ((params["no_check"] ?? null)) {
        cargs.push("--no-check");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_concat_outputs(
    params: MriConcatParameters,
    execution: Execution,
): MriConcatOutputs {
    const ret: MriConcatOutputs = {
        root: execution.outputFile("."),
    };
    return ret;
}


/**
 * mri_concat
 *
 * Concatenates input data sets.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriConcatOutputs`).
 */
function mri_concat_execute(
    params: MriConcatParameters,
    runner: Runner | null = null,
): MriConcatOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_CONCAT_METADATA);
    params = execution.params(params)
    const cargs = mri_concat_cargs(params, execution)
    const ret = mri_concat_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_concat
 *
 * Concatenates input data sets.
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_files Input image files (e.g. file1.mgh file2.mgh ...).
 * @param output_file Output file name (e.g. output.mgh).
 * @param file_list List file containing a text list of files to process (up to 400000 files).
 * @param paired_sum Compute paired sum (1+2, 3+4, etc).
 * @param paired_avg Compute paired average (1+2, 3+4, etc).
 * @param paired_diff Compute paired difference (1-2, 3-4, etc).
 * @param paired_diff_norm Compute paired difference normalized by TP1,2 average.
 * @param paired_diff_norm1 Compute paired difference normalized by TP1.
 * @param paired_diff_norm2 Compute paired difference normalized by TP2.
 * @param norm_mean Normalize frames by mean of all time points.
 * @param norm1 Normalize frames by first time point (TP1).
 * @param matrix Multiply by matrix from ASCII file.
 * @param frame_weight Weight each frame by values in ASCII file (one value per frame).
 * @param norm_weight Normalize frames to sum to 1 after weighting.
 * @param group_mean Create matrix to average Ng groups, Nper=Ntot/Ng.
 * @param combine Average frames from non-zero voxels.
 * @param keep_datatype Write output in the same datatype as input (default is Float format).
 * @param abs Take absolute value of input.
 * @param pos Set input negatives to 0.
 * @param neg Set input positives to 0.
 * @param mean Compute mean of concatenated volumes.
 * @param median Compute median of concatenated volumes.
 * @param mean_div_n Compute mean divided by number of frames.
 * @param sum Compute sum of concatenated volumes.
 * @param var_ Compute variance of concatenated volumes.
 * @param std Compute standard deviation of concatenated volumes.
 * @param max Compute maximum of concatenated volumes.
 * @param max_index Compute index of maximum of concatenated volumes.
 * @param max_index_prune Set max index to 0 where all frames are 0.
 * @param max_index_add Add value to non-zero max indices.
 * @param min Compute minimum of concatenated volumes.
 * @param replicate_times Replicate N times over frames.
 * @param fnorm Normalize time series at each voxel.
 * @param conjunction Compute voxel-wise conjunction of concatenated volumes.
 * @param vote Most frequent value at each voxel and fraction of occurrences.
 * @param sort Sort each voxel by ascending frame value.
 * @param temporal_ar1 Compute temporal AR1 with degree of freedom adjustment.
 * @param prune Set voxel value to 0 unless all frames are non-zero.
 * @param pca Compute and output principal component analysis (PCA).
 * @param pca_mask Mask used to select voxels for PCA (mask > 0.5).
 * @param scm Compute spatial covariance matrix.
 * @param zconcat Concatenate in slice direction skipping nskip slices.
 * @param max_bonfcor Compute maximum and Bonferroni correct.
 * @param multiply Multiply volumes by value.
 * @param add Add value to volumes.
 * @param mask_file Mask file used with vote or sort.
 * @param rms Compute root mean square of concatenated volumes.
 * @param no_check Do not check inputs.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriConcatOutputs`).
 */
function mri_concat(
    input_files: Array<InputPathType>,
    output_file: string,
    file_list: string | null = null,
    paired_sum: boolean = false,
    paired_avg: boolean = false,
    paired_diff: boolean = false,
    paired_diff_norm: boolean = false,
    paired_diff_norm1: boolean = false,
    paired_diff_norm2: boolean = false,
    norm_mean: boolean = false,
    norm1: boolean = false,
    matrix: InputPathType | null = null,
    frame_weight: InputPathType | null = null,
    norm_weight: boolean = false,
    group_mean: number | null = null,
    combine: boolean = false,
    keep_datatype: boolean = false,
    abs: boolean = false,
    pos: boolean = false,
    neg: boolean = false,
    mean: boolean = false,
    median: boolean = false,
    mean_div_n: boolean = false,
    sum: boolean = false,
    var_: boolean = false,
    std: boolean = false,
    max: boolean = false,
    max_index: boolean = false,
    max_index_prune: boolean = false,
    max_index_add: number | null = null,
    min: boolean = false,
    replicate_times: number | null = null,
    fnorm: boolean = false,
    conjunction: boolean = false,
    vote: boolean = false,
    sort: boolean = false,
    temporal_ar1: number | null = null,
    prune: boolean = false,
    pca: boolean = false,
    pca_mask: InputPathType | null = null,
    scm: boolean = false,
    zconcat: string | null = null,
    max_bonfcor: boolean = false,
    multiply: number | null = null,
    add: number | null = null,
    mask_file: InputPathType | null = null,
    rms: boolean = false,
    no_check: boolean = false,
    runner: Runner | null = null,
): MriConcatOutputs {
    const params = mri_concat_params(input_files, output_file, file_list, paired_sum, paired_avg, paired_diff, paired_diff_norm, paired_diff_norm1, paired_diff_norm2, norm_mean, norm1, matrix, frame_weight, norm_weight, group_mean, combine, keep_datatype, abs, pos, neg, mean, median, mean_div_n, sum, var_, std, max, max_index, max_index_prune, max_index_add, min, replicate_times, fnorm, conjunction, vote, sort, temporal_ar1, prune, pca, pca_mask, scm, zconcat, max_bonfcor, multiply, add, mask_file, rms, no_check)
    return mri_concat_execute(params, runner);
}


export {
      MRI_CONCAT_METADATA,
      MriConcatOutputs,
      MriConcatParameters,
      mri_concat,
      mri_concat_execute,
      mri_concat_params,
};
