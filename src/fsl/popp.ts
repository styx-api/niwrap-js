// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const POPP_METADATA: Metadata = {
    id: "1f920b46fb3c5c87215e1e824c3313d262a8264e.boutiques",
    name: "popp",
    package: "fsl",
    container_image_tag: "brainlife/fsl:6.0.4-patched2",
};


interface PoppParameters {
    "@type": "fsl.popp";
    "input_file": InputPathType;
    "output_basename": string;
    "sampling_rate"?: number | null | undefined;
    "tr_value"?: number | null | undefined;
    "resp_column"?: number | null | undefined;
    "cardiac_column"?: number | null | undefined;
    "trigger_column"?: number | null | undefined;
    "rvt_flag": boolean;
    "heart_rate_flag": boolean;
    "pulseox_trigger_flag": boolean;
    "smooth_card"?: number | null | undefined;
    "smooth_resp"?: number | null | undefined;
    "high_freq_cutoff"?: number | null | undefined;
    "low_freq_cutoff"?: number | null | undefined;
    "init_thresh_c"?: number | null | undefined;
    "n_thresh_c"?: number | null | undefined;
    "init_thresh_r"?: number | null | undefined;
    "n_thresh_r"?: number | null | undefined;
    "invert_resp_flag": boolean;
    "invert_cardiac_flag": boolean;
    "noclean1_flag": boolean;
    "noclean2_flag": boolean;
    "load_card_phase"?: InputPathType | null | undefined;
    "load_resp_phase"?: InputPathType | null | undefined;
    "vol_file"?: InputPathType | null | undefined;
    "start_sample"?: number | null | undefined;
    "resp_add"?: string | null | undefined;
    "resp_del"?: string | null | undefined;
    "card_add"?: string | null | undefined;
    "card_del"?: string | null | undefined;
    "verbose_flag": boolean;
    "debug_flag": boolean;
    "help_flag": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "fsl.popp": popp_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "fsl.popp": popp_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `popp(...)`.
 *
 * @interface
 */
interface PoppOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Processed physiological data output
     */
    processed_data_output: OutputPathType;
    /**
     * Timing and triggers output
     */
    timing_output: OutputPathType;
    /**
     * RVT data output file
     */
    rvt_data_output: OutputPathType;
    /**
     * Heartrate data output file
     */
    heartrate_data_output: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_file Input physiological data filename (text format)
 * @param output_basename Output basename for physiological data and timing/triggers (no extensions)
 * @param sampling_rate Sampling rate in Hz (default is 100Hz)
 * @param tr_value TR value in seconds
 * @param resp_column Specify column number of respiratory input
 * @param cardiac_column Specify column number of cardiac input
 * @param trigger_column Specify column number of trigger input
 * @param rvt_flag Generate RVT data
 * @param heart_rate_flag Generate heartrate data
 * @param pulseox_trigger_flag Specify that cardiac data is a trigger
 * @param smooth_card Specify smoothing amount for cardiac (in seconds)
 * @param smooth_resp Specify smoothing amount for respiratory (in seconds)
 * @param high_freq_cutoff High frequency cut off for respiratory filter in Hz (default is 5Hz)
 * @param low_freq_cutoff Low frequency cut off for respiratory filter in Hz (default is 0.1Hz)
 * @param init_thresh_c Initial threshold percentile for cardiac (default 90)
 * @param n_thresh_c Neighbourhood exclusion threshold percentile for cardiac (default 60)
 * @param init_thresh_r Initial threshold percentile for respiratory (default 80)
 * @param n_thresh_r Neighbourhood exclusion threshold percentile for respiratory (default 80)
 * @param invert_resp_flag Invert respiratory trace
 * @param invert_cardiac_flag Invert cardiac trace
 * @param noclean1_flag Turn off cleanup phase 1
 * @param noclean2_flag Turn off cleanup phase 2
 * @param load_card_phase Input cardiac phase for reprocessing (text format)
 * @param load_resp_phase Input respiratory phase for reprocessing (text format)
 * @param vol_file Input volumetric image (EPI) filename
 * @param start_sample Set sample number of the starting time (t=0)
 * @param resp_add Comma separated list of times (in sec) to add to respiratory peak list (uses nearest local max)
 * @param resp_del Comma separated list of times (in sec) to delete from respiratory peak list (uses nearest existing peak)
 * @param card_add Comma separated list of times (in sec) to add to cardiac peak list (uses nearest local max)
 * @param card_del Comma separated list of times (in sec) to delete from cardiac peak list (uses nearest existing peak)
 * @param verbose_flag Switch on diagnostic messages
 * @param debug_flag Output debugging information
 * @param help_flag Display this help message
 *
 * @returns Parameter dictionary
 */
function popp_params(
    input_file: InputPathType,
    output_basename: string,
    sampling_rate: number | null = 100,
    tr_value: number | null = null,
    resp_column: number | null = null,
    cardiac_column: number | null = null,
    trigger_column: number | null = null,
    rvt_flag: boolean = false,
    heart_rate_flag: boolean = false,
    pulseox_trigger_flag: boolean = false,
    smooth_card: number | null = null,
    smooth_resp: number | null = null,
    high_freq_cutoff: number | null = 5,
    low_freq_cutoff: number | null = 0.1,
    init_thresh_c: number | null = 90,
    n_thresh_c: number | null = 60,
    init_thresh_r: number | null = 80,
    n_thresh_r: number | null = 80,
    invert_resp_flag: boolean = false,
    invert_cardiac_flag: boolean = false,
    noclean1_flag: boolean = false,
    noclean2_flag: boolean = false,
    load_card_phase: InputPathType | null = null,
    load_resp_phase: InputPathType | null = null,
    vol_file: InputPathType | null = null,
    start_sample: number | null = null,
    resp_add: string | null = null,
    resp_del: string | null = null,
    card_add: string | null = null,
    card_del: string | null = null,
    verbose_flag: boolean = false,
    debug_flag: boolean = false,
    help_flag: boolean = false,
): PoppParameters {
    const params = {
        "@type": "fsl.popp" as const,
        "input_file": input_file,
        "output_basename": output_basename,
        "rvt_flag": rvt_flag,
        "heart_rate_flag": heart_rate_flag,
        "pulseox_trigger_flag": pulseox_trigger_flag,
        "invert_resp_flag": invert_resp_flag,
        "invert_cardiac_flag": invert_cardiac_flag,
        "noclean1_flag": noclean1_flag,
        "noclean2_flag": noclean2_flag,
        "verbose_flag": verbose_flag,
        "debug_flag": debug_flag,
        "help_flag": help_flag,
    };
    if (sampling_rate !== null) {
        params["sampling_rate"] = sampling_rate;
    }
    if (tr_value !== null) {
        params["tr_value"] = tr_value;
    }
    if (resp_column !== null) {
        params["resp_column"] = resp_column;
    }
    if (cardiac_column !== null) {
        params["cardiac_column"] = cardiac_column;
    }
    if (trigger_column !== null) {
        params["trigger_column"] = trigger_column;
    }
    if (smooth_card !== null) {
        params["smooth_card"] = smooth_card;
    }
    if (smooth_resp !== null) {
        params["smooth_resp"] = smooth_resp;
    }
    if (high_freq_cutoff !== null) {
        params["high_freq_cutoff"] = high_freq_cutoff;
    }
    if (low_freq_cutoff !== null) {
        params["low_freq_cutoff"] = low_freq_cutoff;
    }
    if (init_thresh_c !== null) {
        params["init_thresh_c"] = init_thresh_c;
    }
    if (n_thresh_c !== null) {
        params["n_thresh_c"] = n_thresh_c;
    }
    if (init_thresh_r !== null) {
        params["init_thresh_r"] = init_thresh_r;
    }
    if (n_thresh_r !== null) {
        params["n_thresh_r"] = n_thresh_r;
    }
    if (load_card_phase !== null) {
        params["load_card_phase"] = load_card_phase;
    }
    if (load_resp_phase !== null) {
        params["load_resp_phase"] = load_resp_phase;
    }
    if (vol_file !== null) {
        params["vol_file"] = vol_file;
    }
    if (start_sample !== null) {
        params["start_sample"] = start_sample;
    }
    if (resp_add !== null) {
        params["resp_add"] = resp_add;
    }
    if (resp_del !== null) {
        params["resp_del"] = resp_del;
    }
    if (card_add !== null) {
        params["card_add"] = card_add;
    }
    if (card_del !== null) {
        params["card_del"] = card_del;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function popp_cargs(
    params: PoppParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("popp");
    cargs.push(
        "-i",
        execution.inputFile((params["input_file"] ?? null))
    );
    cargs.push(
        "-o",
        (params["output_basename"] ?? null)
    );
    if ((params["sampling_rate"] ?? null) !== null) {
        cargs.push(
            "-s",
            String((params["sampling_rate"] ?? null))
        );
    }
    if ((params["tr_value"] ?? null) !== null) {
        cargs.push(
            "--tr",
            String((params["tr_value"] ?? null))
        );
    }
    if ((params["resp_column"] ?? null) !== null) {
        cargs.push(
            "--resp",
            String((params["resp_column"] ?? null))
        );
    }
    if ((params["cardiac_column"] ?? null) !== null) {
        cargs.push(
            "--cardiac",
            String((params["cardiac_column"] ?? null))
        );
    }
    if ((params["trigger_column"] ?? null) !== null) {
        cargs.push(
            "--trigger",
            String((params["trigger_column"] ?? null))
        );
    }
    if ((params["rvt_flag"] ?? null)) {
        cargs.push("--rvt");
    }
    if ((params["heart_rate_flag"] ?? null)) {
        cargs.push("--heartrate");
    }
    if ((params["pulseox_trigger_flag"] ?? null)) {
        cargs.push("--pulseox_trigger");
    }
    if ((params["smooth_card"] ?? null) !== null) {
        cargs.push(
            "--smoothcard",
            String((params["smooth_card"] ?? null))
        );
    }
    if ((params["smooth_resp"] ?? null) !== null) {
        cargs.push(
            "--smoothresp",
            String((params["smooth_resp"] ?? null))
        );
    }
    if ((params["high_freq_cutoff"] ?? null) !== null) {
        cargs.push(
            "--highfreqcutoff",
            String((params["high_freq_cutoff"] ?? null))
        );
    }
    if ((params["low_freq_cutoff"] ?? null) !== null) {
        cargs.push(
            "--lowfreqcutoff",
            String((params["low_freq_cutoff"] ?? null))
        );
    }
    if ((params["init_thresh_c"] ?? null) !== null) {
        cargs.push(
            "--initthreshc",
            String((params["init_thresh_c"] ?? null))
        );
    }
    if ((params["n_thresh_c"] ?? null) !== null) {
        cargs.push(
            "--nthreshc",
            String((params["n_thresh_c"] ?? null))
        );
    }
    if ((params["init_thresh_r"] ?? null) !== null) {
        cargs.push(
            "--initthreshr",
            String((params["init_thresh_r"] ?? null))
        );
    }
    if ((params["n_thresh_r"] ?? null) !== null) {
        cargs.push(
            "--nthreshr",
            String((params["n_thresh_r"] ?? null))
        );
    }
    if ((params["invert_resp_flag"] ?? null)) {
        cargs.push("--invertresp");
    }
    if ((params["invert_cardiac_flag"] ?? null)) {
        cargs.push("--invertcardiac");
    }
    if ((params["noclean1_flag"] ?? null)) {
        cargs.push("--noclean1");
    }
    if ((params["noclean2_flag"] ?? null)) {
        cargs.push("--noclean2");
    }
    if ((params["load_card_phase"] ?? null) !== null) {
        cargs.push(
            "--loadcardphase",
            execution.inputFile((params["load_card_phase"] ?? null))
        );
    }
    if ((params["load_resp_phase"] ?? null) !== null) {
        cargs.push(
            "--loadrespphase",
            execution.inputFile((params["load_resp_phase"] ?? null))
        );
    }
    if ((params["vol_file"] ?? null) !== null) {
        cargs.push(
            "--vol",
            execution.inputFile((params["vol_file"] ?? null))
        );
    }
    if ((params["start_sample"] ?? null) !== null) {
        cargs.push(
            "--startingsample",
            String((params["start_sample"] ?? null))
        );
    }
    if ((params["resp_add"] ?? null) !== null) {
        cargs.push(
            "--respadd",
            (params["resp_add"] ?? null)
        );
    }
    if ((params["resp_del"] ?? null) !== null) {
        cargs.push(
            "--respdel",
            (params["resp_del"] ?? null)
        );
    }
    if ((params["card_add"] ?? null) !== null) {
        cargs.push(
            "--cardadd",
            (params["card_add"] ?? null)
        );
    }
    if ((params["card_del"] ?? null) !== null) {
        cargs.push(
            "--carddel",
            (params["card_del"] ?? null)
        );
    }
    if ((params["verbose_flag"] ?? null)) {
        cargs.push("-v");
    }
    if ((params["debug_flag"] ?? null)) {
        cargs.push("--debug");
    }
    if ((params["help_flag"] ?? null)) {
        cargs.push("-h");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function popp_outputs(
    params: PoppParameters,
    execution: Execution,
): PoppOutputs {
    const ret: PoppOutputs = {
        root: execution.outputFile("."),
        processed_data_output: execution.outputFile([(params["output_basename"] ?? null), "_processed.txt"].join('')),
        timing_output: execution.outputFile([(params["output_basename"] ?? null), "_timing.txt"].join('')),
        rvt_data_output: execution.outputFile([(params["output_basename"] ?? null), "_rvt.txt"].join('')),
        heartrate_data_output: execution.outputFile([(params["output_basename"] ?? null), "_heartrate.txt"].join('')),
    };
    return ret;
}


/**
 * Physiological data processing tool of FSL.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param params The parameters.
 * @param execution The execution object.
 *
 * @returns NamedTuple of outputs (described in `PoppOutputs`).
 */
function popp_execute(
    params: PoppParameters,
    execution: Execution,
): PoppOutputs {
    params = execution.params(params)
    const cargs = popp_cargs(params, execution)
    const ret = popp_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * Physiological data processing tool of FSL.
 *
 * Author: FMRIB Analysis Group, University of Oxford
 *
 * URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
 *
 * @param input_file Input physiological data filename (text format)
 * @param output_basename Output basename for physiological data and timing/triggers (no extensions)
 * @param sampling_rate Sampling rate in Hz (default is 100Hz)
 * @param tr_value TR value in seconds
 * @param resp_column Specify column number of respiratory input
 * @param cardiac_column Specify column number of cardiac input
 * @param trigger_column Specify column number of trigger input
 * @param rvt_flag Generate RVT data
 * @param heart_rate_flag Generate heartrate data
 * @param pulseox_trigger_flag Specify that cardiac data is a trigger
 * @param smooth_card Specify smoothing amount for cardiac (in seconds)
 * @param smooth_resp Specify smoothing amount for respiratory (in seconds)
 * @param high_freq_cutoff High frequency cut off for respiratory filter in Hz (default is 5Hz)
 * @param low_freq_cutoff Low frequency cut off for respiratory filter in Hz (default is 0.1Hz)
 * @param init_thresh_c Initial threshold percentile for cardiac (default 90)
 * @param n_thresh_c Neighbourhood exclusion threshold percentile for cardiac (default 60)
 * @param init_thresh_r Initial threshold percentile for respiratory (default 80)
 * @param n_thresh_r Neighbourhood exclusion threshold percentile for respiratory (default 80)
 * @param invert_resp_flag Invert respiratory trace
 * @param invert_cardiac_flag Invert cardiac trace
 * @param noclean1_flag Turn off cleanup phase 1
 * @param noclean2_flag Turn off cleanup phase 2
 * @param load_card_phase Input cardiac phase for reprocessing (text format)
 * @param load_resp_phase Input respiratory phase for reprocessing (text format)
 * @param vol_file Input volumetric image (EPI) filename
 * @param start_sample Set sample number of the starting time (t=0)
 * @param resp_add Comma separated list of times (in sec) to add to respiratory peak list (uses nearest local max)
 * @param resp_del Comma separated list of times (in sec) to delete from respiratory peak list (uses nearest existing peak)
 * @param card_add Comma separated list of times (in sec) to add to cardiac peak list (uses nearest local max)
 * @param card_del Comma separated list of times (in sec) to delete from cardiac peak list (uses nearest existing peak)
 * @param verbose_flag Switch on diagnostic messages
 * @param debug_flag Output debugging information
 * @param help_flag Display this help message
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `PoppOutputs`).
 */
function popp(
    input_file: InputPathType,
    output_basename: string,
    sampling_rate: number | null = 100,
    tr_value: number | null = null,
    resp_column: number | null = null,
    cardiac_column: number | null = null,
    trigger_column: number | null = null,
    rvt_flag: boolean = false,
    heart_rate_flag: boolean = false,
    pulseox_trigger_flag: boolean = false,
    smooth_card: number | null = null,
    smooth_resp: number | null = null,
    high_freq_cutoff: number | null = 5,
    low_freq_cutoff: number | null = 0.1,
    init_thresh_c: number | null = 90,
    n_thresh_c: number | null = 60,
    init_thresh_r: number | null = 80,
    n_thresh_r: number | null = 80,
    invert_resp_flag: boolean = false,
    invert_cardiac_flag: boolean = false,
    noclean1_flag: boolean = false,
    noclean2_flag: boolean = false,
    load_card_phase: InputPathType | null = null,
    load_resp_phase: InputPathType | null = null,
    vol_file: InputPathType | null = null,
    start_sample: number | null = null,
    resp_add: string | null = null,
    resp_del: string | null = null,
    card_add: string | null = null,
    card_del: string | null = null,
    verbose_flag: boolean = false,
    debug_flag: boolean = false,
    help_flag: boolean = false,
    runner: Runner | null = null,
): PoppOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(POPP_METADATA);
    const params = popp_params(input_file, output_basename, sampling_rate, tr_value, resp_column, cardiac_column, trigger_column, rvt_flag, heart_rate_flag, pulseox_trigger_flag, smooth_card, smooth_resp, high_freq_cutoff, low_freq_cutoff, init_thresh_c, n_thresh_c, init_thresh_r, n_thresh_r, invert_resp_flag, invert_cardiac_flag, noclean1_flag, noclean2_flag, load_card_phase, load_resp_phase, vol_file, start_sample, resp_add, resp_del, card_add, card_del, verbose_flag, debug_flag, help_flag)
    return popp_execute(params, execution);
}


export {
      POPP_METADATA,
      PoppOutputs,
      PoppParameters,
      popp,
      popp_cargs,
      popp_execute,
      popp_outputs,
      popp_params,
};
