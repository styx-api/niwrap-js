// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const MRI_RF_LABEL_METADATA: Metadata = {
    id: "b3bf0dd7970ddab056fc6331f77e7af692ba0c3a.boutiques",
    name: "mri_rf_label",
    package: "freesurfer",
    container_image_tag: "freesurfer/freesurfer:7.4.1",
};


interface MriRfLabelParameters {
    "@type": "freesurfer.mri_rf_label";
    "input_volumes": Array<InputPathType>;
    "transform_file": InputPathType;
    "gcafile": InputPathType;
    "output_volume": string;
    "cross_sequence_flag": boolean;
    "nogibbs_flag": boolean;
    "wm_path"?: InputPathType | null | undefined;
    "conform_flag": boolean;
    "normpd_flag": boolean;
    "gca_tl"?: InputPathType | null | undefined;
    "debug_voxel"?: Array<number> | null | undefined;
    "debug_node"?: Array<number> | null | undefined;
    "debug_label"?: number | null | undefined;
    "tr"?: number | null | undefined;
    "te"?: number | null | undefined;
    "alpha"?: number | null | undefined;
    "example"?: Array<InputPathType> | null | undefined;
    "pthresh"?: number | null | undefined;
    "niter"?: number | null | undefined;
    "novar_flag": boolean;
    "regularize"?: number | null | undefined;
    "nohippo_flag": boolean;
    "fwm"?: InputPathType | null | undefined;
    "mri_vol"?: InputPathType | null | undefined;
    "heq"?: InputPathType | null | undefined;
    "renorm"?: InputPathType | null | undefined;
    "flash_flag": boolean;
    "flash_params"?: InputPathType | null | undefined;
    "renormalize"?: Array<number> | null | undefined;
    "set_input"?: InputPathType | null | undefined;
    "histogram_flag": boolean;
    "cond_density_mean"?: number | null | undefined;
    "snapshots"?: Array<string> | null | undefined;
    "mask"?: InputPathType | null | undefined;
    "expand"?: number | null | undefined;
    "max_iter"?: number | null | undefined;
    "filter_mode"?: Array<number> | null | undefined;
    "longitudinal_vol"?: InputPathType | null | undefined;
    "longitudinal_lta"?: InputPathType | null | undefined;
    "relabel_unlikely_flag"?: Array<number> | null | undefined;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "freesurfer.mri_rf_label": mri_rf_label_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "freesurfer.mri_rf_label": mri_rf_label_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `mri_rf_label(...)`.
 *
 * @interface
 */
interface MriRfLabelOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output volume from mri_ca_label
     */
    outvol: OutputPathType;
}


/**
 * Build parameters.
 *
 * @param input_volumes Input volume(s)
 * @param transform_file Transform file
 * @param gcafile GCA file
 * @param output_volume Output volume
 * @param cross_sequence_flag Label a volume acquired with a sequence different than atlas
 * @param nogibbs_flag Disable gibbs priors
 * @param wm_path Use WM segmentation from provided file
 * @param conform_flag Interpolate volume to be isotropic 1mm^3
 * @param normpd_flag Normalize PD image to GCA means
 * @param gca_tl Use file to label the thin temporal lobe
 * @param debug_voxel Debug voxel at specified coordinates
 * @param debug_node Debug node at specified coordinates
 * @param debug_label Debug label at specified index
 * @param tr Set TR in msec
 * @param te Set TE in msec
 * @param alpha Set alpha in radians
 * @param example Use T1 (mri_vol) and segmentation as example
 * @param pthresh Use p threshold for adaptive renormalization
 * @param niter Apply max likelihood for n iterations
 * @param novar_flag Do not use variance in classification
 * @param regularize Regularize variance to be sigma+nC(noise)
 * @param nohippo_flag Do not auto-edit hippocampus
 * @param fwm Use fixed white matter segmentation from wm
 * @param mri_vol Write most likely MR volume to specified file
 * @param heq Use histogram equalization from specified volume
 * @param renorm Renormalize using predicted intensity values
 * @param flash_flag Use FLASH forward model to predict intensity values
 * @param flash_params Use FLASH forward model and tissue params from file
 * @param renormalize Renorm class means iter times after initial label with window of wsize
 * @param set_input Set input volume
 * @param histogram_flag Use GCA to histogram normalize input image
 * @param cond_density_mean Mean filter n times to conditional densities
 * @param snapshots Write snapshots of gibbs process every n times to filename
 * @param mask Use mri_vol to mask final labeling
 * @param expand Expand
 * @param max_iter Set max iterations
 * @param filter_mode Filter labeled volume with threshold t mode filter f times
 * @param longitudinal_vol Longitudinal processing: mri_vol is label from tp1, LTA is registration from tp1 to current data
 * @param longitudinal_lta Longitudinal LTA registration
 * @param relabel_unlikely_flag Reclassify voxels using a Gaussian window to recomute priors and likelihoods
 *
 * @returns Parameter dictionary
 */
function mri_rf_label_params(
    input_volumes: Array<InputPathType>,
    transform_file: InputPathType,
    gcafile: InputPathType,
    output_volume: string,
    cross_sequence_flag: boolean = false,
    nogibbs_flag: boolean = false,
    wm_path: InputPathType | null = null,
    conform_flag: boolean = false,
    normpd_flag: boolean = false,
    gca_tl: InputPathType | null = null,
    debug_voxel: Array<number> | null = null,
    debug_node: Array<number> | null = null,
    debug_label: number | null = null,
    tr: number | null = null,
    te: number | null = null,
    alpha: number | null = null,
    example: Array<InputPathType> | null = null,
    pthresh: number | null = 0.7,
    niter: number | null = 2,
    novar_flag: boolean = false,
    regularize: number | null = null,
    nohippo_flag: boolean = false,
    fwm: InputPathType | null = null,
    mri_vol: InputPathType | null = null,
    heq: InputPathType | null = null,
    renorm: InputPathType | null = null,
    flash_flag: boolean = false,
    flash_params: InputPathType | null = null,
    renormalize: Array<number> | null = null,
    set_input: InputPathType | null = null,
    histogram_flag: boolean = false,
    cond_density_mean: number | null = null,
    snapshots: Array<string> | null = null,
    mask: InputPathType | null = null,
    expand: number | null = null,
    max_iter: number | null = 200,
    filter_mode: Array<number> | null = null,
    longitudinal_vol: InputPathType | null = null,
    longitudinal_lta: InputPathType | null = null,
    relabel_unlikely_flag: Array<number> | null = null,
): MriRfLabelParameters {
    const params = {
        "@type": "freesurfer.mri_rf_label" as const,
        "input_volumes": input_volumes,
        "transform_file": transform_file,
        "gcafile": gcafile,
        "output_volume": output_volume,
        "cross_sequence_flag": cross_sequence_flag,
        "nogibbs_flag": nogibbs_flag,
        "conform_flag": conform_flag,
        "normpd_flag": normpd_flag,
        "novar_flag": novar_flag,
        "nohippo_flag": nohippo_flag,
        "flash_flag": flash_flag,
        "histogram_flag": histogram_flag,
    };
    if (wm_path !== null) {
        params["wm_path"] = wm_path;
    }
    if (gca_tl !== null) {
        params["gca_tl"] = gca_tl;
    }
    if (debug_voxel !== null) {
        params["debug_voxel"] = debug_voxel;
    }
    if (debug_node !== null) {
        params["debug_node"] = debug_node;
    }
    if (debug_label !== null) {
        params["debug_label"] = debug_label;
    }
    if (tr !== null) {
        params["tr"] = tr;
    }
    if (te !== null) {
        params["te"] = te;
    }
    if (alpha !== null) {
        params["alpha"] = alpha;
    }
    if (example !== null) {
        params["example"] = example;
    }
    if (pthresh !== null) {
        params["pthresh"] = pthresh;
    }
    if (niter !== null) {
        params["niter"] = niter;
    }
    if (regularize !== null) {
        params["regularize"] = regularize;
    }
    if (fwm !== null) {
        params["fwm"] = fwm;
    }
    if (mri_vol !== null) {
        params["mri_vol"] = mri_vol;
    }
    if (heq !== null) {
        params["heq"] = heq;
    }
    if (renorm !== null) {
        params["renorm"] = renorm;
    }
    if (flash_params !== null) {
        params["flash_params"] = flash_params;
    }
    if (renormalize !== null) {
        params["renormalize"] = renormalize;
    }
    if (set_input !== null) {
        params["set_input"] = set_input;
    }
    if (cond_density_mean !== null) {
        params["cond_density_mean"] = cond_density_mean;
    }
    if (snapshots !== null) {
        params["snapshots"] = snapshots;
    }
    if (mask !== null) {
        params["mask"] = mask;
    }
    if (expand !== null) {
        params["expand"] = expand;
    }
    if (max_iter !== null) {
        params["max_iter"] = max_iter;
    }
    if (filter_mode !== null) {
        params["filter_mode"] = filter_mode;
    }
    if (longitudinal_vol !== null) {
        params["longitudinal_vol"] = longitudinal_vol;
    }
    if (longitudinal_lta !== null) {
        params["longitudinal_lta"] = longitudinal_lta;
    }
    if (relabel_unlikely_flag !== null) {
        params["relabel_unlikely_flag"] = relabel_unlikely_flag;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function mri_rf_label_cargs(
    params: MriRfLabelParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("mri_rf_label");
    cargs.push(...(params["input_volumes"] ?? null).map(f => execution.inputFile(f)));
    cargs.push(execution.inputFile((params["transform_file"] ?? null)));
    cargs.push(execution.inputFile((params["gcafile"] ?? null)));
    cargs.push((params["output_volume"] ?? null));
    if ((params["cross_sequence_flag"] ?? null)) {
        cargs.push("-cross-sequence");
    }
    if ((params["nogibbs_flag"] ?? null)) {
        cargs.push("-nogibbs");
    }
    if ((params["wm_path"] ?? null) !== null) {
        cargs.push(
            "-wm",
            execution.inputFile((params["wm_path"] ?? null))
        );
    }
    if ((params["conform_flag"] ?? null)) {
        cargs.push("-conform");
    }
    if ((params["normpd_flag"] ?? null)) {
        cargs.push("-normpd");
    }
    if ((params["gca_tl"] ?? null) !== null) {
        cargs.push(
            "-tl",
            execution.inputFile((params["gca_tl"] ?? null))
        );
    }
    if ((params["debug_voxel"] ?? null) !== null) {
        cargs.push(
            "-debug_voxel",
            ...(params["debug_voxel"] ?? null).map(String)
        );
    }
    if ((params["debug_node"] ?? null) !== null) {
        cargs.push(
            "-debug_node",
            ...(params["debug_node"] ?? null).map(String)
        );
    }
    if ((params["debug_label"] ?? null) !== null) {
        cargs.push(
            "-debug_label",
            String((params["debug_label"] ?? null))
        );
    }
    if ((params["tr"] ?? null) !== null) {
        cargs.push(
            "-tr",
            String((params["tr"] ?? null))
        );
    }
    if ((params["te"] ?? null) !== null) {
        cargs.push(
            "-te",
            String((params["te"] ?? null))
        );
    }
    if ((params["alpha"] ?? null) !== null) {
        cargs.push(
            "-alpha",
            String((params["alpha"] ?? null))
        );
    }
    if ((params["example"] ?? null) !== null) {
        cargs.push(
            "-example",
            ...(params["example"] ?? null).map(f => execution.inputFile(f))
        );
    }
    if ((params["pthresh"] ?? null) !== null) {
        cargs.push(
            "-pthresh",
            String((params["pthresh"] ?? null))
        );
    }
    if ((params["niter"] ?? null) !== null) {
        cargs.push(
            "-niter",
            String((params["niter"] ?? null))
        );
    }
    if ((params["novar_flag"] ?? null)) {
        cargs.push("-novar");
    }
    if ((params["regularize"] ?? null) !== null) {
        cargs.push(
            "-regularize",
            String((params["regularize"] ?? null))
        );
    }
    if ((params["nohippo_flag"] ?? null)) {
        cargs.push("-nohippo");
    }
    if ((params["fwm"] ?? null) !== null) {
        cargs.push(
            "-fwm",
            execution.inputFile((params["fwm"] ?? null))
        );
    }
    if ((params["mri_vol"] ?? null) !== null) {
        cargs.push(
            "-mri",
            execution.inputFile((params["mri_vol"] ?? null))
        );
    }
    if ((params["heq"] ?? null) !== null) {
        cargs.push(
            "-heq",
            execution.inputFile((params["heq"] ?? null))
        );
    }
    if ((params["renorm"] ?? null) !== null) {
        cargs.push(
            "-renorm",
            execution.inputFile((params["renorm"] ?? null))
        );
    }
    if ((params["flash_flag"] ?? null)) {
        cargs.push("-flash");
    }
    if ((params["flash_params"] ?? null) !== null) {
        cargs.push(
            "-flash_params",
            execution.inputFile((params["flash_params"] ?? null))
        );
    }
    if ((params["renormalize"] ?? null) !== null) {
        cargs.push(
            "-renormalize",
            ...(params["renormalize"] ?? null).map(String)
        );
    }
    if ((params["set_input"] ?? null) !== null) {
        cargs.push(
            "-r",
            execution.inputFile((params["set_input"] ?? null))
        );
    }
    if ((params["histogram_flag"] ?? null)) {
        cargs.push("-h");
    }
    if ((params["cond_density_mean"] ?? null) !== null) {
        cargs.push(
            "-a",
            String((params["cond_density_mean"] ?? null))
        );
    }
    if ((params["snapshots"] ?? null) !== null) {
        cargs.push(
            "-w",
            ...(params["snapshots"] ?? null)
        );
    }
    if ((params["mask"] ?? null) !== null) {
        cargs.push(
            "-m",
            execution.inputFile((params["mask"] ?? null))
        );
    }
    if ((params["expand"] ?? null) !== null) {
        cargs.push(
            "-e",
            String((params["expand"] ?? null))
        );
    }
    if ((params["max_iter"] ?? null) !== null) {
        cargs.push(
            "-n",
            String((params["max_iter"] ?? null))
        );
    }
    if ((params["filter_mode"] ?? null) !== null) {
        cargs.push(
            "-f",
            ...(params["filter_mode"] ?? null).map(String)
        );
    }
    if ((params["longitudinal_vol"] ?? null) !== null) {
        cargs.push(
            "-L",
            execution.inputFile((params["longitudinal_vol"] ?? null))
        );
    }
    if ((params["longitudinal_lta"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["longitudinal_lta"] ?? null)));
    }
    if ((params["relabel_unlikely_flag"] ?? null) !== null) {
        cargs.push(
            "-RELABEL_UNLIKELY",
            ...(params["relabel_unlikely_flag"] ?? null).map(String)
        );
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function mri_rf_label_outputs(
    params: MriRfLabelParameters,
    execution: Execution,
): MriRfLabelOutputs {
    const ret: MriRfLabelOutputs = {
        root: execution.outputFile("."),
        outvol: execution.outputFile([(params["output_volume"] ?? null)].join('')),
    };
    return ret;
}


/**
 * mri_rf_label
 *
 * MRI automatic tissue labeling using a Gaussian Classifier Atlas (GCA).
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriRfLabelOutputs`).
 */
function mri_rf_label_execute(
    params: MriRfLabelParameters,
    runner: Runner | null = null,
): MriRfLabelOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(MRI_RF_LABEL_METADATA);
    params = execution.params(params)
    const cargs = mri_rf_label_cargs(params, execution)
    const ret = mri_rf_label_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * mri_rf_label
 *
 * MRI automatic tissue labeling using a Gaussian Classifier Atlas (GCA).
 *
 * Author: FreeSurfer Developers
 *
 * URL: https://github.com/freesurfer/freesurfer
 *
 * @param input_volumes Input volume(s)
 * @param transform_file Transform file
 * @param gcafile GCA file
 * @param output_volume Output volume
 * @param cross_sequence_flag Label a volume acquired with a sequence different than atlas
 * @param nogibbs_flag Disable gibbs priors
 * @param wm_path Use WM segmentation from provided file
 * @param conform_flag Interpolate volume to be isotropic 1mm^3
 * @param normpd_flag Normalize PD image to GCA means
 * @param gca_tl Use file to label the thin temporal lobe
 * @param debug_voxel Debug voxel at specified coordinates
 * @param debug_node Debug node at specified coordinates
 * @param debug_label Debug label at specified index
 * @param tr Set TR in msec
 * @param te Set TE in msec
 * @param alpha Set alpha in radians
 * @param example Use T1 (mri_vol) and segmentation as example
 * @param pthresh Use p threshold for adaptive renormalization
 * @param niter Apply max likelihood for n iterations
 * @param novar_flag Do not use variance in classification
 * @param regularize Regularize variance to be sigma+nC(noise)
 * @param nohippo_flag Do not auto-edit hippocampus
 * @param fwm Use fixed white matter segmentation from wm
 * @param mri_vol Write most likely MR volume to specified file
 * @param heq Use histogram equalization from specified volume
 * @param renorm Renormalize using predicted intensity values
 * @param flash_flag Use FLASH forward model to predict intensity values
 * @param flash_params Use FLASH forward model and tissue params from file
 * @param renormalize Renorm class means iter times after initial label with window of wsize
 * @param set_input Set input volume
 * @param histogram_flag Use GCA to histogram normalize input image
 * @param cond_density_mean Mean filter n times to conditional densities
 * @param snapshots Write snapshots of gibbs process every n times to filename
 * @param mask Use mri_vol to mask final labeling
 * @param expand Expand
 * @param max_iter Set max iterations
 * @param filter_mode Filter labeled volume with threshold t mode filter f times
 * @param longitudinal_vol Longitudinal processing: mri_vol is label from tp1, LTA is registration from tp1 to current data
 * @param longitudinal_lta Longitudinal LTA registration
 * @param relabel_unlikely_flag Reclassify voxels using a Gaussian window to recomute priors and likelihoods
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `MriRfLabelOutputs`).
 */
function mri_rf_label(
    input_volumes: Array<InputPathType>,
    transform_file: InputPathType,
    gcafile: InputPathType,
    output_volume: string,
    cross_sequence_flag: boolean = false,
    nogibbs_flag: boolean = false,
    wm_path: InputPathType | null = null,
    conform_flag: boolean = false,
    normpd_flag: boolean = false,
    gca_tl: InputPathType | null = null,
    debug_voxel: Array<number> | null = null,
    debug_node: Array<number> | null = null,
    debug_label: number | null = null,
    tr: number | null = null,
    te: number | null = null,
    alpha: number | null = null,
    example: Array<InputPathType> | null = null,
    pthresh: number | null = 0.7,
    niter: number | null = 2,
    novar_flag: boolean = false,
    regularize: number | null = null,
    nohippo_flag: boolean = false,
    fwm: InputPathType | null = null,
    mri_vol: InputPathType | null = null,
    heq: InputPathType | null = null,
    renorm: InputPathType | null = null,
    flash_flag: boolean = false,
    flash_params: InputPathType | null = null,
    renormalize: Array<number> | null = null,
    set_input: InputPathType | null = null,
    histogram_flag: boolean = false,
    cond_density_mean: number | null = null,
    snapshots: Array<string> | null = null,
    mask: InputPathType | null = null,
    expand: number | null = null,
    max_iter: number | null = 200,
    filter_mode: Array<number> | null = null,
    longitudinal_vol: InputPathType | null = null,
    longitudinal_lta: InputPathType | null = null,
    relabel_unlikely_flag: Array<number> | null = null,
    runner: Runner | null = null,
): MriRfLabelOutputs {
    const params = mri_rf_label_params(input_volumes, transform_file, gcafile, output_volume, cross_sequence_flag, nogibbs_flag, wm_path, conform_flag, normpd_flag, gca_tl, debug_voxel, debug_node, debug_label, tr, te, alpha, example, pthresh, niter, novar_flag, regularize, nohippo_flag, fwm, mri_vol, heq, renorm, flash_flag, flash_params, renormalize, set_input, histogram_flag, cond_density_mean, snapshots, mask, expand, max_iter, filter_mode, longitudinal_vol, longitudinal_lta, relabel_unlikely_flag)
    return mri_rf_label_execute(params, runner);
}


export {
      MRI_RF_LABEL_METADATA,
      MriRfLabelOutputs,
      MriRfLabelParameters,
      mri_rf_label,
      mri_rf_label_execute,
      mri_rf_label_params,
};
