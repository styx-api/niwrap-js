// This file was auto generated by Styx.
// Do not edit this file directly.

import { Runner, Execution, Metadata, InputPathType, OutputPathType, getGlobalRunner } from 'styxdefs';

const C3D_AFFINE_TOOL_METADATA: Metadata = {
    id: "2295d98cda024ded2d2eadd5e1580f26abde5005.boutiques",
    name: "c3d_affine_tool",
    package: "c3d",
    container_image_tag: "pyushkevich/itksnap:v3.8.2",
};


interface C3dAffineToolParameters {
    "@type": "c3d.c3d_affine_tool";
    "transform_file"?: InputPathType | null | undefined;
    "reference_file"?: InputPathType | null | undefined;
    "source_file"?: InputPathType | null | undefined;
    "sform_file"?: InputPathType | null | undefined;
    "invert": boolean;
    "determinant": boolean;
    "multiply": boolean;
    "sqrt": boolean;
    "itk_transform"?: InputPathType | null | undefined;
    "irtk_transform"?: InputPathType | null | undefined;
    "fsl2ras": boolean;
    "ras2fsl": boolean;
    "out_itk_transform"?: string | null | undefined;
    "out_irtk_transform"?: string | null | undefined;
    "out_matfile"?: string | null | undefined;
    "info": boolean;
    "info_full": boolean;
}


/**
 * Get build cargs function by command type.
 *
 * @param t Command type
 *
 * @returns Build cargs function.
 */
function dynCargs(
    t: string,
): Function | undefined {
    const cargsFuncs = {
        "c3d.c3d_affine_tool": c3d_affine_tool_cargs,
    };
    return cargsFuncs[t];
}


/**
 * Get build outputs function by command type.
 *
 * @param t Command type
 *
 * @returns Build outputs function.
 */
function dynOutputs(
    t: string,
): Function | undefined {
    const outputsFuncs = {
        "c3d.c3d_affine_tool": c3d_affine_tool_outputs,
    };
    return outputsFuncs[t];
}


/**
 * Output object returned when calling `c3d_affine_tool(...)`.
 *
 * @interface
 */
interface C3dAffineToolOutputs {
    /**
     * Output root folder. This is the root folder for all outputs.
     */
    root: OutputPathType;
    /**
     * Output ITK transform file.
     */
    itk_transform_outfile: OutputPathType | null;
    /**
     * Output IRTK transform file.
     */
    irtk_transform_outfile: OutputPathType | null;
    /**
     * Write output matrix.
     */
    matrix_transform_outfile: OutputPathType | null;
}


/**
 * Build parameters.
 *
 * @param transform_file file or string representing the transform.
 * @param reference_file Set reference (fixed) image - only for -fsl2ras and -ras2fsl.
 * @param source_file Set source (moving) image - only for -fsl2ras and -ras2fsl.
 * @param sform_file Read matrix from NifTI sform.
 * @param invert Invert matrix.
 * @param determinant Print the determinant.
 * @param multiply Multiply matrices.
 * @param sqrt Matrix square root (i.e., Q s.t. A = Q * Q).
 * @param itk_transform Import ITK transform.
 * @param irtk_transform Import IRTK .dof format transform.
 * @param fsl2ras Convert FSL to RAS.
 * @param ras2fsl Convert RAS to FSL.
 * @param out_itk_transform Export ITK transform.
 * @param out_irtk_transform Export IRTK .dof format transform.
 * @param out_matfile Write output matrix.
 * @param info Print matrix.
 * @param info_full Print matrix and more detail about the transform.
 *
 * @returns Parameter dictionary
 */
function c3d_affine_tool_params(
    transform_file: InputPathType | null = null,
    reference_file: InputPathType | null = null,
    source_file: InputPathType | null = null,
    sform_file: InputPathType | null = null,
    invert: boolean = false,
    determinant: boolean = false,
    multiply: boolean = false,
    sqrt: boolean = false,
    itk_transform: InputPathType | null = null,
    irtk_transform: InputPathType | null = null,
    fsl2ras: boolean = false,
    ras2fsl: boolean = false,
    out_itk_transform: string | null = null,
    out_irtk_transform: string | null = null,
    out_matfile: string | null = null,
    info: boolean = false,
    info_full: boolean = false,
): C3dAffineToolParameters {
    const params = {
        "@type": "c3d.c3d_affine_tool" as const,
        "invert": invert,
        "determinant": determinant,
        "multiply": multiply,
        "sqrt": sqrt,
        "fsl2ras": fsl2ras,
        "ras2fsl": ras2fsl,
        "info": info,
        "info_full": info_full,
    };
    if (transform_file !== null) {
        params["transform_file"] = transform_file;
    }
    if (reference_file !== null) {
        params["reference_file"] = reference_file;
    }
    if (source_file !== null) {
        params["source_file"] = source_file;
    }
    if (sform_file !== null) {
        params["sform_file"] = sform_file;
    }
    if (itk_transform !== null) {
        params["itk_transform"] = itk_transform;
    }
    if (irtk_transform !== null) {
        params["irtk_transform"] = irtk_transform;
    }
    if (out_itk_transform !== null) {
        params["out_itk_transform"] = out_itk_transform;
    }
    if (out_irtk_transform !== null) {
        params["out_irtk_transform"] = out_irtk_transform;
    }
    if (out_matfile !== null) {
        params["out_matfile"] = out_matfile;
    }
    return params;
}


/**
 * Build command-line arguments from parameters.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Command-line arguments.
 */
function c3d_affine_tool_cargs(
    params: C3dAffineToolParameters,
    execution: Execution,
): string[] {
    const cargs: string[] = [];
    cargs.push("c3d_affine_tool");
    if ((params["transform_file"] ?? null) !== null) {
        cargs.push(execution.inputFile((params["transform_file"] ?? null)));
    }
    if ((params["reference_file"] ?? null) !== null) {
        cargs.push(
            "-ref",
            execution.inputFile((params["reference_file"] ?? null))
        );
    }
    if ((params["source_file"] ?? null) !== null) {
        cargs.push(
            "-src",
            execution.inputFile((params["source_file"] ?? null))
        );
    }
    if ((params["sform_file"] ?? null) !== null) {
        cargs.push(
            "-sform",
            execution.inputFile((params["sform_file"] ?? null))
        );
    }
    if ((params["invert"] ?? null)) {
        cargs.push("-inv");
    }
    if ((params["determinant"] ?? null)) {
        cargs.push("-det");
    }
    if ((params["multiply"] ?? null)) {
        cargs.push("-mult");
    }
    if ((params["sqrt"] ?? null)) {
        cargs.push("-sqrt");
    }
    if ((params["itk_transform"] ?? null) !== null) {
        cargs.push(
            "-itk",
            execution.inputFile((params["itk_transform"] ?? null))
        );
    }
    if ((params["irtk_transform"] ?? null) !== null) {
        cargs.push(
            "-irtk",
            execution.inputFile((params["irtk_transform"] ?? null))
        );
    }
    if ((params["fsl2ras"] ?? null)) {
        cargs.push("-fsl2ras");
    }
    if ((params["ras2fsl"] ?? null)) {
        cargs.push("-ras2fsl");
    }
    if ((params["out_itk_transform"] ?? null) !== null) {
        cargs.push(
            "-oitk",
            (params["out_itk_transform"] ?? null)
        );
    }
    if ((params["out_irtk_transform"] ?? null) !== null) {
        cargs.push(
            "-oirtk",
            (params["out_irtk_transform"] ?? null)
        );
    }
    if ((params["out_matfile"] ?? null) !== null) {
        cargs.push(
            "-o",
            (params["out_matfile"] ?? null)
        );
    }
    if ((params["info"] ?? null)) {
        cargs.push("-info");
    }
    if ((params["info_full"] ?? null)) {
        cargs.push("-info-full");
    }
    return cargs;
}


/**
 * Build outputs object containing output file paths and possibly stdout/stderr.
 *
 * @param params The parameters.
 * @param execution The execution object for resolving input paths.
 *
 * @returns Outputs object.
 */
function c3d_affine_tool_outputs(
    params: C3dAffineToolParameters,
    execution: Execution,
): C3dAffineToolOutputs {
    const ret: C3dAffineToolOutputs = {
        root: execution.outputFile("."),
        itk_transform_outfile: ((params["out_itk_transform"] ?? null) !== null) ? execution.outputFile([(params["out_itk_transform"] ?? null)].join('')) : null,
        irtk_transform_outfile: ((params["out_irtk_transform"] ?? null) !== null) ? execution.outputFile([(params["out_irtk_transform"] ?? null)].join('')) : null,
        matrix_transform_outfile: ((params["out_matfile"] ?? null) !== null) ? execution.outputFile([(params["out_matfile"] ?? null)].join('')) : null,
    };
    return ret;
}


/**
 * RAS affine transform tool.
 *
 * Author: Convert3D Developers
 *
 * URL: http://www.itksnap.org/pmwiki/pmwiki.php?n=Convert3D.Convert3D
 *
 * @param params The parameters.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `C3dAffineToolOutputs`).
 */
function c3d_affine_tool_execute(
    params: C3dAffineToolParameters,
    runner: Runner | null = null,
): C3dAffineToolOutputs {
    runner = runner || getGlobalRunner();
    const execution = runner.startExecution(C3D_AFFINE_TOOL_METADATA);
    params = execution.params(params)
    const cargs = c3d_affine_tool_cargs(params, execution)
    const ret = c3d_affine_tool_outputs(params, execution)
    execution.run(cargs, undefined);
    return ret;
}


/**
 * RAS affine transform tool.
 *
 * Author: Convert3D Developers
 *
 * URL: http://www.itksnap.org/pmwiki/pmwiki.php?n=Convert3D.Convert3D
 *
 * @param transform_file file or string representing the transform.
 * @param reference_file Set reference (fixed) image - only for -fsl2ras and -ras2fsl.
 * @param source_file Set source (moving) image - only for -fsl2ras and -ras2fsl.
 * @param sform_file Read matrix from NifTI sform.
 * @param invert Invert matrix.
 * @param determinant Print the determinant.
 * @param multiply Multiply matrices.
 * @param sqrt Matrix square root (i.e., Q s.t. A = Q * Q).
 * @param itk_transform Import ITK transform.
 * @param irtk_transform Import IRTK .dof format transform.
 * @param fsl2ras Convert FSL to RAS.
 * @param ras2fsl Convert RAS to FSL.
 * @param out_itk_transform Export ITK transform.
 * @param out_irtk_transform Export IRTK .dof format transform.
 * @param out_matfile Write output matrix.
 * @param info Print matrix.
 * @param info_full Print matrix and more detail about the transform.
 * @param runner Command runner
 *
 * @returns NamedTuple of outputs (described in `C3dAffineToolOutputs`).
 */
function c3d_affine_tool(
    transform_file: InputPathType | null = null,
    reference_file: InputPathType | null = null,
    source_file: InputPathType | null = null,
    sform_file: InputPathType | null = null,
    invert: boolean = false,
    determinant: boolean = false,
    multiply: boolean = false,
    sqrt: boolean = false,
    itk_transform: InputPathType | null = null,
    irtk_transform: InputPathType | null = null,
    fsl2ras: boolean = false,
    ras2fsl: boolean = false,
    out_itk_transform: string | null = null,
    out_irtk_transform: string | null = null,
    out_matfile: string | null = null,
    info: boolean = false,
    info_full: boolean = false,
    runner: Runner | null = null,
): C3dAffineToolOutputs {
    const params = c3d_affine_tool_params(transform_file, reference_file, source_file, sform_file, invert, determinant, multiply, sqrt, itk_transform, irtk_transform, fsl2ras, ras2fsl, out_itk_transform, out_irtk_transform, out_matfile, info, info_full)
    return c3d_affine_tool_execute(params, runner);
}


export {
      C3D_AFFINE_TOOL_METADATA,
      C3dAffineToolOutputs,
      C3dAffineToolParameters,
      c3d_affine_tool,
      c3d_affine_tool_execute,
      c3d_affine_tool_params,
};
